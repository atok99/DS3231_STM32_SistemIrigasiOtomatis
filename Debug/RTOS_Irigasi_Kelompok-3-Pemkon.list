
RTOS_Irigasi_Kelompok-3-Pemkon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ca4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08006e74  08006e74  00007e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd4  08006fd4  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006fd4  08006fd4  00007fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fdc  08006fdc  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fdc  08006fdc  00007fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fe0  08006fe0  00007fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006fe4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000430c  2000006c  08007050  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004378  08007050  00008378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019eee  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c1b  00000000  00000000  00021f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  00025ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001233  00000000  00000000  000272f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c65  00000000  00000000  0002852b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d04a  00000000  00000000  0004f190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ead0f  00000000  00000000  0006c1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156ee9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac8  00000000  00000000  00156f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0015d9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006e5c 	.word	0x08006e5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08006e5c 	.word	0x08006e5c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <i2c_writebyte>:
	I2C1->TRISE = 17;		            // Set TRISE = 1000ns/(1/16MHz) + 1 (lihat NOTE(2))
	I2C1->CR1 |= I2C_CR1_PE;		    // Enable peripheral I2C1
}

void i2c_writebyte(uint8_t byte)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 & I2C_SR1_TXE)){}	// Tunggu hingga register transmisi kosong
 80005aa:	bf00      	nop
 80005ac:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <i2c_writebyte+0x3c>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0f9      	beq.n	80005ac <i2c_writebyte+0xc>
	I2C1->DR = byte;			            // Tulis data ke data register
 80005b8:	4a08      	ldr	r2, [pc, #32]	@ (80005dc <i2c_writebyte+0x3c>)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));	    // Tunggu hingga register transmisi kembali kosong
 80005be:	bf00      	nop
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <i2c_writebyte+0x3c>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0f9      	beq.n	80005c0 <i2c_writebyte+0x20>
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40005400 	.word	0x40005400

080005e0 <i2c_readbyte>:

uint8_t i2c_readbyte(ack_send ack)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	if (ack) I2C1->CR1 |= I2C_CR1_ACK;	    // Jika baca banyak byte, set bit ACK
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d006      	beq.n	80005fe <i2c_readbyte+0x1e>
 80005f0:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <i2c_readbyte+0x4c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a0d      	ldr	r2, [pc, #52]	@ (800062c <i2c_readbyte+0x4c>)
 80005f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	e005      	b.n	800060a <i2c_readbyte+0x2a>
	else I2C1->CR1 &= ~I2C_CR1_ACK;	        // Jika baca terakhir, clear bit ACK
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <i2c_readbyte+0x4c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <i2c_readbyte+0x4c>)
 8000604:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000608:	6013      	str	r3, [r2, #0]
	
	while (!(I2C1->SR1 & I2C_SR1_RXNE)){};	// Tunggu data tersedia di register RX
 800060a:	bf00      	nop
 800060c:	4b07      	ldr	r3, [pc, #28]	@ (800062c <i2c_readbyte+0x4c>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0f9      	beq.n	800060c <i2c_readbyte+0x2c>
	
	return (I2C1->DR);		                // Return data yang diterima
 8000618:	4b04      	ldr	r3, [pc, #16]	@ (800062c <i2c_readbyte+0x4c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	b2db      	uxtb	r3, r3
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40005400 	.word	0x40005400

08000630 <i2c_addr_r>:

void i2c_addr_r(uint8_t addr)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
    I2C1->DR = addr << 1 | 1;              // Kirim alamat slave dengan bit R (read)
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	f043 0201 	orr.w	r2, r3, #1
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <i2c_addr_r+0x40>)
 8000644:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR)){};  // Tunggu flag ADDR set (lihat NOTE(3))
 8000646:	bf00      	nop
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <i2c_addr_r+0x40>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0f9      	beq.n	8000648 <i2c_addr_r+0x18>

    I2C1->CR1 &= ~0x400;                    // Clear bit ACK
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <i2c_addr_r+0x40>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <i2c_addr_r+0x40>)
 800065a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800065e:	6013      	str	r3, [r2, #0]
    (void)I2C1->SR2;                        // Baca SR2 untuk clear flag ADDR, tanpa menyimpan ke variabel
 8000660:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <i2c_addr_r+0x40>)
 8000662:	699b      	ldr	r3, [r3, #24]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	40005400 	.word	0x40005400

08000674 <i2c_addr_w>:

void i2c_addr_w(uint8_t addr)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
    I2C1->DR = addr << 1;                    // Kirim alamat slave dengan bit W (write)
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <i2c_addr_w+0x30>)
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));     // Tunggu flag ADDR set (lihat NOTE(3))
 8000686:	bf00      	nop
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <i2c_addr_w+0x30>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0f9      	beq.n	8000688 <i2c_addr_w+0x14>

    (void)I2C1->SR2;                         // Baca SR2 untuk clear flag ADDR, tanpa menyimpan ke variabel
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <i2c_addr_w+0x30>)
 8000696:	699b      	ldr	r3, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	40005400 	.word	0x40005400

080006a8 <i2c_stop>:

void i2c_stop(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_STOP;		        // Kirim kondisi STOP
 80006ac:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <i2c_stop+0x2c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a08      	ldr	r2, [pc, #32]	@ (80006d4 <i2c_stop+0x2c>)
 80006b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006b6:	6013      	str	r3, [r2, #0]
	while (I2C1->SR2 & I2C_SR2_BUSY){}	    // Tunggu hingga bus tidak sibuk
 80006b8:	bf00      	nop
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <i2c_stop+0x2c>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1f9      	bne.n	80006ba <i2c_stop+0x12>
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40005400 	.word	0x40005400

080006d8 <i2c_start>:

void i2c_start(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_START;			    // Kirim kondisi START
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <i2c_start+0x2c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <i2c_start+0x2c>)
 80006e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006e6:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB)){};	// Tunggu flag START terkirim (lihat NOTE(3))
 80006e8:	bf00      	nop
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <i2c_start+0x2c>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f9      	beq.n	80006ea <i2c_start+0x12>
}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40005400 	.word	0x40005400

08000708 <bcd2dec>:

// Konversi dari format BCD ke desimal
int bcd2dec(uint8_t b) { return ((b/16)*10 + (b%16)); }
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	091b      	lsrs	r3, r3, #4
 8000716:	b2db      	uxtb	r3, r3
 8000718:	461a      	mov	r2, r3
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	461a      	mov	r2, r3
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	f003 030f 	and.w	r3, r3, #15
 800072a:	4413      	add	r3, r2
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <ds3231_get_time>:
	i2c_stop();
	return bcd2dec(i2c_readbyte(MULTI_BYTE_OFF));
}

void ds3231_get_time(ds3231_data_struct *ds3231_struct)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	i2c_start();
 8000740:	f7ff ffca 	bl	80006d8 <i2c_start>
	i2c_addr_w(SLAVE_ADDR);
 8000744:	2068      	movs	r0, #104	@ 0x68
 8000746:	f7ff ff95 	bl	8000674 <i2c_addr_w>
	i2c_writebyte(0);	                // Set pointer ke register waktu awal
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff ff28 	bl	80005a0 <i2c_writebyte>
	i2c_start();
 8000750:	f7ff ffc2 	bl	80006d8 <i2c_start>
	i2c_addr_r(SLAVE_ADDR);
 8000754:	2068      	movs	r0, #104	@ 0x68
 8000756:	f7ff ff6b 	bl	8000630 <i2c_addr_r>
	ds3231_struct->seconds = bcd2dec(i2c_readbyte(MULTI_BYTE_ON)); // Baca detik
 800075a:	2001      	movs	r0, #1
 800075c:	f7ff ff40 	bl	80005e0 <i2c_readbyte>
 8000760:	4603      	mov	r3, r0
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ffd0 	bl	8000708 <bcd2dec>
 8000768:	4603      	mov	r3, r0
 800076a:	b2da      	uxtb	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	701a      	strb	r2, [r3, #0]
	ds3231_struct->minutes = bcd2dec(i2c_readbyte(MULTI_BYTE_ON)); // Baca menit
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff ff35 	bl	80005e0 <i2c_readbyte>
 8000776:	4603      	mov	r3, r0
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ffc5 	bl	8000708 <bcd2dec>
 800077e:	4603      	mov	r3, r0
 8000780:	b2da      	uxtb	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	705a      	strb	r2, [r3, #1]
	ds3231_struct->hours = bcd2dec(i2c_readbyte(MULTI_BYTE_OFF));  // Baca jam
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff ff2a 	bl	80005e0 <i2c_readbyte>
 800078c:	4603      	mov	r3, r0
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ffba 	bl	8000708 <bcd2dec>
 8000794:	4603      	mov	r3, r0
 8000796:	b2da      	uxtb	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	709a      	strb	r2, [r3, #2]
	i2c_stop();	
 800079c:	f7ff ff84 	bl	80006a8 <i2c_stop>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4a07      	ldr	r2, [pc, #28]	@ (80007d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80007b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4a06      	ldr	r2, [pc, #24]	@ (80007d8 <vApplicationGetIdleTaskMemory+0x30>)
 80007be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000088 	.word	0x20000088
 80007d8:	20000128 	.word	0x20000128

080007dc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af02      	add	r7, sp, #8
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	f023 030f 	bic.w	r3, r3, #15
 80007ec:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	f043 030c 	orr.w	r3, r3, #12
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	b2db      	uxtb	r3, r3
 8000806:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000808:	7bbb      	ldrb	r3, [r7, #14]
 800080a:	f043 030c 	orr.w	r3, r3, #12
 800080e:	b2db      	uxtb	r3, r3
 8000810:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	b2db      	uxtb	r3, r3
 800081a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800081c:	f107 0208 	add.w	r2, r7, #8
 8000820:	2364      	movs	r3, #100	@ 0x64
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2304      	movs	r3, #4
 8000826:	214e      	movs	r1, #78	@ 0x4e
 8000828:	4803      	ldr	r0, [pc, #12]	@ (8000838 <lcd_send_cmd+0x5c>)
 800082a:	f002 f805 	bl	8002838 <HAL_I2C_Master_Transmit>
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200003d8 	.word	0x200003d8

0800083c <lcd_send_data>:

void lcd_send_data (char data)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af02      	add	r7, sp, #8
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f023 030f 	bic.w	r3, r3, #15
 800084c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	011b      	lsls	r3, r3, #4
 8000852:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	f043 030d 	orr.w	r3, r3, #13
 800085a:	b2db      	uxtb	r3, r3
 800085c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	f043 0309 	orr.w	r3, r3, #9
 8000864:	b2db      	uxtb	r3, r3
 8000866:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	f043 030d 	orr.w	r3, r3, #13
 800086e:	b2db      	uxtb	r3, r3
 8000870:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000872:	7bbb      	ldrb	r3, [r7, #14]
 8000874:	f043 0309 	orr.w	r3, r3, #9
 8000878:	b2db      	uxtb	r3, r3
 800087a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800087c:	f107 0208 	add.w	r2, r7, #8
 8000880:	2364      	movs	r3, #100	@ 0x64
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2304      	movs	r3, #4
 8000886:	214e      	movs	r1, #78	@ 0x4e
 8000888:	4803      	ldr	r0, [pc, #12]	@ (8000898 <lcd_send_data+0x5c>)
 800088a:	f001 ffd5 	bl	8002838 <HAL_I2C_Master_Transmit>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200003d8 	.word	0x200003d8

0800089c <lcd_clear>:

void lcd_clear (void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80008a2:	2080      	movs	r0, #128	@ 0x80
 80008a4:	f7ff ff9a 	bl	80007dc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	e005      	b.n	80008ba <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80008ae:	2020      	movs	r0, #32
 80008b0:	f7ff ffc4 	bl	800083c <lcd_send_data>
	for (int i=0; i<70; i++)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3301      	adds	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b45      	cmp	r3, #69	@ 0x45
 80008be:	ddf6      	ble.n	80008ae <lcd_clear+0x12>
	}
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	6039      	str	r1, [r7, #0]
    switch (row)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d003      	beq.n	80008e2 <lcd_put_cur+0x18>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d005      	beq.n	80008ec <lcd_put_cur+0x22>
 80008e0:	e009      	b.n	80008f6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	603b      	str	r3, [r7, #0]
            break;
 80008ea:	e004      	b.n	80008f6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80008f2:	603b      	str	r3, [r7, #0]
            break;
 80008f4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff6e 	bl	80007dc <lcd_send_cmd>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <lcd_send_string>:
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}

void lcd_send_string (char *str)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000910:	e006      	b.n	8000920 <lcd_send_string+0x18>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	1c5a      	adds	r2, r3, #1
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff8e 	bl	800083c <lcd_send_data>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1f4      	bne.n	8000912 <lcd_send_string+0xa>
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b5b0      	push	{r4, r5, r7, lr}
 8000936:	b09c      	sub	sp, #112	@ 0x70
 8000938:	af00      	add	r7, sp, #0
	  /* USER CODE END 1 */

	  /* MCU Configuration--------------------------------------------------------*/

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init(); // SEI CERT C: MEM34-C — Hanya membebaskan memori yang dialokasikan secara dinamis. Ini adalah inisialisasi untuk semua perangkat keras, termasuk pembebasan memori jika diperlukan.
 800093a:	f000 fe0b 	bl	8001554 <HAL_Init>

	  /* USER CODE BEGIN Init */
	  /* USER CODE END Init */

	  /* Configure the system clock */
	  SystemClock_Config(); // SEI CERT C: EXP35-C — Jangan mengubah objek dengan umur sementara. Fungsi ini mengonfigurasi sistem clock, yang penting untuk kestabilan perangkat keras.
 800093e:	f000 f869 	bl	8000a14 <SystemClock_Config>

	  /* USER CODE BEGIN SysInit */
	  /* USER CODE END SysInit */

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init(); // SEI CERT C: DCL31-C — Identifier harus dideklarasikan sebelum digunakan. Menginisialisasi GPIO (General Purpose Input Output) yang dibutuhkan.
 8000942:	f000 f9a3 	bl	8000c8c <MX_GPIO_Init>
	  MX_DMA_Init();  // SEI CERT C: DCL31-C — Identifier harus dideklarasikan sebelum digunakan. Menginisialisasi DMA (Direct Memory Access) untuk efisiensi transfer data.
 8000946:	f000 f981 	bl	8000c4c <MX_DMA_Init>
	  MX_USART2_UART_Init(); // SEI CERT C: DCL31-C — Identifier harus dideklarasikan sebelum digunakan. Inisialisasi UART untuk komunikasi serial.
 800094a:	f000 f955 	bl	8000bf8 <MX_USART2_UART_Init>
	  MX_ADC1_Init(); // SEI CERT C: DCL31-C — Identifier harus dideklarasikan sebelum digunakan. Inisialisasi ADC (Analog-to-Digital Converter) untuk pembacaan data analog.
 800094e:	f000 f8d3 	bl	8000af8 <MX_ADC1_Init>
	  MX_I2C1_Init(); // SEI CERT C: DCL31-C — Identifier harus dideklarasikan sebelum digunakan. Menginisialisasi I2C (Inter-Integrated Circuit) untuk komunikasi data.
 8000952:	f000 f923 	bl	8000b9c <MX_I2C1_Init>
	  /* add queues, ... */ // SEI CERT C: CON34-C — Menambahkan antrian untuk pengelolaan komunikasi antar thread yang aman.
	  /* USER CODE END RTOS_QUEUES */

	  /* Create the thread(s) */
	  /* definition and creation of Tugas1 */
	  osThreadDef(Tugas1, Pertama, osPriorityNormal, 0, 128);  // SEI CERT C: CON34-C — Menggunakan penjadwalan thread dengan prioritas yang sesuai untuk alokasi waktu prosesor.
 8000956:	4b27      	ldr	r3, [pc, #156]	@ (80009f4 <main+0xc0>)
 8000958:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800095c:	461d      	mov	r5, r3
 800095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000962:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000966:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  Tugas1Handle = osThreadCreate(osThread(Tugas1), NULL); // SEI CERT C: CON34-C — Penggunaan thread untuk operasi yang dijadwalkan dengan baik.
 800096a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f003 feaa 	bl	80046ca <osThreadCreate>
 8000976:	4603      	mov	r3, r0
 8000978:	4a1f      	ldr	r2, [pc, #124]	@ (80009f8 <main+0xc4>)
 800097a:	6013      	str	r3, [r2, #0]

	  /* definition and creation of Tugas2 */
	  osThreadDef(Tugas2, Kedua, osPriorityIdle, 0, 128);  // SEI CERT C: CON34-C — Penggunaan thread dengan prioritas rendah untuk operasi latar belakang.
 800097c:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <main+0xc8>)
 800097e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000982:	461d      	mov	r5, r3
 8000984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000988:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800098c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  Tugas2Handle = osThreadCreate(osThread(Tugas2), NULL); // SEI CERT C: CON34-C — Membuat thread kedua untuk manajemen pompa otomatis.
 8000990:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f003 fe97 	bl	80046ca <osThreadCreate>
 800099c:	4603      	mov	r3, r0
 800099e:	4a18      	ldr	r2, [pc, #96]	@ (8000a00 <main+0xcc>)
 80009a0:	6013      	str	r3, [r2, #0]

	  /* definition and creation of Tugas3 */
	  osThreadDef(Tugas3, Ketiga, osPriorityIdle, 0, 128);  // SEI CERT C: CON34-C — Menjadwalkan thread untuk operasi dengan prioritas rendah.
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <main+0xd0>)
 80009a4:	f107 041c 	add.w	r4, r7, #28
 80009a8:	461d      	mov	r5, r3
 80009aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  Tugas3Handle = osThreadCreate(osThread(Tugas3), NULL); // SEI CERT C: CON34-C — Thread ketiga untuk pembaruan LCD.
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 fe84 	bl	80046ca <osThreadCreate>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a10      	ldr	r2, [pc, #64]	@ (8000a08 <main+0xd4>)
 80009c6:	6013      	str	r3, [r2, #0]

	  /* definition and creation of Tugas4 */
	  osThreadDef(Tugas4, Keempat, osPriorityIdle, 0, 128);  // SEI CERT C: CON34-C — Membuat thread untuk countdown pompa.
 80009c8:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <main+0xd8>)
 80009ca:	463c      	mov	r4, r7
 80009cc:	461d      	mov	r5, r3
 80009ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  Tugas4Handle = osThreadCreate(osThread(Tugas4), NULL); // SEI CERT C: CON34-C — Menggunakan thread keempat untuk countdown dan pengelolaan status pompa.
 80009da:	463b      	mov	r3, r7
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 fe73 	bl	80046ca <osThreadCreate>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <main+0xdc>)
 80009e8:	6013      	str	r3, [r2, #0]
	  /* USER CODE BEGIN RTOS_THREADS */
	  /* add threads, ... */
	  /* USER CODE END RTOS_THREADS */

	  /* Start scheduler */
	  osKernelStart();  // SEI CERT C: CON34-C — Memulai kernel RTOS, mengelola scheduler untuk pengelolaan thread secara efektif.
 80009ea:	f003 fe67 	bl	80046bc <osKernelStart>

	  /* We should never get here as control is now taken by the scheduler */

	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1)  // SEI CERT C: CON34-C — Thread utama yang tetap berjalan tanpa henti setelah scheduler dimulai.
 80009ee:	bf00      	nop
 80009f0:	e7fd      	b.n	80009ee <main+0xba>
 80009f2:	bf00      	nop
 80009f4:	08006e7c 	.word	0x08006e7c
 80009f8:	20000474 	.word	0x20000474
 80009fc:	08006ea0 	.word	0x08006ea0
 8000a00:	20000478 	.word	0x20000478
 8000a04:	08006ec4 	.word	0x08006ec4
 8000a08:	2000047c 	.word	0x2000047c
 8000a0c:	08006ee8 	.word	0x08006ee8
 8000a10:	20000480 	.word	0x20000480

08000a14 <SystemClock_Config>:
	/**
	  * @brief System Clock Configuration
	  * @retval None
	  */
	void SystemClock_Config(void)
	{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b094      	sub	sp, #80	@ 0x50
 8000a18:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2234      	movs	r2, #52	@ 0x34
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f005 f9f5 	bl	8005e12 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();  // SEI CERT C: MEM34-C — Mengonfigurasi regulator internal yang aman untuk sistem daya yang lebih stabil.
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000af0 <SystemClock_Config+0xdc>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a40:	4a2b      	ldr	r2, [pc, #172]	@ (8000af0 <SystemClock_Config+0xdc>)
 8000a42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a48:	4b29      	ldr	r3, [pc, #164]	@ (8000af0 <SystemClock_Config+0xdc>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a54:	2300      	movs	r3, #0
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4b26      	ldr	r3, [pc, #152]	@ (8000af4 <SystemClock_Config+0xe0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a25      	ldr	r2, [pc, #148]	@ (8000af4 <SystemClock_Config+0xe0>)
 8000a5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	4b23      	ldr	r3, [pc, #140]	@ (8000af4 <SystemClock_Config+0xe0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a78:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	637b      	str	r3, [r7, #52]	@ 0x34
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a82:	63bb      	str	r3, [r7, #56]	@ 0x38
	  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a84:	2304      	movs	r3, #4
 8000a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  RCC_OscInitStruct.PLL.PLLN = 180;
 8000a88:	23b4      	movs	r3, #180	@ 0xb4
 8000a8a:	643b      	str	r3, [r7, #64]	@ 0x40
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	647b      	str	r3, [r7, #68]	@ 0x44
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	64bb      	str	r3, [r7, #72]	@ 0x48
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)  // SEI CERT C: ERR30-C — Jika konfigurasi gagal, proses harus menghentikan eksekusi atau menangani kesalahan.
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fdf1 	bl	8003684 <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x98>
	  {
	    Error_Handler();  // SEI CERT C: ERR33-C — Menangani kesalahan dengan cara yang sesuai dengan protokol.
 8000aa8:	f000 fa8d 	bl	8000fc6 <Error_Handler>
	  }
	  /** Activate the Over-Drive mode
	    */
	    if (HAL_PWREx_EnableOverDrive() != HAL_OK)  // SEI CERT C: ERR30-C — Setel errno ke nol sebelum memanggil fungsi pustaka yang diketahui akan mengatur errno, dan periksa errno hanya setelah fungsi mengembalikan nilai yang menunjukkan kegagalan. Dalam hal ini, jika overdrive mode gagal diaktifkan, fungsi `Error_Handler()` dipanggil.
 8000aac:	f002 fa1e 	bl	8002eec <HAL_PWREx_EnableOverDrive>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xa6>
	    {
	      Error_Handler();  // SEI CERT C: ERR33-C — Penanganan kesalahan dengan cara yang tepat saat kegagalan terjadi, menghindari sistem melanjutkan dengan konfigurasi yang tidak valid.
 8000ab6:	f000 fa86 	bl	8000fc6 <Error_Handler>
	    }

	    /** Initializes the CPU, AHB and APB buses clocks
	    */
	    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aba:	230f      	movs	r3, #15
 8000abc:	60bb      	str	r3, [r7, #8]
	                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;  // SEI CERT C: EXP30-C — Tidak bergantung pada urutan evaluasi untuk efek samping. Menginisialisasi jenis clock yang diperlukan.
	    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  // SEI CERT C: EXP30-C — Mengonfigurasi sumber clock sistem (dari PLL).
 8000abe:	2302      	movs	r3, #2
 8000ac0:	60fb      	str	r3, [r7, #12]
	    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;  // SEI CERT C: EXP30-C — Mengatur pembagi clock AHB.
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
	    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  // SEI CERT C: EXP30-C — Mengatur pembagi clock APB1.
 8000ac6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aca:	617b      	str	r3, [r7, #20]
	    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  // SEI CERT C: EXP30-C — Mengatur pembagi clock APB2.
 8000acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad0:	61bb      	str	r3, [r7, #24]

	    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)  // SEI CERT C: ERR30-C — Jika konfigurasi gagal, proses harus dihentikan atau kesalahan harus ditangani.
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2105      	movs	r1, #5
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 fa57 	bl	8002f8c <HAL_RCC_ClockConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0xd4>
	    {
	      Error_Handler();  // SEI CERT C: ERR33-C — Menangani kesalahan jika konfigurasi clock gagal.
 8000ae4:	f000 fa6f 	bl	8000fc6 <Error_Handler>
	    }
	  }
 8000ae8:	bf00      	nop
 8000aea:	3750      	adds	r7, #80	@ 0x50
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40007000 	.word	0x40007000

08000af8 <MX_ADC1_Init>:
	    * @brief ADC1 Initialization Function
	    * @param None
	    * @retval None
	    */
	  static void MX_ADC1_Init(void)
	  {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

	    /* USER CODE BEGIN ADC1_Init 0 */

	    /* USER CODE END ADC1_Init 0 */

	    ADC_ChannelConfTypeDef sConfig = {0};
 8000afe:	463b      	mov	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]

	    /* USER CODE END ADC1_Init 1 */

	    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	    */
	    hadc1.Instance = ADC1;  // SEI CERT C: DCL31-C — Identifier harus dideklarasikan sebelum digunakan. Menetapkan instance ADC1.
 8000b0a:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b0c:	4a21      	ldr	r2, [pc, #132]	@ (8000b94 <MX_ADC1_Init+0x9c>)
 8000b0e:	601a      	str	r2, [r3, #0]
	    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;  // SEI CERT C: EXP30-C — Tidak bergantung pada urutan evaluasi untuk efek samping. Menetapkan prescaler clock untuk ADC.
 8000b10:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b16:	605a      	str	r2, [r3, #4]
	    hadc1.Init.Resolution = ADC_RESOLUTION_12B;  // SEI CERT C: EXP30-C — Menetapkan resolusi ADC menjadi 12 bit untuk akurasi yang lebih tinggi.
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
	    hadc1.Init.ScanConvMode = DISABLE;  // SEI CERT C: EXP30-C — Menonaktifkan mode konversi pemindaian karena hanya satu saluran ADC yang digunakan.
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
	    hadc1.Init.ContinuousConvMode = DISABLE;  // SEI CERT C: EXP30-C — Mode konversi kontinu dimatikan, hanya konversi satu kali.
 8000b24:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	761a      	strb	r2, [r3, #24]
	    hadc1.Init.DiscontinuousConvMode = DISABLE;  // SEI CERT C: EXP30-C — Mode konversi terputus dimatikan.
 8000b2a:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]
	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;  // SEI CERT C: EXP30-C — Tidak ada pemicu eksternal untuk konversi ADC.
 8000b32:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
	    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;  // SEI CERT C: EXP30-C — Konversi ADC dimulai dengan perintah perangkat lunak.
 8000b38:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b3a:	4a17      	ldr	r2, [pc, #92]	@ (8000b98 <MX_ADC1_Init+0xa0>)
 8000b3c:	629a      	str	r2, [r3, #40]	@ 0x28
	    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;  // SEI CERT C: EXP30-C — Menyelaraskan data hasil konversi ke kanan.
 8000b3e:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
	    hadc1.Init.NbrOfConversion = 1;  // SEI CERT C: EXP30-C — Hanya satu konversi yang diperlukan.
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	61da      	str	r2, [r3, #28]
	    hadc1.Init.DMAContinuousRequests = DISABLE;  // SEI CERT C: EXP30-C — Menonaktifkan permintaan DMA secara kontinu.
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;  // SEI CERT C: EXP30-C — Mengonfigurasi pemilihan akhir konversi untuk mode satu konversi.
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	615a      	str	r2, [r3, #20]

	    if (HAL_ADC_Init(&hadc1) != HAL_OK)  // SEI CERT C: ERR30-C — Menangani kesalahan jika inisialisasi ADC gagal.
 8000b58:	480d      	ldr	r0, [pc, #52]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b5a:	f000 fd3d 	bl	80015d8 <HAL_ADC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ADC1_Init+0x70>
	    {
	      Error_Handler();  // SEI CERT C: ERR33-C — Menangani kesalahan jika inisialisasi ADC gagal.
 8000b64:	f000 fa2f 	bl	8000fc6 <Error_Handler>
	    }

	    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	    */
	    sConfig.Channel = ADC_CHANNEL_0;  // SEI CERT C: DCL31-C — Identifier harus dideklarasikan sebelum digunakan. Menetapkan saluran ADC yang akan digunakan.
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
	    sConfig.Rank = 1;  // SEI CERT C: DCL31-C — Menetapkan peringkat saluran ADC dalam urutan konversi.
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
	    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;  // SEI CERT C: EXP30-C — Menetapkan waktu sampling untuk saluran ADC.
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
	    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)  // SEI CERT C: ERR30-C — Menangani kesalahan jika konfigurasi saluran ADC gagal.
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_ADC1_Init+0x98>)
 8000b7a:	f000 fd71 	bl	8001660 <HAL_ADC_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC1_Init+0x90>
	    {
	      Error_Handler();  // SEI CERT C: ERR33-C — Menangani kesalahan jika konfigurasi saluran gagal.
 8000b84:	f000 fa1f 	bl	8000fc6 <Error_Handler>

	    /* USER CODE BEGIN ADC1_Init 2 */

	    /* USER CODE END ADC1_Init 2 */

	  }
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000330 	.word	0x20000330
 8000b94:	40012000 	.word	0x40012000
 8000b98:	0f000001 	.word	0x0f000001

08000b9c <MX_I2C1_Init>:
	    * @brief I2C1 Initialization Function
	    * @param None
	    * @retval None
	    */
	  static void MX_I2C1_Init(void)
	  {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	    /* USER CODE END I2C1_Init 0 */

	    /* USER CODE BEGIN I2C1_Init 1 */

	    /* USER CODE END I2C1_Init 1 */
	    hi2c1.Instance = I2C1;  // SEI CERT C: DCL31-C — Identifier harus dideklarasikan sebelum digunakan. Inisialisasi instance I2C1.
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <MX_I2C1_Init+0x50>)
 8000ba2:	4a13      	ldr	r2, [pc, #76]	@ (8000bf0 <MX_I2C1_Init+0x54>)
 8000ba4:	601a      	str	r2, [r3, #0]
	    hi2c1.Init.ClockSpeed = 400000;  // SEI CERT C: EXP30-C — Mengatur kecepatan clock untuk I2C sesuai kebutuhan aplikasi.
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_I2C1_Init+0x50>)
 8000ba8:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <MX_I2C1_Init+0x58>)
 8000baa:	605a      	str	r2, [r3, #4]
	    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;  // SEI CERT C: EXP30-C — Menetapkan siklus tugas untuk I2C, memastikan pengoperasian yang efisien.
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_I2C1_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
	    hi2c1.Init.OwnAddress1 = 0;  // SEI CERT C: DCL31-C — Mengatur alamat perangkat I2C pertama.
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_I2C1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
	    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;  // SEI CERT C: EXP30-C — Menetapkan mode pengalamatan 7-bit untuk I2C.
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_I2C1_Init+0x50>)
 8000bba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bbe:	611a      	str	r2, [r3, #16]
	    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;  // SEI CERT C: EXP30-C — Nonaktifkan mode dual-address untuk pengaturan I2C.
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <MX_I2C1_Init+0x50>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
	    hi2c1.Init.OwnAddress2 = 0;  // SEI CERT C: DCL31-C — Mengatur alamat kedua (jika digunakan) pada perangkat I2C.
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_I2C1_Init+0x50>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
	    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;  // SEI CERT C: EXP30-C — Nonaktifkan mode panggilan umum untuk I2C.
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <MX_I2C1_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
	    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;  // SEI CERT C: EXP30-C — Nonaktifkan mode tanpa penundaan (no-stretching) pada I2C.
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_I2C1_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]

	    if (HAL_I2C_Init(&hi2c1) != HAL_OK)  // SEI CERT C: ERR30-C — Menangani kesalahan jika inisialisasi I2C gagal.
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <MX_I2C1_Init+0x50>)
 8000bda:	f001 fce9 	bl	80025b0 <HAL_I2C_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_I2C1_Init+0x4c>
	    {
	      Error_Handler();  // SEI CERT C: ERR33-C — Memanggil fungsi penanganan kesalahan jika inisialisasi gagal.
 8000be4:	f000 f9ef 	bl	8000fc6 <Error_Handler>
	    }
	    /* USER CODE BEGIN I2C1_Init 2 */

	    /* USER CODE END I2C1_Init 2 */

	  }
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200003d8 	.word	0x200003d8
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	00061a80 	.word	0x00061a80

08000bf8 <MX_USART2_UART_Init>:
	    * @brief USART2 Initialization Function
	    * @param None
	    * @retval None
	    */
	  static void MX_USART2_UART_Init(void)
	  {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	    /* USER CODE END USART2_Init 0 */

	    /* USER CODE BEGIN USART2_Init 1 */

	    /* USER CODE END USART2_Init 1 */
	    huart2.Instance = USART2;  // SEI CERT C: DCL31-C — Identifier harus dideklarasikan sebelum digunakan. Menetapkan instance USART2 untuk komunikasi serial.
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	@ (8000c48 <MX_USART2_UART_Init+0x50>)
 8000c00:	601a      	str	r2, [r3, #0]
	    huart2.Init.BaudRate = 115200;  // SEI CERT C: EXP30-C — Mengatur kecepatan baud untuk komunikasi UART.
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
	    huart2.Init.WordLength = UART_WORDLENGTH_8B;  // SEI CERT C: EXP30-C — Mengatur panjang kata data UART menjadi 8 bit.
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
	    huart2.Init.StopBits = UART_STOPBITS_1;  // SEI CERT C: EXP30-C — Menetapkan satu bit stop untuk komunikasi UART.
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
	    huart2.Init.Parity = UART_PARITY_NONE;  // SEI CERT C: EXP30-C — Menonaktifkan pemeriksaan paritas untuk komunikasi UART.
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
	    huart2.Init.Mode = UART_MODE_TX_RX;  // SEI CERT C: EXP30-C — Mengaktifkan mode pengiriman dan penerimaan UART.
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
	    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;  // SEI CERT C: EXP30-C — Menonaktifkan kontrol aliran perangkat keras untuk UART.
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
	    huart2.Init.OverSampling = UART_OVERSAMPLING_16;  // SEI CERT C: EXP30-C — Mengaktifkan oversampling untuk komunikasi UART.
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]

	    if (HAL_UART_Init(&huart2) != HAL_OK)  // SEI CERT C: ERR30-C — Menangani kesalahan jika inisialisasi UART gagal.
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c30:	f003 fa68 	bl	8004104 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART2_UART_Init+0x46>
	    {
	      Error_Handler();  // SEI CERT C: ERR33-C — Memanggil fungsi penanganan kesalahan jika inisialisasi gagal.
 8000c3a:	f000 f9c4 	bl	8000fc6 <Error_Handler>
	    }
	    /* USER CODE BEGIN USART2_Init 2 */

	    /* USER CODE END USART2_Init 2 */

	  }
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000042c 	.word	0x2000042c
 8000c48:	40004400 	.word	0x40004400

08000c4c <MX_DMA_Init>:

	  /**
	    * Enable DMA controller clock
	    */
	  static void MX_DMA_Init(void)
	  {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

	    /* DMA controller clock enable */
	    __HAL_RCC_DMA2_CLK_ENABLE();  // SEI CERT C: MEM34-C — Mengaktifkan clock DMA2 untuk pengelolaan transfer data.
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_DMA_Init+0x3c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c88 <MX_DMA_Init+0x3c>)
 8000c5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_DMA_Init+0x3c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

	    /* DMA interrupt init */
	    /* DMA2_Stream0_IRQn interrupt configuration */
	    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);  // SEI CERT C: CON34-C — Mengonfigurasi prioritas interrupt DMA untuk memastikan pengelolaan interrupt yang efisien.
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2105      	movs	r1, #5
 8000c72:	2038      	movs	r0, #56	@ 0x38
 8000c74:	f000 ffda 	bl	8001c2c <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);  // SEI CERT C: CON34-C — Mengaktifkan interrupt DMA untuk pemrosesan data.
 8000c78:	2038      	movs	r0, #56	@ 0x38
 8000c7a:	f000 fff3 	bl	8001c64 <HAL_NVIC_EnableIRQ>

	  }
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <MX_GPIO_Init>:
	    * @brief GPIO Initialization Function
	    * @param None
	    * @retval None
	    */
	  static void MX_GPIO_Init(void)
	  {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0
	    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
	    /* USER CODE BEGIN MX_GPIO_Init_1 */
	    /* USER CODE END MX_GPIO_Init_1 */

	    /* GPIO Ports Clock Enable */
	    __HAL_RCC_GPIOC_CLK_ENABLE();  // SEI CERT C: MEM34-C — Mengaktifkan clock untuk port GPIOC untuk memastikan port dapat digunakan.
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b37      	ldr	r3, [pc, #220]	@ (8000d84 <MX_GPIO_Init+0xf8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a36      	ldr	r2, [pc, #216]	@ (8000d84 <MX_GPIO_Init+0xf8>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b34      	ldr	r3, [pc, #208]	@ (8000d84 <MX_GPIO_Init+0xf8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
	    __HAL_RCC_GPIOH_CLK_ENABLE();  // SEI CERT C: MEM34-C — Mengaktifkan clock untuk port GPIOH.
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b30      	ldr	r3, [pc, #192]	@ (8000d84 <MX_GPIO_Init+0xf8>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8000d84 <MX_GPIO_Init+0xf8>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b2d      	ldr	r3, [pc, #180]	@ (8000d84 <MX_GPIO_Init+0xf8>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOA_CLK_ENABLE();  // SEI CERT C: MEM34-C — Mengaktifkan clock untuk port GPIOA.
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b29      	ldr	r3, [pc, #164]	@ (8000d84 <MX_GPIO_Init+0xf8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a28      	ldr	r2, [pc, #160]	@ (8000d84 <MX_GPIO_Init+0xf8>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <MX_GPIO_Init+0xf8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
	    __HAL_RCC_GPIOB_CLK_ENABLE();  // SEI CERT C: MEM34-C — Mengaktifkan clock untuk port GPIOB.
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b22      	ldr	r3, [pc, #136]	@ (8000d84 <MX_GPIO_Init+0xf8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a21      	ldr	r2, [pc, #132]	@ (8000d84 <MX_GPIO_Init+0xf8>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <MX_GPIO_Init+0xf8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

	    /*Configure GPIO pin Output Level */
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);  // SEI CERT C: EXP30-C — Menulis level output pin GPIO untuk mengatur status LED (off).
 8000d12:	2200      	movs	r2, #0
 8000d14:	2120      	movs	r1, #32
 8000d16:	481c      	ldr	r0, [pc, #112]	@ (8000d88 <MX_GPIO_Init+0xfc>)
 8000d18:	f001 fc30 	bl	800257c <HAL_GPIO_WritePin>

	    /*Configure GPIO pin Output Level */
	    HAL_GPIO_WritePin(GPIOB, RELAY_PUMP_Pin|GPIO_PIN_5, GPIO_PIN_RESET);  // SEI CERT C: EXP30-C — Menulis level output pin GPIO untuk mengatur status relay pompa (off).
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2130      	movs	r1, #48	@ 0x30
 8000d20:	481a      	ldr	r0, [pc, #104]	@ (8000d8c <MX_GPIO_Init+0x100>)
 8000d22:	f001 fc2b 	bl	800257c <HAL_GPIO_WritePin>

	    /*Configure GPIO pin : B1_Pin */
	    GPIO_InitStruct.Pin = B1_Pin;  // SEI CERT C: DCL31-C — Menetapkan pin B1 untuk input eksternal.
 8000d26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d2a:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // SEI CERT C: EXP30-C — Mengonfigurasi pin B1 sebagai input dengan interrupt pada sisi jatuh (falling edge).
 8000d2c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d30:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;  // SEI CERT C: EXP30-C — Menonaktifkan pull-up/pull-down pada pin B1.
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);  // SEI CERT C: DCL31-C — Inisialisasi pin GPIO dengan pengaturan yang ditetapkan.
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4814      	ldr	r0, [pc, #80]	@ (8000d90 <MX_GPIO_Init+0x104>)
 8000d3e:	f001 fa89 	bl	8002254 <HAL_GPIO_Init>

	    /*Configure GPIO pin : LD2_Pin */
	    GPIO_InitStruct.Pin = LD2_Pin;  // SEI CERT C: DCL31-C — Mengonfigurasi pin LD2 untuk output.
 8000d42:	2320      	movs	r3, #32
 8000d44:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // SEI CERT C: EXP30-C — Mengonfigurasi pin LD2 sebagai output push-pull.
 8000d46:	2301      	movs	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;  // SEI CERT C: EXP30-C — Menonaktifkan pull-up/pull-down pada pin LD2.
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  // SEI CERT C: EXP30-C — Menetapkan kecepatan rendah untuk pin LD2.
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
	    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);  // SEI CERT C: DCL31-C — Inisialisasi pin GPIO LD2.
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	480b      	ldr	r0, [pc, #44]	@ (8000d88 <MX_GPIO_Init+0xfc>)
 8000d5a:	f001 fa7b 	bl	8002254 <HAL_GPIO_Init>

	    /*Configure GPIO pins : RELAY_PUMP_Pin PB5 */
	    GPIO_InitStruct.Pin = RELAY_PUMP_Pin|GPIO_PIN_5;  // SEI CERT C: DCL31-C — Menetapkan pin untuk relay pompa dan pin GPIO lainnya.
 8000d5e:	2330      	movs	r3, #48	@ 0x30
 8000d60:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // SEI CERT C: EXP30-C — Mengonfigurasi pin sebagai output push-pull.
 8000d62:	2301      	movs	r3, #1
 8000d64:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;  // SEI CERT C: EXP30-C — Menonaktifkan pull-up/pull-down pada pin GPIO.
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  // SEI CERT C: EXP30-C — Menetapkan kecepatan rendah untuk pin GPIO.
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);  // SEI CERT C: DCL31-C — Inisialisasi pin GPIO untuk relay pompa.
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_GPIO_Init+0x100>)
 8000d76:	f001 fa6d 	bl	8002254 <HAL_GPIO_Init>

	    /* USER CODE BEGIN MX_GPIO_Init_2 */
	    /* USER CODE END MX_GPIO_Init_2 */
	    }
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	@ 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40020800 	.word	0x40020800

08000d94 <Pertama>:
	      * @param  argument: Not used
	      * @retval None
	      */
	    /* USER CODE END Header_Pertama */
	    void Pertama(void const * argument)
	    {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	      /* USER CODE BEGIN 5 */
	      /* Infinite loop */
	      for(;;)  // SEI CERT C: CON34-C — Gunakan pengendalian alur yang jelas dalam loop tak terbatas untuk menghindari kebingungannya alur eksekusi. Ini adalah thread yang memproses waktu setiap detik.
	      {
	        ds3231_get_time(&currentTime);  // Membaca waktu RTC
 8000d9c:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <Pertama+0x1c>)
 8000d9e:	f7ff fccb 	bl	8000738 <ds3231_get_time>
	        osDelay(1000);  // SEI CERT C: CON34-C — Menggunakan penjadwalan thread dengan delay yang sesuai agar sistem tidak terkunci dalam operasi panjang tanpa respons.
 8000da2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000da6:	f003 fcdc 	bl	8004762 <osDelay>
	        ds3231_get_time(&currentTime);  // Membaca waktu RTC
 8000daa:	bf00      	nop
 8000dac:	e7f6      	b.n	8000d9c <Pertama+0x8>
 8000dae:	bf00      	nop
 8000db0:	20000328 	.word	0x20000328

08000db4 <Kedua>:
	    * @param argument: Not used
	    * @retval None
	    */
	    /* USER CODE END Header_Kedua */
	    void Kedua(void const * argument)
	    {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	      /* USER CODE BEGIN Kedua */
	      /* Infinite loop */
	      for(;;)  // SEI CERT C: CON34-C — Menggunakan loop tak terbatas untuk memeriksa waktu dan mengontrol status pompa.
	      {
	        // Cek waktu untuk menyalakan/mematikan pompa secara otomatis
	        if ((currentTime.hours == 6 && currentTime.minutes < 30) ||
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000e74 <Kedua+0xc0>)
 8000dbe:	789b      	ldrb	r3, [r3, #2]
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d103      	bne.n	8000dcc <Kedua+0x18>
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <Kedua+0xc0>)
 8000dc6:	785b      	ldrb	r3, [r3, #1]
 8000dc8:	2b1d      	cmp	r3, #29
 8000dca:	d907      	bls.n	8000ddc <Kedua+0x28>
	            (currentTime.hours == 16 && currentTime.minutes < 30))  // SEI CERT C: EXP30-C — Menggunakan perbandingan waktu dengan akurat.
 8000dcc:	4b29      	ldr	r3, [pc, #164]	@ (8000e74 <Kedua+0xc0>)
 8000dce:	789b      	ldrb	r3, [r3, #2]
	        if ((currentTime.hours == 6 && currentTime.minutes < 30) ||
 8000dd0:	2b10      	cmp	r3, #16
 8000dd2:	d11f      	bne.n	8000e14 <Kedua+0x60>
	            (currentTime.hours == 16 && currentTime.minutes < 30))  // SEI CERT C: EXP30-C — Menggunakan perbandingan waktu dengan akurat.
 8000dd4:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <Kedua+0xc0>)
 8000dd6:	785b      	ldrb	r3, [r3, #1]
 8000dd8:	2b1d      	cmp	r3, #29
 8000dda:	d81b      	bhi.n	8000e14 <Kedua+0x60>
	        {
	          if (pompaStatus == 0) // Pompa masih mati
 8000ddc:	4b26      	ldr	r3, [pc, #152]	@ (8000e78 <Kedua+0xc4>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d12e      	bne.n	8000e44 <Kedua+0x90>
	          {
	            HAL_GPIO_WritePin(RELAY_PUMP_GPIO_Port, RELAY_PUMP_Pin, GPIO_PIN_SET); // Nyalakan pompa
 8000de6:	2201      	movs	r2, #1
 8000de8:	2110      	movs	r1, #16
 8000dea:	4824      	ldr	r0, [pc, #144]	@ (8000e7c <Kedua+0xc8>)
 8000dec:	f001 fbc6 	bl	800257c <HAL_GPIO_WritePin>
	            pompaStatus = 1;  // SEI CERT C: MEM30-C — Mengubah status pompa dengan tepat untuk menjaga konsistensi status.
 8000df0:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <Kedua+0xc4>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
	            countdown = 60;  // SEI CERT C: MEM30-C — Menetapkan countdown ketika pompa dinyalakan.
 8000df6:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <Kedua+0xcc>)
 8000df8:	223c      	movs	r2, #60	@ 0x3c
 8000dfa:	701a      	strb	r2, [r3, #0]
	            printf("Pompa ON: %02d:%02d:%02d\r\n", currentTime.hours, currentTime.minutes, currentTime.seconds);
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <Kedua+0xc0>)
 8000dfe:	789b      	ldrb	r3, [r3, #2]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <Kedua+0xc0>)
 8000e04:	785b      	ldrb	r3, [r3, #1]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <Kedua+0xc0>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	481d      	ldr	r0, [pc, #116]	@ (8000e84 <Kedua+0xd0>)
 8000e0e:	f004 ff8b 	bl	8005d28 <iprintf>
	          if (pompaStatus == 0) // Pompa masih mati
 8000e12:	e017      	b.n	8000e44 <Kedua+0x90>
	          }
	        }
	        else
	        {
	          if (pompaStatus == 1) // Pompa sedang menyala
 8000e14:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <Kedua+0xc4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d112      	bne.n	8000e44 <Kedua+0x90>
	          {
	            HAL_GPIO_WritePin(RELAY_PUMP_GPIO_Port, RELAY_PUMP_Pin, GPIO_PIN_RESET); // Matikan pompa
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2110      	movs	r1, #16
 8000e22:	4816      	ldr	r0, [pc, #88]	@ (8000e7c <Kedua+0xc8>)
 8000e24:	f001 fbaa 	bl	800257c <HAL_GPIO_WritePin>
	            pompaStatus = 0;  // SEI CERT C: MEM30-C — Mengubah status pompa dengan tepat ketika dimatikan.
 8000e28:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <Kedua+0xc4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
	            printf("Pompa OFF: %02d:%02d:%02d\r\n", currentTime.hours, currentTime.minutes, currentTime.seconds);
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <Kedua+0xc0>)
 8000e30:	789b      	ldrb	r3, [r3, #2]
 8000e32:	4619      	mov	r1, r3
 8000e34:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <Kedua+0xc0>)
 8000e36:	785b      	ldrb	r3, [r3, #1]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <Kedua+0xc0>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4812      	ldr	r0, [pc, #72]	@ (8000e88 <Kedua+0xd4>)
 8000e40:	f004 ff72 	bl	8005d28 <iprintf>
	          }
	        }
	        if (countdown == 0 && pompaStatus == 1) {  // SEI CERT C: EXP33-C — Pastikan untuk memeriksa kondisi valid sebelum menggunakan variabel dalam operasi.
 8000e44:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <Kedua+0xcc>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10c      	bne.n	8000e68 <Kedua+0xb4>
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <Kedua+0xc4>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d107      	bne.n	8000e68 <Kedua+0xb4>
	          HAL_GPIO_WritePin(RELAY_PUMP_GPIO_Port, RELAY_PUMP_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4807      	ldr	r0, [pc, #28]	@ (8000e7c <Kedua+0xc8>)
 8000e5e:	f001 fb8d 	bl	800257c <HAL_GPIO_WritePin>
	          pompaStatus = 0;
 8000e62:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <Kedua+0xc4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
	        }
	        osDelay(1000);  // SEI CERT C: CON34-C — Menggunakan delay untuk interval 1 detik agar sistem tetap responsif.
 8000e68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e6c:	f003 fc79 	bl	8004762 <osDelay>
	        if ((currentTime.hours == 6 && currentTime.minutes < 30) ||
 8000e70:	e7a4      	b.n	8000dbc <Kedua+0x8>
 8000e72:	bf00      	nop
 8000e74:	20000328 	.word	0x20000328
 8000e78:	20000484 	.word	0x20000484
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	20000485 	.word	0x20000485
 8000e84:	08006f04 	.word	0x08006f04
 8000e88:	08006f20 	.word	0x08006f20

08000e8c <Ketiga>:
	    * @param argument: Not used
	    * @retval None
	    */
	    /* USER CODE END Header_Ketiga */
	    void Ketiga(void const * argument)
	    {
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b08b      	sub	sp, #44	@ 0x2c
 8000e90:	af02      	add	r7, sp, #8
 8000e92:	6078      	str	r0, [r7, #4]
	      /* USER CODE BEGIN Ketiga */
	      char buffer[20]; // SEI CERT C: MEM30-C — Pastikan bahwa buffer memiliki ukuran yang cukup untuk menyimpan string yang diproses.
	      for(;;) {
	        lcd_clear();  // SEI CERT C: EXP30-C — Menggunakan fungsi untuk menghapus layar, memastikan tampilan yang konsisten.
 8000e94:	f7ff fd02 	bl	800089c <lcd_clear>
	        lcd_put_cur(0, 0);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fd15 	bl	80008ca <lcd_put_cur>
	        sprintf(buffer, "Time: %02d:%02d:%02d", currentTime.hours, currentTime.minutes, currentTime.seconds);  // SEI CERT C: FIO30-C — Hindari format string dari input yang tidak tepercaya.
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f50 <Ketiga+0xc4>)
 8000ea2:	789b      	ldrb	r3, [r3, #2]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f50 <Ketiga+0xc4>)
 8000ea8:	785b      	ldrb	r3, [r3, #1]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4b28      	ldr	r3, [pc, #160]	@ (8000f50 <Ketiga+0xc4>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	f107 000c 	add.w	r0, r7, #12
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4926      	ldr	r1, [pc, #152]	@ (8000f54 <Ketiga+0xc8>)
 8000eba:	f004 ff47 	bl	8005d4c <siprintf>
	        lcd_send_string(buffer); // Kirim buffer ke LCD
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fd20 	bl	8000908 <lcd_send_string>

	        lcd_put_cur(1, 0);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff fcfd 	bl	80008ca <lcd_put_cur>
	        if (pompaStatus == 1) { // Pastikan variabel konsisten (pompaStatus, bukan pumpOn)
 8000ed0:	4b21      	ldr	r3, [pc, #132]	@ (8000f58 <Ketiga+0xcc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d121      	bne.n	8000f1e <Ketiga+0x92>
	          sprintf(buffer, "Pompa ON - %02d:%02d", countdown / 60, countdown % 60);  // SEI CERT C: FIO30-C — Hindari format string yang tidak tepercaya.
 8000eda:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <Ketiga+0xd0>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8000f60 <Ketiga+0xd4>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461c      	mov	r4, r3
 8000eec:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <Ketiga+0xd0>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <Ketiga+0xd4>)
 8000ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ef8:	0959      	lsrs	r1, r3, #5
 8000efa:	460b      	mov	r3, r1
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	1a5b      	subs	r3, r3, r1
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f107 000c 	add.w	r0, r7, #12
 8000f0a:	4622      	mov	r2, r4
 8000f0c:	4915      	ldr	r1, [pc, #84]	@ (8000f64 <Ketiga+0xd8>)
 8000f0e:	f004 ff1d 	bl	8005d4c <siprintf>
	          lcd_send_string(buffer);
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fcf6 	bl	8000908 <lcd_send_string>
 8000f1c:	e002      	b.n	8000f24 <Ketiga+0x98>
	        } else {
	          lcd_send_string("Pompa OFF");
 8000f1e:	4812      	ldr	r0, [pc, #72]	@ (8000f68 <Ketiga+0xdc>)
 8000f20:	f7ff fcf2 	bl	8000908 <lcd_send_string>
	        }
	        if (pompaStatus == 1 && countdown > 0)  // SEI CERT C: EXP30-C — Menggunakan logika kondisi untuk menghitung countdown.
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <Ketiga+0xcc>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d10b      	bne.n	8000f46 <Ketiga+0xba>
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <Ketiga+0xd0>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d006      	beq.n	8000f46 <Ketiga+0xba>
	        {
	          countdown--;  // SEI CERT C: MEM30-C — Mengurangi countdown setelah setiap detik.
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <Ketiga+0xd0>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <Ketiga+0xd0>)
 8000f44:	701a      	strb	r2, [r3, #0]
	        }
	        osDelay(1000);  // SEI CERT C: CON34-C — Menunda eksekusi agar thread tetap responsif dan tidak terlalu sering memperbarui LCD.
 8000f46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f4a:	f003 fc0a 	bl	8004762 <osDelay>
	        lcd_clear();  // SEI CERT C: EXP30-C — Menggunakan fungsi untuk menghapus layar, memastikan tampilan yang konsisten.
 8000f4e:	e7a1      	b.n	8000e94 <Ketiga+0x8>
 8000f50:	20000328 	.word	0x20000328
 8000f54:	08006f3c 	.word	0x08006f3c
 8000f58:	20000484 	.word	0x20000484
 8000f5c:	20000485 	.word	0x20000485
 8000f60:	88888889 	.word	0x88888889
 8000f64:	08006f54 	.word	0x08006f54
 8000f68:	08006f6c 	.word	0x08006f6c

08000f6c <Keempat>:
	    * @param argument: Not used
	    * @retval None
	    */
	    /* USER CODE END Header_Keempat */
	    void Keempat(void const * argument)
	    {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	      /* USER CODE BEGIN Keempat */
	      /* Infinite loop */
	      for(;;)
	      {
	        // Countdown jika pompa aktif
	        if (pompaStatus && countdown > 0)  // SEI CERT C: EXP33-C — Pastikan kondisi valid sebelum menggunakan variabel dalam operasi.
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <Keempat+0x34>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00b      	beq.n	8000f96 <Keempat+0x2a>
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <Keempat+0x38>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <Keempat+0x2a>
	        {
	          countdown--;  // SEI CERT C: MEM30-C — Mengurangi countdown setiap detik.
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <Keempat+0x38>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <Keempat+0x38>)
 8000f94:	701a      	strb	r2, [r3, #0]
	        }

	        osDelay(1000);  // SEI CERT C: CON34-C — Menunda eksekusi agar sistem tetap responsif dan menghitung countdown secara berkelanjutan.
 8000f96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f9a:	f003 fbe2 	bl	8004762 <osDelay>
	        if (pompaStatus && countdown > 0)  // SEI CERT C: EXP33-C — Pastikan kondisi valid sebelum menggunakan variabel dalam operasi.
 8000f9e:	e7e9      	b.n	8000f74 <Keempat+0x8>
 8000fa0:	20000484 	.word	0x20000484
 8000fa4:	20000485 	.word	0x20000485

08000fa8 <HAL_TIM_PeriodElapsedCallback>:
	      * a global variable "uwTick" used as application time base.
	      * @param  htim : TIM handle
	      * @retval None
	      */
	    void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	    {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	      /* USER CODE BEGIN Callback 0 */

	      /* USER CODE END Callback 0 */
	      if (htim->Instance == TIM2) {  // SEI CERT C: EXP30-C — Memastikan bahwa interupsi berasal dari timer yang tepat untuk menghindari kesalahan pemrosesan.
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fb8:	d101      	bne.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0x16>
	        HAL_IncTick();  // SEI CERT C: EXP30-C — Memperbarui timer global yang digunakan untuk dasar waktu aplikasi.
 8000fba:	f000 faed 	bl	8001598 <HAL_IncTick>
	      }
	      /* USER CODE BEGIN Callback 1 */

	      /* USER CODE END Callback 1 */
	    }
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <Error_Handler>:
	    /**
	      * @brief  This function is executed in case of error occurrence.
	      * @retval None
	      */
	    void Error_Handler(void)
	    {
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fca:	b672      	cpsid	i
}
 8000fcc:	bf00      	nop
	      /* USER CODE BEGIN Error_Handler_Debug */
	      /* User can add his own implementation to report the HAL error return state */
	      __disable_irq();  // SEI CERT C: ERR33-C — Menonaktifkan interupsi untuk mencegah eksekusi lebih lanjut jika terjadi kesalahan.
	      while (1)
 8000fce:	bf00      	nop
 8000fd0:	e7fd      	b.n	8000fce <Error_Handler+0x8>
	...

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_MspInit+0x54>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	4a11      	ldr	r2, [pc, #68]	@ (8001028 <HAL_MspInit+0x54>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <HAL_MspInit+0x54>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <HAL_MspInit+0x54>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <HAL_MspInit+0x54>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001004:	6413      	str	r3, [r2, #64]	@ 0x40
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_MspInit+0x54>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	210f      	movs	r1, #15
 8001016:	f06f 0001 	mvn.w	r0, #1
 800101a:	f000 fe07 	bl	8001c2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800

0800102c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2f      	ldr	r2, [pc, #188]	@ (8001108 <HAL_ADC_MspInit+0xdc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d157      	bne.n	80010fe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b2e      	ldr	r3, [pc, #184]	@ (800110c <HAL_ADC_MspInit+0xe0>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	4a2d      	ldr	r2, [pc, #180]	@ (800110c <HAL_ADC_MspInit+0xe0>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105c:	6453      	str	r3, [r2, #68]	@ 0x44
 800105e:	4b2b      	ldr	r3, [pc, #172]	@ (800110c <HAL_ADC_MspInit+0xe0>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b27      	ldr	r3, [pc, #156]	@ (800110c <HAL_ADC_MspInit+0xe0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a26      	ldr	r2, [pc, #152]	@ (800110c <HAL_ADC_MspInit+0xe0>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b24      	ldr	r3, [pc, #144]	@ (800110c <HAL_ADC_MspInit+0xe0>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001086:	2301      	movs	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	481d      	ldr	r0, [pc, #116]	@ (8001110 <HAL_ADC_MspInit+0xe4>)
 800109a:	f001 f8db 	bl	8002254 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800109e:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <HAL_ADC_MspInit+0xe8>)
 80010a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001118 <HAL_ADC_MspInit+0xec>)
 80010a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <HAL_ADC_MspInit+0xe8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <HAL_ADC_MspInit+0xe8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b0:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <HAL_ADC_MspInit+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <HAL_ADC_MspInit+0xe8>)
 80010b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_ADC_MspInit+0xe8>)
 80010c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010c6:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <HAL_ADC_MspInit+0xe8>)
 80010c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <HAL_ADC_MspInit+0xe8>)
 80010d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <HAL_ADC_MspInit+0xe8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <HAL_ADC_MspInit+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010e2:	480c      	ldr	r0, [pc, #48]	@ (8001114 <HAL_ADC_MspInit+0xe8>)
 80010e4:	f000 fdcc 	bl	8001c80 <HAL_DMA_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010ee:	f7ff ff6a 	bl	8000fc6 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a07      	ldr	r2, [pc, #28]	@ (8001114 <HAL_ADC_MspInit+0xe8>)
 80010f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80010f8:	4a06      	ldr	r2, [pc, #24]	@ (8001114 <HAL_ADC_MspInit+0xe8>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	@ 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40012000 	.word	0x40012000
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000
 8001114:	20000378 	.word	0x20000378
 8001118:	40026410 	.word	0x40026410

0800111c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	@ 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a19      	ldr	r2, [pc, #100]	@ (80011a0 <HAL_I2C_MspInit+0x84>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12c      	bne.n	8001198 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800115a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001160:	2312      	movs	r3, #18
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116c:	2304      	movs	r3, #4
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <HAL_I2C_MspInit+0x8c>)
 8001178:	f001 f86c 	bl	8002254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 8001186:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800118a:	6413      	str	r3, [r2, #64]	@ 0x40
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <HAL_I2C_MspInit+0x88>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	@ 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40005400 	.word	0x40005400
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400

080011ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a19      	ldr	r2, [pc, #100]	@ (8001230 <HAL_UART_MspInit+0x84>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d12b      	bne.n	8001226 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a10      	ldr	r2, [pc, #64]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001206:	230c      	movs	r3, #12
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001216:	2307      	movs	r3, #7
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <HAL_UART_MspInit+0x8c>)
 8001222:	f001 f817 	bl	8002254 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	@ 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40004400 	.word	0x40004400
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000

0800123c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	@ 0x38
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	4b34      	ldr	r3, [pc, #208]	@ (8001324 <HAL_InitTick+0xe8>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	4a33      	ldr	r2, [pc, #204]	@ (8001324 <HAL_InitTick+0xe8>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6413      	str	r3, [r2, #64]	@ 0x40
 800125c:	4b31      	ldr	r3, [pc, #196]	@ (8001324 <HAL_InitTick+0xe8>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001268:	f107 0210 	add.w	r2, r7, #16
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f001 ffa4 	bl	80031c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800127c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800127e:	2b00      	cmp	r3, #0
 8001280:	d103      	bne.n	800128a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001282:	f001 ff75 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 8001286:	6378      	str	r0, [r7, #52]	@ 0x34
 8001288:	e004      	b.n	8001294 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800128a:	f001 ff71 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 800128e:	4603      	mov	r3, r0
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001296:	4a24      	ldr	r2, [pc, #144]	@ (8001328 <HAL_InitTick+0xec>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	0c9b      	lsrs	r3, r3, #18
 800129e:	3b01      	subs	r3, #1
 80012a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80012a2:	4b22      	ldr	r3, [pc, #136]	@ (800132c <HAL_InitTick+0xf0>)
 80012a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80012aa:	4b20      	ldr	r3, [pc, #128]	@ (800132c <HAL_InitTick+0xf0>)
 80012ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012b0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80012b2:	4a1e      	ldr	r2, [pc, #120]	@ (800132c <HAL_InitTick+0xf0>)
 80012b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <HAL_InitTick+0xf0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <HAL_InitTick+0xf0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_InitTick+0xf0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80012ca:	4818      	ldr	r0, [pc, #96]	@ (800132c <HAL_InitTick+0xf0>)
 80012cc:	f002 fc78 	bl	8003bc0 <HAL_TIM_Base_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d11b      	bne.n	8001316 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80012de:	4813      	ldr	r0, [pc, #76]	@ (800132c <HAL_InitTick+0xf0>)
 80012e0:	f002 fcc8 	bl	8003c74 <HAL_TIM_Base_Start_IT>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d111      	bne.n	8001316 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012f2:	201c      	movs	r0, #28
 80012f4:	f000 fcb6 	bl	8001c64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	d808      	bhi.n	8001310 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80012fe:	2200      	movs	r2, #0
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	201c      	movs	r0, #28
 8001304:	f000 fc92 	bl	8001c2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001308:	4a09      	ldr	r2, [pc, #36]	@ (8001330 <HAL_InitTick+0xf4>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e002      	b.n	8001316 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001316:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800131a:	4618      	mov	r0, r3
 800131c:	3738      	adds	r7, #56	@ 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	431bde83 	.word	0x431bde83
 800132c:	20000488 	.word	0x20000488
 8001330:	20000004 	.word	0x20000004

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <NMI_Handler+0x4>

0800133c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <MemManage_Handler+0x4>

0800134c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <UsageFault_Handler+0x4>

0800135c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <TIM2_IRQHandler+0x10>)
 8001372:	f002 fcef 	bl	8003d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000488 	.word	0x20000488

08001380 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <DMA2_Stream0_IRQHandler+0x10>)
 8001386:	f000 fd29 	bl	8001ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000378 	.word	0x20000378

08001394 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e00a      	b.n	80013bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a6:	f3af 8000 	nop.w
 80013aa:	4601      	mov	r1, r0
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	60ba      	str	r2, [r7, #8]
 80013b2:	b2ca      	uxtb	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf0      	blt.n	80013a6 <_read+0x12>
  }

  return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e009      	b.n	80013f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60ba      	str	r2, [r7, #8]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbf1      	blt.n	80013e0 <_write+0x12>
  }
  return len;
 80013fc:	687b      	ldr	r3, [r7, #4]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_close>:

int _close(int file)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800142e:	605a      	str	r2, [r3, #4]
  return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <_isatty>:

int _isatty(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	@ (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	@ (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f004 fd5c 	bl	8005f5c <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	@ (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20020000 	.word	0x20020000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	200004d0 	.word	0x200004d0
 80014d8:	20004378 	.word	0x20004378

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001538 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001504:	f7ff ffea 	bl	80014dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	@ (8001540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	@ (800154c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800152e:	f004 fd1b 	bl	8005f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff f9ff 	bl	8000934 <main>
  bx  lr    
 8001536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001544:	08006fe4 	.word	0x08006fe4
  ldr r2, =_sbss
 8001548:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800154c:	20004378 	.word	0x20004378

08001550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001558:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <HAL_Init+0x40>)
 800155e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_Init+0x40>)
 800156a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800156e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	@ (8001594 <HAL_Init+0x40>)
 8001576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 fb4a 	bl	8001c16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	200f      	movs	r0, #15
 8001584:	f7ff fe5a 	bl	800123c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff fd24 	bl	8000fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023c00 	.word	0x40023c00

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008
 80015bc:	200004d4 	.word	0x200004d4

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	200004d4 	.word	0x200004d4

080015d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e033      	b.n	8001656 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fd18 	bl	800102c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	2b00      	cmp	r3, #0
 8001614:	d118      	bne.n	8001648 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800161e:	f023 0302 	bic.w	r3, r3, #2
 8001622:	f043 0202 	orr.w	r2, r3, #2
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f94a 	bl	80018c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	f023 0303 	bic.w	r3, r3, #3
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	641a      	str	r2, [r3, #64]	@ 0x40
 8001646:	e001      	b.n	800164c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_ADC_ConfigChannel+0x1c>
 8001678:	2302      	movs	r3, #2
 800167a:	e113      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x244>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b09      	cmp	r3, #9
 800168a:	d925      	bls.n	80016d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68d9      	ldr	r1, [r3, #12]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	3b1e      	subs	r3, #30
 80016a2:	2207      	movs	r2, #7
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43da      	mvns	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	400a      	ands	r2, r1
 80016b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68d9      	ldr	r1, [r3, #12]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	4603      	mov	r3, r0
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4403      	add	r3, r0
 80016ca:	3b1e      	subs	r3, #30
 80016cc:	409a      	lsls	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	e022      	b.n	800171e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6919      	ldr	r1, [r3, #16]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	2207      	movs	r2, #7
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	400a      	ands	r2, r1
 80016fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6919      	ldr	r1, [r3, #16]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	4618      	mov	r0, r3
 800170e:	4603      	mov	r3, r0
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4403      	add	r3, r0
 8001714:	409a      	lsls	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b06      	cmp	r3, #6
 8001724:	d824      	bhi.n	8001770 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	3b05      	subs	r3, #5
 8001738:	221f      	movs	r2, #31
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	400a      	ands	r2, r1
 8001746:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	4618      	mov	r0, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3b05      	subs	r3, #5
 8001762:	fa00 f203 	lsl.w	r2, r0, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	635a      	str	r2, [r3, #52]	@ 0x34
 800176e:	e04c      	b.n	800180a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b0c      	cmp	r3, #12
 8001776:	d824      	bhi.n	80017c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	3b23      	subs	r3, #35	@ 0x23
 800178a:	221f      	movs	r2, #31
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43da      	mvns	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	400a      	ands	r2, r1
 8001798:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	3b23      	subs	r3, #35	@ 0x23
 80017b4:	fa00 f203 	lsl.w	r2, r0, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	631a      	str	r2, [r3, #48]	@ 0x30
 80017c0:	e023      	b.n	800180a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	3b41      	subs	r3, #65	@ 0x41
 80017d4:	221f      	movs	r2, #31
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	400a      	ands	r2, r1
 80017e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	3b41      	subs	r3, #65	@ 0x41
 80017fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800180a:	4b29      	ldr	r3, [pc, #164]	@ (80018b0 <HAL_ADC_ConfigChannel+0x250>)
 800180c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a28      	ldr	r2, [pc, #160]	@ (80018b4 <HAL_ADC_ConfigChannel+0x254>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d10f      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x1d8>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b12      	cmp	r3, #18
 800181e:	d10b      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1d      	ldr	r2, [pc, #116]	@ (80018b4 <HAL_ADC_ConfigChannel+0x254>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d12b      	bne.n	800189a <HAL_ADC_ConfigChannel+0x23a>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1c      	ldr	r2, [pc, #112]	@ (80018b8 <HAL_ADC_ConfigChannel+0x258>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d003      	beq.n	8001854 <HAL_ADC_ConfigChannel+0x1f4>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b11      	cmp	r3, #17
 8001852:	d122      	bne.n	800189a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a11      	ldr	r2, [pc, #68]	@ (80018b8 <HAL_ADC_ConfigChannel+0x258>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d111      	bne.n	800189a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001876:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <HAL_ADC_ConfigChannel+0x25c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a11      	ldr	r2, [pc, #68]	@ (80018c0 <HAL_ADC_ConfigChannel+0x260>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	0c9a      	lsrs	r2, r3, #18
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800188c:	e002      	b.n	8001894 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3b01      	subs	r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f9      	bne.n	800188e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40012300 	.word	0x40012300
 80018b4:	40012000 	.word	0x40012000
 80018b8:	10000012 	.word	0x10000012
 80018bc:	20000000 	.word	0x20000000
 80018c0:	431bde83 	.word	0x431bde83

080018c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018cc:	4b79      	ldr	r3, [pc, #484]	@ (8001ab4 <ADC_Init+0x1f0>)
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	021a      	lsls	r2, r3, #8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800191c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800193e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6899      	ldr	r1, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001956:	4a58      	ldr	r2, [pc, #352]	@ (8001ab8 <ADC_Init+0x1f4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d022      	beq.n	80019a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800196a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6899      	ldr	r1, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800198c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6899      	ldr	r1, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	e00f      	b.n	80019c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0202 	bic.w	r2, r2, #2
 80019d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6899      	ldr	r1, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7e1b      	ldrb	r3, [r3, #24]
 80019dc:	005a      	lsls	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01b      	beq.n	8001a28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6859      	ldr	r1, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	035a      	lsls	r2, r3, #13
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	e007      	b.n	8001a38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a36:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	051a      	lsls	r2, r3, #20
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6899      	ldr	r1, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a7a:	025a      	lsls	r2, r3, #9
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6899      	ldr	r1, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	029a      	lsls	r2, r3, #10
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	609a      	str	r2, [r3, #8]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40012300 	.word	0x40012300
 8001ab8:	0f000001 	.word	0x0f000001

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4907      	ldr	r1, [pc, #28]	@ (8001b58 <__NVIC_EnableIRQ+0x38>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	@ (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	@ (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	@ 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	@ 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ff4c 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3e:	f7ff ff61 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	6978      	ldr	r0, [r7, #20]
 8001c4a:	f7ff ffb1 	bl	8001bb0 <NVIC_EncodePriority>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff80 	bl	8001b5c <__NVIC_SetPriority>
}
 8001c5c:	bf00      	nop
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff54 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff fc98 	bl	80015c0 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e099      	b.n	8001dd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cbc:	e00f      	b.n	8001cde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cbe:	f7ff fc7f 	bl	80015c0 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	d908      	bls.n	8001cde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e078      	b.n	8001dd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e8      	bne.n	8001cbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	4b38      	ldr	r3, [pc, #224]	@ (8001dd8 <HAL_DMA_Init+0x158>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d107      	bne.n	8001d48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d40:	4313      	orrs	r3, r2
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f023 0307 	bic.w	r3, r3, #7
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d117      	bne.n	8001da2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00e      	beq.n	8001da2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f9e9 	bl	800215c <DMA_CheckFifoParam>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2240      	movs	r2, #64	@ 0x40
 8001d94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e016      	b.n	8001dd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f9a0 	bl	80020f0 <DMA_CalcBaseAndBitshift>
 8001db0:	4603      	mov	r3, r0
 8001db2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db8:	223f      	movs	r2, #63	@ 0x3f
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	f010803f 	.word	0xf010803f

08001ddc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001de8:	4b8e      	ldr	r3, [pc, #568]	@ (8002024 <HAL_DMA_IRQHandler+0x248>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a8e      	ldr	r2, [pc, #568]	@ (8002028 <HAL_DMA_IRQHandler+0x24c>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0a9b      	lsrs	r3, r3, #10
 8001df4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e06:	2208      	movs	r2, #8
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d01a      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0204 	bic.w	r2, r2, #4
 8001e2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e34:	2208      	movs	r2, #8
 8001e36:	409a      	lsls	r2, r3
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d012      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e76:	f043 0202 	orr.w	r2, r3, #2
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e82:	2204      	movs	r2, #4
 8001e84:	409a      	lsls	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d012      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00b      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eac:	f043 0204 	orr.w	r2, r3, #4
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb8:	2210      	movs	r2, #16
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d043      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d03c      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed6:	2210      	movs	r2, #16
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d018      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d108      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d024      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	4798      	blx	r3
 8001f0a:	e01f      	b.n	8001f4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d01b      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
 8001f1c:	e016      	b.n	8001f4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d107      	bne.n	8001f3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0208 	bic.w	r2, r2, #8
 8001f3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f50:	2220      	movs	r2, #32
 8001f52:	409a      	lsls	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 808f 	beq.w	800207c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8087 	beq.w	800207c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f72:	2220      	movs	r2, #32
 8001f74:	409a      	lsls	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d136      	bne.n	8001ff4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0216 	bic.w	r2, r2, #22
 8001f94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <HAL_DMA_IRQHandler+0x1da>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0208 	bic.w	r2, r2, #8
 8001fc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fca:	223f      	movs	r2, #63	@ 0x3f
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d07e      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	4798      	blx	r3
        }
        return;
 8001ff2:	e079      	b.n	80020e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01d      	beq.n	800203e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10d      	bne.n	800202c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002014:	2b00      	cmp	r3, #0
 8002016:	d031      	beq.n	800207c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	4798      	blx	r3
 8002020:	e02c      	b.n	800207c <HAL_DMA_IRQHandler+0x2a0>
 8002022:	bf00      	nop
 8002024:	20000000 	.word	0x20000000
 8002028:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d023      	beq.n	800207c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
 800203c:	e01e      	b.n	800207c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10f      	bne.n	800206c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0210 	bic.w	r2, r2, #16
 800205a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002080:	2b00      	cmp	r3, #0
 8002082:	d032      	beq.n	80020ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d022      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2205      	movs	r2, #5
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d307      	bcc.n	80020c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f2      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x2cc>
 80020c2:	e000      	b.n	80020c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
 80020e6:	e000      	b.n	80020ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80020e8:	bf00      	nop
    }
  }
}
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3b10      	subs	r3, #16
 8002100:	4a14      	ldr	r2, [pc, #80]	@ (8002154 <DMA_CalcBaseAndBitshift+0x64>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800210a:	4a13      	ldr	r2, [pc, #76]	@ (8002158 <DMA_CalcBaseAndBitshift+0x68>)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d909      	bls.n	8002132 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	1d1a      	adds	r2, r3, #4
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002130:	e007      	b.n	8002142 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	aaaaaaab 	.word	0xaaaaaaab
 8002158:	08006f98 	.word	0x08006f98

0800215c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d11f      	bne.n	80021b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d856      	bhi.n	800222a <DMA_CheckFifoParam+0xce>
 800217c:	a201      	add	r2, pc, #4	@ (adr r2, 8002184 <DMA_CheckFifoParam+0x28>)
 800217e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002182:	bf00      	nop
 8002184:	08002195 	.word	0x08002195
 8002188:	080021a7 	.word	0x080021a7
 800218c:	08002195 	.word	0x08002195
 8002190:	0800222b 	.word	0x0800222b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002198:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d046      	beq.n	800222e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a4:	e043      	b.n	800222e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021ae:	d140      	bne.n	8002232 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b4:	e03d      	b.n	8002232 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021be:	d121      	bne.n	8002204 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d837      	bhi.n	8002236 <DMA_CheckFifoParam+0xda>
 80021c6:	a201      	add	r2, pc, #4	@ (adr r2, 80021cc <DMA_CheckFifoParam+0x70>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021e3 	.word	0x080021e3
 80021d4:	080021dd 	.word	0x080021dd
 80021d8:	080021f5 	.word	0x080021f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
      break;
 80021e0:	e030      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d025      	beq.n	800223a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f2:	e022      	b.n	800223a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021fc:	d11f      	bne.n	800223e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002202:	e01c      	b.n	800223e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d903      	bls.n	8002212 <DMA_CheckFifoParam+0xb6>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d003      	beq.n	8002218 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002210:	e018      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
      break;
 8002216:	e015      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00e      	beq.n	8002242 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      break;
 8002228:	e00b      	b.n	8002242 <DMA_CheckFifoParam+0xe6>
      break;
 800222a:	bf00      	nop
 800222c:	e00a      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 800222e:	bf00      	nop
 8002230:	e008      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e006      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e004      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e002      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;   
 800223e:	bf00      	nop
 8002240:	e000      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
    }
  } 
  
  return status; 
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	@ 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	e165      	b.n	800253c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002270:	2201      	movs	r2, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	429a      	cmp	r2, r3
 800228a:	f040 8154 	bne.w	8002536 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d005      	beq.n	80022a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d130      	bne.n	8002308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 0201 	and.w	r2, r3, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b03      	cmp	r3, #3
 8002312:	d017      	beq.n	8002344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d123      	bne.n	8002398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	220f      	movs	r2, #15
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	08da      	lsrs	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3208      	adds	r2, #8
 8002392:	69b9      	ldr	r1, [r7, #24]
 8002394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0203 	and.w	r2, r3, #3
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80ae 	beq.w	8002536 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	4b5d      	ldr	r3, [pc, #372]	@ (8002554 <HAL_GPIO_Init+0x300>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	4a5c      	ldr	r2, [pc, #368]	@ (8002554 <HAL_GPIO_Init+0x300>)
 80023e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002554 <HAL_GPIO_Init+0x300>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023f6:	4a58      	ldr	r2, [pc, #352]	@ (8002558 <HAL_GPIO_Init+0x304>)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4f      	ldr	r2, [pc, #316]	@ (800255c <HAL_GPIO_Init+0x308>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d025      	beq.n	800246e <HAL_GPIO_Init+0x21a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4e      	ldr	r2, [pc, #312]	@ (8002560 <HAL_GPIO_Init+0x30c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01f      	beq.n	800246a <HAL_GPIO_Init+0x216>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4d      	ldr	r2, [pc, #308]	@ (8002564 <HAL_GPIO_Init+0x310>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d019      	beq.n	8002466 <HAL_GPIO_Init+0x212>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4c      	ldr	r2, [pc, #304]	@ (8002568 <HAL_GPIO_Init+0x314>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_GPIO_Init+0x20e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4b      	ldr	r2, [pc, #300]	@ (800256c <HAL_GPIO_Init+0x318>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00d      	beq.n	800245e <HAL_GPIO_Init+0x20a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4a      	ldr	r2, [pc, #296]	@ (8002570 <HAL_GPIO_Init+0x31c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <HAL_GPIO_Init+0x206>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a49      	ldr	r2, [pc, #292]	@ (8002574 <HAL_GPIO_Init+0x320>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_GPIO_Init+0x202>
 8002452:	2306      	movs	r3, #6
 8002454:	e00c      	b.n	8002470 <HAL_GPIO_Init+0x21c>
 8002456:	2307      	movs	r3, #7
 8002458:	e00a      	b.n	8002470 <HAL_GPIO_Init+0x21c>
 800245a:	2305      	movs	r3, #5
 800245c:	e008      	b.n	8002470 <HAL_GPIO_Init+0x21c>
 800245e:	2304      	movs	r3, #4
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x21c>
 8002462:	2303      	movs	r3, #3
 8002464:	e004      	b.n	8002470 <HAL_GPIO_Init+0x21c>
 8002466:	2302      	movs	r3, #2
 8002468:	e002      	b.n	8002470 <HAL_GPIO_Init+0x21c>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_GPIO_Init+0x21c>
 800246e:	2300      	movs	r3, #0
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	f002 0203 	and.w	r2, r2, #3
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	4093      	lsls	r3, r2
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002480:	4935      	ldr	r1, [pc, #212]	@ (8002558 <HAL_GPIO_Init+0x304>)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248e:	4b3a      	ldr	r3, [pc, #232]	@ (8002578 <HAL_GPIO_Init+0x324>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b2:	4a31      	ldr	r2, [pc, #196]	@ (8002578 <HAL_GPIO_Init+0x324>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002578 <HAL_GPIO_Init+0x324>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024dc:	4a26      	ldr	r2, [pc, #152]	@ (8002578 <HAL_GPIO_Init+0x324>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024e2:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <HAL_GPIO_Init+0x324>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002506:	4a1c      	ldr	r2, [pc, #112]	@ (8002578 <HAL_GPIO_Init+0x324>)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250c:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <HAL_GPIO_Init+0x324>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002530:	4a11      	ldr	r2, [pc, #68]	@ (8002578 <HAL_GPIO_Init+0x324>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3301      	adds	r3, #1
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2b0f      	cmp	r3, #15
 8002540:	f67f ae96 	bls.w	8002270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3724      	adds	r7, #36	@ 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40013800 	.word	0x40013800
 800255c:	40020000 	.word	0x40020000
 8002560:	40020400 	.word	0x40020400
 8002564:	40020800 	.word	0x40020800
 8002568:	40020c00 	.word	0x40020c00
 800256c:	40021000 	.word	0x40021000
 8002570:	40021400 	.word	0x40021400
 8002574:	40021800 	.word	0x40021800
 8002578:	40013c00 	.word	0x40013c00

0800257c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
 8002588:	4613      	mov	r3, r2
 800258a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800258c:	787b      	ldrb	r3, [r7, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002598:	e003      	b.n	80025a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800259a:	887b      	ldrh	r3, [r7, #2]
 800259c:	041a      	lsls	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	619a      	str	r2, [r3, #24]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e12b      	b.n	800281a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe fda0 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	@ 0x24
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002602:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002612:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002614:	f000 fdac 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 8002618:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4a81      	ldr	r2, [pc, #516]	@ (8002824 <HAL_I2C_Init+0x274>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d807      	bhi.n	8002634 <HAL_I2C_Init+0x84>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4a80      	ldr	r2, [pc, #512]	@ (8002828 <HAL_I2C_Init+0x278>)
 8002628:	4293      	cmp	r3, r2
 800262a:	bf94      	ite	ls
 800262c:	2301      	movls	r3, #1
 800262e:	2300      	movhi	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e006      	b.n	8002642 <HAL_I2C_Init+0x92>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a7d      	ldr	r2, [pc, #500]	@ (800282c <HAL_I2C_Init+0x27c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	bf94      	ite	ls
 800263c:	2301      	movls	r3, #1
 800263e:	2300      	movhi	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0e7      	b.n	800281a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4a78      	ldr	r2, [pc, #480]	@ (8002830 <HAL_I2C_Init+0x280>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0c9b      	lsrs	r3, r3, #18
 8002654:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a6a      	ldr	r2, [pc, #424]	@ (8002824 <HAL_I2C_Init+0x274>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d802      	bhi.n	8002684 <HAL_I2C_Init+0xd4>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3301      	adds	r3, #1
 8002682:	e009      	b.n	8002698 <HAL_I2C_Init+0xe8>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	4a69      	ldr	r2, [pc, #420]	@ (8002834 <HAL_I2C_Init+0x284>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	099b      	lsrs	r3, r3, #6
 8002696:	3301      	adds	r3, #1
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	430b      	orrs	r3, r1
 800269e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	495c      	ldr	r1, [pc, #368]	@ (8002824 <HAL_I2C_Init+0x274>)
 80026b4:	428b      	cmp	r3, r1
 80026b6:	d819      	bhi.n	80026ec <HAL_I2C_Init+0x13c>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1e59      	subs	r1, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c6:	1c59      	adds	r1, r3, #1
 80026c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026cc:	400b      	ands	r3, r1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_I2C_Init+0x138>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1e59      	subs	r1, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e0:	3301      	adds	r3, #1
 80026e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e6:	e051      	b.n	800278c <HAL_I2C_Init+0x1dc>
 80026e8:	2304      	movs	r3, #4
 80026ea:	e04f      	b.n	800278c <HAL_I2C_Init+0x1dc>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d111      	bne.n	8002718 <HAL_I2C_Init+0x168>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1e58      	subs	r0, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	440b      	add	r3, r1
 8002702:	fbb0 f3f3 	udiv	r3, r0, r3
 8002706:	3301      	adds	r3, #1
 8002708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	e012      	b.n	800273e <HAL_I2C_Init+0x18e>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1e58      	subs	r0, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	0099      	lsls	r1, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	fbb0 f3f3 	udiv	r3, r0, r3
 800272e:	3301      	adds	r3, #1
 8002730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Init+0x196>
 8002742:	2301      	movs	r3, #1
 8002744:	e022      	b.n	800278c <HAL_I2C_Init+0x1dc>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10e      	bne.n	800276c <HAL_I2C_Init+0x1bc>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1e58      	subs	r0, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	440b      	add	r3, r1
 800275c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002760:	3301      	adds	r3, #1
 8002762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800276a:	e00f      	b.n	800278c <HAL_I2C_Init+0x1dc>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1e58      	subs	r0, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	0099      	lsls	r1, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002782:	3301      	adds	r3, #1
 8002784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002788:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	6809      	ldr	r1, [r1, #0]
 8002790:	4313      	orrs	r3, r2
 8002792:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6911      	ldr	r1, [r2, #16]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68d2      	ldr	r2, [r2, #12]
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	000186a0 	.word	0x000186a0
 8002828:	001e847f 	.word	0x001e847f
 800282c:	003d08ff 	.word	0x003d08ff
 8002830:	431bde83 	.word	0x431bde83
 8002834:	10624dd3 	.word	0x10624dd3

08002838 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	461a      	mov	r2, r3
 8002844:	460b      	mov	r3, r1
 8002846:	817b      	strh	r3, [r7, #10]
 8002848:	4613      	mov	r3, r2
 800284a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800284c:	f7fe feb8 	bl	80015c0 <HAL_GetTick>
 8002850:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	f040 80e0 	bne.w	8002a20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2319      	movs	r3, #25
 8002866:	2201      	movs	r2, #1
 8002868:	4970      	ldr	r1, [pc, #448]	@ (8002a2c <HAL_I2C_Master_Transmit+0x1f4>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f964 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
 8002878:	e0d3      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_I2C_Master_Transmit+0x50>
 8002884:	2302      	movs	r3, #2
 8002886:	e0cc      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d007      	beq.n	80028ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2221      	movs	r2, #33	@ 0x21
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2210      	movs	r2, #16
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	893a      	ldrh	r2, [r7, #8]
 80028de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a50      	ldr	r2, [pc, #320]	@ (8002a30 <HAL_I2C_Master_Transmit+0x1f8>)
 80028ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028f0:	8979      	ldrh	r1, [r7, #10]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	6a3a      	ldr	r2, [r7, #32]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f89c 	bl	8002a34 <I2C_MasterRequestWrite>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e08d      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800291c:	e066      	b.n	80029ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	6a39      	ldr	r1, [r7, #32]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fa22 	bl	8002d6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00d      	beq.n	800294a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	2b04      	cmp	r3, #4
 8002934:	d107      	bne.n	8002946 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002944:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e06b      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d11b      	bne.n	80029c0 <HAL_I2C_Master_Transmit+0x188>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d017      	beq.n	80029c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	6a39      	ldr	r1, [r7, #32]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fa19 	bl	8002dfc <I2C_WaitOnBTFFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d107      	bne.n	80029e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e01a      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d194      	bne.n	800291e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e000      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
  }
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	00100002 	.word	0x00100002
 8002a30:	ffff0000 	.word	0xffff0000

08002a34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	460b      	mov	r3, r1
 8002a42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d006      	beq.n	8002a5e <I2C_MasterRequestWrite+0x2a>
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d003      	beq.n	8002a5e <I2C_MasterRequestWrite+0x2a>
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a5c:	d108      	bne.n	8002a70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e00b      	b.n	8002a88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a74:	2b12      	cmp	r3, #18
 8002a76:	d107      	bne.n	8002a88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f84f 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00d      	beq.n	8002abc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aae:	d103      	bne.n	8002ab8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e035      	b.n	8002b28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ac4:	d108      	bne.n	8002ad8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ac6:	897b      	ldrh	r3, [r7, #10]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ad4:	611a      	str	r2, [r3, #16]
 8002ad6:	e01b      	b.n	8002b10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ad8:	897b      	ldrh	r3, [r7, #10]
 8002ada:	11db      	asrs	r3, r3, #7
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 0306 	and.w	r3, r3, #6
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f063 030f 	orn	r3, r3, #15
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	490e      	ldr	r1, [pc, #56]	@ (8002b30 <I2C_MasterRequestWrite+0xfc>)
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f898 	bl	8002c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e010      	b.n	8002b28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b06:	897b      	ldrh	r3, [r7, #10]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	4907      	ldr	r1, [pc, #28]	@ (8002b34 <I2C_MasterRequestWrite+0x100>)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f888 	bl	8002c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	00010008 	.word	0x00010008
 8002b34:	00010002 	.word	0x00010002

08002b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b48:	e048      	b.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d044      	beq.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b52:	f7fe fd35 	bl	80015c0 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d139      	bne.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	0c1b      	lsrs	r3, r3, #16
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d10d      	bne.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	43da      	mvns	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	e00c      	b.n	8002ba8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	43da      	mvns	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d116      	bne.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e023      	b.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d10d      	bne.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	43da      	mvns	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	e00c      	b.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d093      	beq.n	8002b4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c3a:	e071      	b.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c4a:	d123      	bne.n	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	f043 0204 	orr.w	r2, r3, #4
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e067      	b.n	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d041      	beq.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9c:	f7fe fc90 	bl	80015c0 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d302      	bcc.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d136      	bne.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d10c      	bne.n	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf14      	ite	ne
 8002cce:	2301      	movne	r3, #1
 8002cd0:	2300      	moveq	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	e00b      	b.n	8002cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	43da      	mvns	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf14      	ite	ne
 8002ce8:	2301      	movne	r3, #1
 8002cea:	2300      	moveq	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e021      	b.n	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	0c1b      	lsrs	r3, r3, #16
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d10c      	bne.n	8002d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	43da      	mvns	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4013      	ands	r3, r2
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e00b      	b.n	8002d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bf14      	ite	ne
 8002d56:	2301      	movne	r3, #1
 8002d58:	2300      	moveq	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f47f af6d 	bne.w	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d78:	e034      	b.n	8002de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f886 	bl	8002e8c <I2C_IsAcknowledgeFailed>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e034      	b.n	8002df4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d028      	beq.n	8002de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d92:	f7fe fc15 	bl	80015c0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d11d      	bne.n	8002de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db2:	2b80      	cmp	r3, #128	@ 0x80
 8002db4:	d016      	beq.n	8002de4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e007      	b.n	8002df4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dee:	2b80      	cmp	r3, #128	@ 0x80
 8002df0:	d1c3      	bne.n	8002d7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e08:	e034      	b.n	8002e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f83e 	bl	8002e8c <I2C_IsAcknowledgeFailed>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e034      	b.n	8002e84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d028      	beq.n	8002e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e22:	f7fe fbcd 	bl	80015c0 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d302      	bcc.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d11d      	bne.n	8002e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d016      	beq.n	8002e74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e007      	b.n	8002e84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d1c3      	bne.n	8002e0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea2:	d11b      	bne.n	8002edc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002eac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	4b20      	ldr	r3, [pc, #128]	@ (8002f7c <HAL_PWREx_EnableOverDrive+0x90>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	4a1f      	ldr	r2, [pc, #124]	@ (8002f7c <HAL_PWREx_EnableOverDrive+0x90>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f06:	4b1d      	ldr	r3, [pc, #116]	@ (8002f7c <HAL_PWREx_EnableOverDrive+0x90>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f12:	4b1b      	ldr	r3, [pc, #108]	@ (8002f80 <HAL_PWREx_EnableOverDrive+0x94>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f18:	f7fe fb52 	bl	80015c0 <HAL_GetTick>
 8002f1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f1e:	e009      	b.n	8002f34 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f20:	f7fe fb4e 	bl	80015c0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f2e:	d901      	bls.n	8002f34 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e01f      	b.n	8002f74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f34:	4b13      	ldr	r3, [pc, #76]	@ (8002f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f40:	d1ee      	bne.n	8002f20 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f42:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f48:	f7fe fb3a 	bl	80015c0 <HAL_GetTick>
 8002f4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f4e:	e009      	b.n	8002f64 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f50:	f7fe fb36 	bl	80015c0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f5e:	d901      	bls.n	8002f64 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e007      	b.n	8002f74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f64:	4b07      	ldr	r3, [pc, #28]	@ (8002f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f70:	d1ee      	bne.n	8002f50 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	420e0040 	.word	0x420e0040
 8002f84:	40007000 	.word	0x40007000
 8002f88:	420e0044 	.word	0x420e0044

08002f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0cc      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b68      	ldr	r3, [pc, #416]	@ (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d90c      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b65      	ldr	r3, [pc, #404]	@ (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b63      	ldr	r3, [pc, #396]	@ (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0b8      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d020      	beq.n	8003016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe0:	4b59      	ldr	r3, [pc, #356]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a58      	ldr	r2, [pc, #352]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff8:	4b53      	ldr	r3, [pc, #332]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a52      	ldr	r2, [pc, #328]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003004:	4b50      	ldr	r3, [pc, #320]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	494d      	ldr	r1, [pc, #308]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d044      	beq.n	80030ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d107      	bne.n	800303a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302a:	4b47      	ldr	r3, [pc, #284]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d119      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e07f      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d003      	beq.n	800304a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003046:	2b03      	cmp	r3, #3
 8003048:	d107      	bne.n	800305a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304a:	4b3f      	ldr	r3, [pc, #252]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e06f      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305a:	4b3b      	ldr	r3, [pc, #236]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e067      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800306a:	4b37      	ldr	r3, [pc, #220]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f023 0203 	bic.w	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4934      	ldr	r1, [pc, #208]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	4313      	orrs	r3, r2
 800307a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800307c:	f7fe faa0 	bl	80015c0 <HAL_GetTick>
 8003080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	e00a      	b.n	800309a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003084:	f7fe fa9c 	bl	80015c0 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e04f      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309a:	4b2b      	ldr	r3, [pc, #172]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 020c 	and.w	r2, r3, #12
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d1eb      	bne.n	8003084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030ac:	4b25      	ldr	r3, [pc, #148]	@ (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d20c      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b22      	ldr	r3, [pc, #136]	@ (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	4b20      	ldr	r3, [pc, #128]	@ (8003144 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e032      	b.n	800313a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e0:	4b19      	ldr	r3, [pc, #100]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4916      	ldr	r1, [pc, #88]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fe:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	490e      	ldr	r1, [pc, #56]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003112:	f000 f887 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 8003116:	4602      	mov	r2, r0
 8003118:	4b0b      	ldr	r3, [pc, #44]	@ (8003148 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	490a      	ldr	r1, [pc, #40]	@ (800314c <HAL_RCC_ClockConfig+0x1c0>)
 8003124:	5ccb      	ldrb	r3, [r1, r3]
 8003126:	fa22 f303 	lsr.w	r3, r2, r3
 800312a:	4a09      	ldr	r2, [pc, #36]	@ (8003150 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800312e:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <HAL_RCC_ClockConfig+0x1c8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe f882 	bl	800123c <HAL_InitTick>

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023c00 	.word	0x40023c00
 8003148:	40023800 	.word	0x40023800
 800314c:	08006f80 	.word	0x08006f80
 8003150:	20000000 	.word	0x20000000
 8003154:	20000004 	.word	0x20000004

08003158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800315c:	4b03      	ldr	r3, [pc, #12]	@ (800316c <HAL_RCC_GetHCLKFreq+0x14>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000000 	.word	0x20000000

08003170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003174:	f7ff fff0 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b05      	ldr	r3, [pc, #20]	@ (8003190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	0a9b      	lsrs	r3, r3, #10
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4903      	ldr	r1, [pc, #12]	@ (8003194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	08006f90 	.word	0x08006f90

08003198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800319c:	f7ff ffdc 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0b5b      	lsrs	r3, r3, #13
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4903      	ldr	r1, [pc, #12]	@ (80031bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	08006f90 	.word	0x08006f90

080031c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	220f      	movs	r2, #15
 80031ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031d0:	4b12      	ldr	r3, [pc, #72]	@ (800321c <HAL_RCC_GetClockConfig+0x5c>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0203 	and.w	r2, r3, #3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031dc:	4b0f      	ldr	r3, [pc, #60]	@ (800321c <HAL_RCC_GetClockConfig+0x5c>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031e8:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <HAL_RCC_GetClockConfig+0x5c>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031f4:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_RCC_GetClockConfig+0x5c>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	08db      	lsrs	r3, r3, #3
 80031fa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003202:	4b07      	ldr	r3, [pc, #28]	@ (8003220 <HAL_RCC_GetClockConfig+0x60>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	601a      	str	r2, [r3, #0]
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800
 8003220:	40023c00 	.word	0x40023c00

08003224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003228:	b0ae      	sub	sp, #184	@ 0xb8
 800322a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800324a:	4bcb      	ldr	r3, [pc, #812]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b0c      	cmp	r3, #12
 8003254:	f200 8206 	bhi.w	8003664 <HAL_RCC_GetSysClockFreq+0x440>
 8003258:	a201      	add	r2, pc, #4	@ (adr r2, 8003260 <HAL_RCC_GetSysClockFreq+0x3c>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003295 	.word	0x08003295
 8003264:	08003665 	.word	0x08003665
 8003268:	08003665 	.word	0x08003665
 800326c:	08003665 	.word	0x08003665
 8003270:	0800329d 	.word	0x0800329d
 8003274:	08003665 	.word	0x08003665
 8003278:	08003665 	.word	0x08003665
 800327c:	08003665 	.word	0x08003665
 8003280:	080032a5 	.word	0x080032a5
 8003284:	08003665 	.word	0x08003665
 8003288:	08003665 	.word	0x08003665
 800328c:	08003665 	.word	0x08003665
 8003290:	08003495 	.word	0x08003495
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4bb9      	ldr	r3, [pc, #740]	@ (800357c <HAL_RCC_GetSysClockFreq+0x358>)
 8003296:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800329a:	e1e7      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800329c:	4bb8      	ldr	r3, [pc, #736]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x35c>)
 800329e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032a2:	e1e3      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a4:	4bb4      	ldr	r3, [pc, #720]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b0:	4bb1      	ldr	r3, [pc, #708]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d071      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032bc:	4bae      	ldr	r3, [pc, #696]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	099b      	lsrs	r3, r3, #6
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032c8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80032cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032d8:	2300      	movs	r3, #0
 80032da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80032de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032e2:	4622      	mov	r2, r4
 80032e4:	462b      	mov	r3, r5
 80032e6:	f04f 0000 	mov.w	r0, #0
 80032ea:	f04f 0100 	mov.w	r1, #0
 80032ee:	0159      	lsls	r1, r3, #5
 80032f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032f4:	0150      	lsls	r0, r2, #5
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4621      	mov	r1, r4
 80032fc:	1a51      	subs	r1, r2, r1
 80032fe:	6439      	str	r1, [r7, #64]	@ 0x40
 8003300:	4629      	mov	r1, r5
 8003302:	eb63 0301 	sbc.w	r3, r3, r1
 8003306:	647b      	str	r3, [r7, #68]	@ 0x44
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003314:	4649      	mov	r1, r9
 8003316:	018b      	lsls	r3, r1, #6
 8003318:	4641      	mov	r1, r8
 800331a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800331e:	4641      	mov	r1, r8
 8003320:	018a      	lsls	r2, r1, #6
 8003322:	4641      	mov	r1, r8
 8003324:	1a51      	subs	r1, r2, r1
 8003326:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003328:	4649      	mov	r1, r9
 800332a:	eb63 0301 	sbc.w	r3, r3, r1
 800332e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800333c:	4649      	mov	r1, r9
 800333e:	00cb      	lsls	r3, r1, #3
 8003340:	4641      	mov	r1, r8
 8003342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003346:	4641      	mov	r1, r8
 8003348:	00ca      	lsls	r2, r1, #3
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	4603      	mov	r3, r0
 8003350:	4622      	mov	r2, r4
 8003352:	189b      	adds	r3, r3, r2
 8003354:	633b      	str	r3, [r7, #48]	@ 0x30
 8003356:	462b      	mov	r3, r5
 8003358:	460a      	mov	r2, r1
 800335a:	eb42 0303 	adc.w	r3, r2, r3
 800335e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800336c:	4629      	mov	r1, r5
 800336e:	024b      	lsls	r3, r1, #9
 8003370:	4621      	mov	r1, r4
 8003372:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003376:	4621      	mov	r1, r4
 8003378:	024a      	lsls	r2, r1, #9
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003382:	2200      	movs	r2, #0
 8003384:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003388:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800338c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003390:	f7fc ff8e 	bl	80002b0 <__aeabi_uldivmod>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4613      	mov	r3, r2
 800339a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800339e:	e067      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a0:	4b75      	ldr	r3, [pc, #468]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80033b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033ba:	2300      	movs	r3, #0
 80033bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80033c2:	4622      	mov	r2, r4
 80033c4:	462b      	mov	r3, r5
 80033c6:	f04f 0000 	mov.w	r0, #0
 80033ca:	f04f 0100 	mov.w	r1, #0
 80033ce:	0159      	lsls	r1, r3, #5
 80033d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d4:	0150      	lsls	r0, r2, #5
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4621      	mov	r1, r4
 80033dc:	1a51      	subs	r1, r2, r1
 80033de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80033e0:	4629      	mov	r1, r5
 80033e2:	eb63 0301 	sbc.w	r3, r3, r1
 80033e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80033f4:	4649      	mov	r1, r9
 80033f6:	018b      	lsls	r3, r1, #6
 80033f8:	4641      	mov	r1, r8
 80033fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033fe:	4641      	mov	r1, r8
 8003400:	018a      	lsls	r2, r1, #6
 8003402:	4641      	mov	r1, r8
 8003404:	ebb2 0a01 	subs.w	sl, r2, r1
 8003408:	4649      	mov	r1, r9
 800340a:	eb63 0b01 	sbc.w	fp, r3, r1
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800341a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800341e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003422:	4692      	mov	sl, r2
 8003424:	469b      	mov	fp, r3
 8003426:	4623      	mov	r3, r4
 8003428:	eb1a 0303 	adds.w	r3, sl, r3
 800342c:	623b      	str	r3, [r7, #32]
 800342e:	462b      	mov	r3, r5
 8003430:	eb4b 0303 	adc.w	r3, fp, r3
 8003434:	627b      	str	r3, [r7, #36]	@ 0x24
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003442:	4629      	mov	r1, r5
 8003444:	028b      	lsls	r3, r1, #10
 8003446:	4621      	mov	r1, r4
 8003448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800344c:	4621      	mov	r1, r4
 800344e:	028a      	lsls	r2, r1, #10
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003458:	2200      	movs	r2, #0
 800345a:	673b      	str	r3, [r7, #112]	@ 0x70
 800345c:	677a      	str	r2, [r7, #116]	@ 0x74
 800345e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003462:	f7fc ff25 	bl	80002b0 <__aeabi_uldivmod>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4613      	mov	r3, r2
 800346c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003470:	4b41      	ldr	r3, [pc, #260]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	3301      	adds	r3, #1
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003492:	e0eb      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003494:	4b38      	ldr	r3, [pc, #224]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800349c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034a0:	4b35      	ldr	r3, [pc, #212]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d06b      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ac:	4b32      	ldr	r3, [pc, #200]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	099b      	lsrs	r3, r3, #6
 80034b2:	2200      	movs	r2, #0
 80034b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034be:	663b      	str	r3, [r7, #96]	@ 0x60
 80034c0:	2300      	movs	r3, #0
 80034c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80034c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80034c8:	4622      	mov	r2, r4
 80034ca:	462b      	mov	r3, r5
 80034cc:	f04f 0000 	mov.w	r0, #0
 80034d0:	f04f 0100 	mov.w	r1, #0
 80034d4:	0159      	lsls	r1, r3, #5
 80034d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034da:	0150      	lsls	r0, r2, #5
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4621      	mov	r1, r4
 80034e2:	1a51      	subs	r1, r2, r1
 80034e4:	61b9      	str	r1, [r7, #24]
 80034e6:	4629      	mov	r1, r5
 80034e8:	eb63 0301 	sbc.w	r3, r3, r1
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80034fa:	4659      	mov	r1, fp
 80034fc:	018b      	lsls	r3, r1, #6
 80034fe:	4651      	mov	r1, sl
 8003500:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003504:	4651      	mov	r1, sl
 8003506:	018a      	lsls	r2, r1, #6
 8003508:	4651      	mov	r1, sl
 800350a:	ebb2 0801 	subs.w	r8, r2, r1
 800350e:	4659      	mov	r1, fp
 8003510:	eb63 0901 	sbc.w	r9, r3, r1
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003520:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003524:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003528:	4690      	mov	r8, r2
 800352a:	4699      	mov	r9, r3
 800352c:	4623      	mov	r3, r4
 800352e:	eb18 0303 	adds.w	r3, r8, r3
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	462b      	mov	r3, r5
 8003536:	eb49 0303 	adc.w	r3, r9, r3
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003548:	4629      	mov	r1, r5
 800354a:	024b      	lsls	r3, r1, #9
 800354c:	4621      	mov	r1, r4
 800354e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003552:	4621      	mov	r1, r4
 8003554:	024a      	lsls	r2, r1, #9
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800355e:	2200      	movs	r2, #0
 8003560:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003562:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003564:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003568:	f7fc fea2 	bl	80002b0 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4613      	mov	r3, r2
 8003572:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003576:	e065      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x420>
 8003578:	40023800 	.word	0x40023800
 800357c:	00f42400 	.word	0x00f42400
 8003580:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003584:	4b3d      	ldr	r3, [pc, #244]	@ (800367c <HAL_RCC_GetSysClockFreq+0x458>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	099b      	lsrs	r3, r3, #6
 800358a:	2200      	movs	r2, #0
 800358c:	4618      	mov	r0, r3
 800358e:	4611      	mov	r1, r2
 8003590:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003594:	653b      	str	r3, [r7, #80]	@ 0x50
 8003596:	2300      	movs	r3, #0
 8003598:	657b      	str	r3, [r7, #84]	@ 0x54
 800359a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800359e:	4642      	mov	r2, r8
 80035a0:	464b      	mov	r3, r9
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f04f 0100 	mov.w	r1, #0
 80035aa:	0159      	lsls	r1, r3, #5
 80035ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b0:	0150      	lsls	r0, r2, #5
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4641      	mov	r1, r8
 80035b8:	1a51      	subs	r1, r2, r1
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	4649      	mov	r1, r9
 80035be:	eb63 0301 	sbc.w	r3, r3, r1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80035d0:	4659      	mov	r1, fp
 80035d2:	018b      	lsls	r3, r1, #6
 80035d4:	4651      	mov	r1, sl
 80035d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035da:	4651      	mov	r1, sl
 80035dc:	018a      	lsls	r2, r1, #6
 80035de:	4651      	mov	r1, sl
 80035e0:	1a54      	subs	r4, r2, r1
 80035e2:	4659      	mov	r1, fp
 80035e4:	eb63 0501 	sbc.w	r5, r3, r1
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	00eb      	lsls	r3, r5, #3
 80035f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035f6:	00e2      	lsls	r2, r4, #3
 80035f8:	4614      	mov	r4, r2
 80035fa:	461d      	mov	r5, r3
 80035fc:	4643      	mov	r3, r8
 80035fe:	18e3      	adds	r3, r4, r3
 8003600:	603b      	str	r3, [r7, #0]
 8003602:	464b      	mov	r3, r9
 8003604:	eb45 0303 	adc.w	r3, r5, r3
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003616:	4629      	mov	r1, r5
 8003618:	028b      	lsls	r3, r1, #10
 800361a:	4621      	mov	r1, r4
 800361c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003620:	4621      	mov	r1, r4
 8003622:	028a      	lsls	r2, r1, #10
 8003624:	4610      	mov	r0, r2
 8003626:	4619      	mov	r1, r3
 8003628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800362c:	2200      	movs	r2, #0
 800362e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003630:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003632:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003636:	f7fc fe3b 	bl	80002b0 <__aeabi_uldivmod>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4613      	mov	r3, r2
 8003640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003644:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <HAL_RCC_GetSysClockFreq+0x458>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0f1b      	lsrs	r3, r3, #28
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003656:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003662:	e003      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003666:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800366a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003670:	4618      	mov	r0, r3
 8003672:	37b8      	adds	r7, #184	@ 0xb8
 8003674:	46bd      	mov	sp, r7
 8003676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	00f42400 	.word	0x00f42400

08003684 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e28d      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8083 	beq.w	80037aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036a4:	4b94      	ldr	r3, [pc, #592]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d019      	beq.n	80036e4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80036b0:	4b91      	ldr	r3, [pc, #580]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 030c 	and.w	r3, r3, #12
        || \
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80036bc:	4b8e      	ldr	r3, [pc, #568]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036c8:	d00c      	beq.n	80036e4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ca:	4b8b      	ldr	r3, [pc, #556]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80036d2:	2b0c      	cmp	r3, #12
 80036d4:	d112      	bne.n	80036fc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036d6:	4b88      	ldr	r3, [pc, #544]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e2:	d10b      	bne.n	80036fc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e4:	4b84      	ldr	r3, [pc, #528]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d05b      	beq.n	80037a8 <HAL_RCC_OscConfig+0x124>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d157      	bne.n	80037a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e25a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003704:	d106      	bne.n	8003714 <HAL_RCC_OscConfig+0x90>
 8003706:	4b7c      	ldr	r3, [pc, #496]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a7b      	ldr	r2, [pc, #492]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e01d      	b.n	8003750 <HAL_RCC_OscConfig+0xcc>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0xb4>
 800371e:	4b76      	ldr	r3, [pc, #472]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a75      	ldr	r2, [pc, #468]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	4b73      	ldr	r3, [pc, #460]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a72      	ldr	r2, [pc, #456]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0xcc>
 8003738:	4b6f      	ldr	r3, [pc, #444]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a6e      	ldr	r2, [pc, #440]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 800373e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b6c      	ldr	r3, [pc, #432]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a6b      	ldr	r2, [pc, #428]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 800374a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800374e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fd ff32 	bl	80015c0 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003760:	f7fd ff2e 	bl	80015c0 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	@ 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e21f      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003772:	4b61      	ldr	r3, [pc, #388]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0xdc>
 800377e:	e014      	b.n	80037aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fd ff1e 	bl	80015c0 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003788:	f7fd ff1a 	bl	80015c0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	@ 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e20b      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379a:	4b57      	ldr	r3, [pc, #348]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x104>
 80037a6:	e000      	b.n	80037aa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d06f      	beq.n	8003896 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037b6:	4b50      	ldr	r3, [pc, #320]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d017      	beq.n	80037f2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80037c2:	4b4d      	ldr	r3, [pc, #308]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
        || \
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d105      	bne.n	80037da <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80037ce:	4b4a      	ldr	r3, [pc, #296]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037da:	4b47      	ldr	r3, [pc, #284]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d11c      	bne.n	8003820 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e6:	4b44      	ldr	r3, [pc, #272]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d116      	bne.n	8003820 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f2:	4b41      	ldr	r3, [pc, #260]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_RCC_OscConfig+0x186>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d001      	beq.n	800380a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1d3      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380a:	4b3b      	ldr	r3, [pc, #236]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4937      	ldr	r1, [pc, #220]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381e:	e03a      	b.n	8003896 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d020      	beq.n	800386a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003828:	4b34      	ldr	r3, [pc, #208]	@ (80038fc <HAL_RCC_OscConfig+0x278>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fd fec7 	bl	80015c0 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003836:	f7fd fec3 	bl	80015c0 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e1b4      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003848:	4b2b      	ldr	r3, [pc, #172]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b28      	ldr	r3, [pc, #160]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4925      	ldr	r1, [pc, #148]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]
 8003868:	e015      	b.n	8003896 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800386a:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <HAL_RCC_OscConfig+0x278>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd fea6 	bl	80015c0 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003878:	f7fd fea2 	bl	80015c0 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e193      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	4b1b      	ldr	r3, [pc, #108]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d036      	beq.n	8003910 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038aa:	4b15      	ldr	r3, [pc, #84]	@ (8003900 <HAL_RCC_OscConfig+0x27c>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fd fe86 	bl	80015c0 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b8:	f7fd fe82 	bl	80015c0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e173      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	4b0b      	ldr	r3, [pc, #44]	@ (80038f8 <HAL_RCC_OscConfig+0x274>)
 80038cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x234>
 80038d6:	e01b      	b.n	8003910 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d8:	4b09      	ldr	r3, [pc, #36]	@ (8003900 <HAL_RCC_OscConfig+0x27c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038de:	f7fd fe6f 	bl	80015c0 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e4:	e00e      	b.n	8003904 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e6:	f7fd fe6b 	bl	80015c0 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d907      	bls.n	8003904 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e15c      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
 80038f8:	40023800 	.word	0x40023800
 80038fc:	42470000 	.word	0x42470000
 8003900:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003904:	4b8a      	ldr	r3, [pc, #552]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1ea      	bne.n	80038e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8097 	beq.w	8003a4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003922:	4b83      	ldr	r3, [pc, #524]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10f      	bne.n	800394e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	4b7f      	ldr	r3, [pc, #508]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003936:	4a7e      	ldr	r2, [pc, #504]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800393c:	6413      	str	r3, [r2, #64]	@ 0x40
 800393e:	4b7c      	ldr	r3, [pc, #496]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394a:	2301      	movs	r3, #1
 800394c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394e:	4b79      	ldr	r3, [pc, #484]	@ (8003b34 <HAL_RCC_OscConfig+0x4b0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d118      	bne.n	800398c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395a:	4b76      	ldr	r3, [pc, #472]	@ (8003b34 <HAL_RCC_OscConfig+0x4b0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a75      	ldr	r2, [pc, #468]	@ (8003b34 <HAL_RCC_OscConfig+0x4b0>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003966:	f7fd fe2b 	bl	80015c0 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396e:	f7fd fe27 	bl	80015c0 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e118      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003980:	4b6c      	ldr	r3, [pc, #432]	@ (8003b34 <HAL_RCC_OscConfig+0x4b0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x31e>
 8003994:	4b66      	ldr	r3, [pc, #408]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	4a65      	ldr	r2, [pc, #404]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6713      	str	r3, [r2, #112]	@ 0x70
 80039a0:	e01c      	b.n	80039dc <HAL_RCC_OscConfig+0x358>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b05      	cmp	r3, #5
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x340>
 80039aa:	4b61      	ldr	r3, [pc, #388]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ae:	4a60      	ldr	r2, [pc, #384]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039b0:	f043 0304 	orr.w	r3, r3, #4
 80039b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80039b6:	4b5e      	ldr	r3, [pc, #376]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ba:	4a5d      	ldr	r2, [pc, #372]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_OscConfig+0x358>
 80039c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c8:	4a59      	ldr	r2, [pc, #356]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80039d0:	4b57      	ldr	r3, [pc, #348]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d4:	4a56      	ldr	r2, [pc, #344]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 80039d6:	f023 0304 	bic.w	r3, r3, #4
 80039da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d015      	beq.n	8003a10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e4:	f7fd fdec 	bl	80015c0 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fd fde8 	bl	80015c0 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e0d7      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a02:	4b4b      	ldr	r3, [pc, #300]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0ee      	beq.n	80039ec <HAL_RCC_OscConfig+0x368>
 8003a0e:	e014      	b.n	8003a3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fd fdd6 	bl	80015c0 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a18:	f7fd fdd2 	bl	80015c0 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0c1      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2e:	4b40      	ldr	r3, [pc, #256]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1ee      	bne.n	8003a18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a40:	4b3b      	ldr	r3, [pc, #236]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	4a3a      	ldr	r2, [pc, #232]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80ad 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a56:	4b36      	ldr	r3, [pc, #216]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d060      	beq.n	8003b24 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d145      	bne.n	8003af6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6a:	4b33      	ldr	r3, [pc, #204]	@ (8003b38 <HAL_RCC_OscConfig+0x4b4>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fd fda6 	bl	80015c0 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a78:	f7fd fda2 	bl	80015c0 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e093      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8a:	4b29      	ldr	r3, [pc, #164]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	019b      	lsls	r3, r3, #6
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	041b      	lsls	r3, r3, #16
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac0:	071b      	lsls	r3, r3, #28
 8003ac2:	491b      	ldr	r1, [pc, #108]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b38 <HAL_RCC_OscConfig+0x4b4>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fd fd77 	bl	80015c0 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7fd fd73 	bl	80015c0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e064      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae8:	4b11      	ldr	r3, [pc, #68]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x452>
 8003af4:	e05c      	b.n	8003bb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af6:	4b10      	ldr	r3, [pc, #64]	@ (8003b38 <HAL_RCC_OscConfig+0x4b4>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fd fd60 	bl	80015c0 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b04:	f7fd fd5c 	bl	80015c0 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e04d      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b16:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <HAL_RCC_OscConfig+0x4ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x480>
 8003b22:	e045      	b.n	8003bb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d107      	bne.n	8003b3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e040      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40007000 	.word	0x40007000
 8003b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bbc <HAL_RCC_OscConfig+0x538>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d030      	beq.n	8003bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d129      	bne.n	8003bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d122      	bne.n	8003bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d119      	bne.n	8003bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	3b01      	subs	r3, #1
 8003b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d10f      	bne.n	8003bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d107      	bne.n	8003bac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800

08003bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e041      	b.n	8003c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d106      	bne.n	8003bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f839 	bl	8003c5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	f000 f9c0 	bl	8003f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d001      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e04e      	b.n	8003d2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a23      	ldr	r2, [pc, #140]	@ (8003d38 <HAL_TIM_Base_Start_IT+0xc4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d022      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x80>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb6:	d01d      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x80>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <HAL_TIM_Base_Start_IT+0xc8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d018      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x80>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d40 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x80>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d44 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x80>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1b      	ldr	r2, [pc, #108]	@ (8003d48 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x80>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a19      	ldr	r2, [pc, #100]	@ (8003d4c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x80>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a18      	ldr	r2, [pc, #96]	@ (8003d50 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d111      	bne.n	8003d18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b06      	cmp	r3, #6
 8003d04:	d010      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d16:	e007      	b.n	8003d28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800
 8003d44:	40000c00 	.word	0x40000c00
 8003d48:	40010400 	.word	0x40010400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40001800 	.word	0x40001800

08003d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d020      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01b      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0202 	mvn.w	r2, #2
 8003d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f8d2 	bl	8003f48 <HAL_TIM_IC_CaptureCallback>
 8003da4:	e005      	b.n	8003db2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f8c4 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f8d5 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d020      	beq.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01b      	beq.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0204 	mvn.w	r2, #4
 8003dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f8ac 	bl	8003f48 <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f89e 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f8af 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d020      	beq.n	8003e50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01b      	beq.n	8003e50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0208 	mvn.w	r2, #8
 8003e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2204      	movs	r2, #4
 8003e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f886 	bl	8003f48 <HAL_TIM_IC_CaptureCallback>
 8003e3c:	e005      	b.n	8003e4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f878 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f889 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d020      	beq.n	8003e9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01b      	beq.n	8003e9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0210 	mvn.w	r2, #16
 8003e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2208      	movs	r2, #8
 8003e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f860 	bl	8003f48 <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f852 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f863 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00c      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0201 	mvn.w	r2, #1
 8003eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd f874 	bl	8000fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00c      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f906 	bl	80040f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f834 	bl	8003f70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00c      	beq.n	8003f2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0220 	mvn.w	r2, #32
 8003f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f8d8 	bl	80040dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a46      	ldr	r2, [pc, #280]	@ (80040b0 <TIM_Base_SetConfig+0x12c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa2:	d00f      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a43      	ldr	r2, [pc, #268]	@ (80040b4 <TIM_Base_SetConfig+0x130>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a42      	ldr	r2, [pc, #264]	@ (80040b8 <TIM_Base_SetConfig+0x134>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a41      	ldr	r2, [pc, #260]	@ (80040bc <TIM_Base_SetConfig+0x138>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a40      	ldr	r2, [pc, #256]	@ (80040c0 <TIM_Base_SetConfig+0x13c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d108      	bne.n	8003fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a35      	ldr	r2, [pc, #212]	@ (80040b0 <TIM_Base_SetConfig+0x12c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02b      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe4:	d027      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a32      	ldr	r2, [pc, #200]	@ (80040b4 <TIM_Base_SetConfig+0x130>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d023      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a31      	ldr	r2, [pc, #196]	@ (80040b8 <TIM_Base_SetConfig+0x134>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01f      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a30      	ldr	r2, [pc, #192]	@ (80040bc <TIM_Base_SetConfig+0x138>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01b      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2f      	ldr	r2, [pc, #188]	@ (80040c0 <TIM_Base_SetConfig+0x13c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d017      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2e      	ldr	r2, [pc, #184]	@ (80040c4 <TIM_Base_SetConfig+0x140>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a2d      	ldr	r2, [pc, #180]	@ (80040c8 <TIM_Base_SetConfig+0x144>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00f      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2c      	ldr	r2, [pc, #176]	@ (80040cc <TIM_Base_SetConfig+0x148>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00b      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2b      	ldr	r2, [pc, #172]	@ (80040d0 <TIM_Base_SetConfig+0x14c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2a      	ldr	r2, [pc, #168]	@ (80040d4 <TIM_Base_SetConfig+0x150>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d003      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a29      	ldr	r2, [pc, #164]	@ (80040d8 <TIM_Base_SetConfig+0x154>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d108      	bne.n	8004048 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800403c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a10      	ldr	r2, [pc, #64]	@ (80040b0 <TIM_Base_SetConfig+0x12c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d003      	beq.n	800407c <TIM_Base_SetConfig+0xf8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a12      	ldr	r2, [pc, #72]	@ (80040c0 <TIM_Base_SetConfig+0x13c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d103      	bne.n	8004084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f023 0201 	bic.w	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	611a      	str	r2, [r3, #16]
  }
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40000400 	.word	0x40000400
 80040b8:	40000800 	.word	0x40000800
 80040bc:	40000c00 	.word	0x40000c00
 80040c0:	40010400 	.word	0x40010400
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40014400 	.word	0x40014400
 80040cc:	40014800 	.word	0x40014800
 80040d0:	40001800 	.word	0x40001800
 80040d4:	40001c00 	.word	0x40001c00
 80040d8:	40002000 	.word	0x40002000

080040dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e042      	b.n	800419c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fd f83e 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2224      	movs	r2, #36	@ 0x24
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f82b 	bl	80041a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800415c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695a      	ldr	r2, [r3, #20]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800416c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800417c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a8:	b0c0      	sub	sp, #256	@ 0x100
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	68d9      	ldr	r1, [r3, #12]
 80041c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	ea40 0301 	orr.w	r3, r0, r1
 80041cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	431a      	orrs	r2, r3
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041fc:	f021 010c 	bic.w	r1, r1, #12
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800420a:	430b      	orrs	r3, r1
 800420c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800420e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421e:	6999      	ldr	r1, [r3, #24]
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	ea40 0301 	orr.w	r3, r0, r1
 800422a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b8f      	ldr	r3, [pc, #572]	@ (8004470 <UART_SetConfig+0x2cc>)
 8004234:	429a      	cmp	r2, r3
 8004236:	d005      	beq.n	8004244 <UART_SetConfig+0xa0>
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b8d      	ldr	r3, [pc, #564]	@ (8004474 <UART_SetConfig+0x2d0>)
 8004240:	429a      	cmp	r2, r3
 8004242:	d104      	bne.n	800424e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004244:	f7fe ffa8 	bl	8003198 <HAL_RCC_GetPCLK2Freq>
 8004248:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800424c:	e003      	b.n	8004256 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800424e:	f7fe ff8f 	bl	8003170 <HAL_RCC_GetPCLK1Freq>
 8004252:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004260:	f040 810c 	bne.w	800447c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004268:	2200      	movs	r2, #0
 800426a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800426e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004272:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004276:	4622      	mov	r2, r4
 8004278:	462b      	mov	r3, r5
 800427a:	1891      	adds	r1, r2, r2
 800427c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800427e:	415b      	adcs	r3, r3
 8004280:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004282:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004286:	4621      	mov	r1, r4
 8004288:	eb12 0801 	adds.w	r8, r2, r1
 800428c:	4629      	mov	r1, r5
 800428e:	eb43 0901 	adc.w	r9, r3, r1
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800429e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042a6:	4690      	mov	r8, r2
 80042a8:	4699      	mov	r9, r3
 80042aa:	4623      	mov	r3, r4
 80042ac:	eb18 0303 	adds.w	r3, r8, r3
 80042b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042b4:	462b      	mov	r3, r5
 80042b6:	eb49 0303 	adc.w	r3, r9, r3
 80042ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042d2:	460b      	mov	r3, r1
 80042d4:	18db      	adds	r3, r3, r3
 80042d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80042d8:	4613      	mov	r3, r2
 80042da:	eb42 0303 	adc.w	r3, r2, r3
 80042de:	657b      	str	r3, [r7, #84]	@ 0x54
 80042e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042e8:	f7fb ffe2 	bl	80002b0 <__aeabi_uldivmod>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4b61      	ldr	r3, [pc, #388]	@ (8004478 <UART_SetConfig+0x2d4>)
 80042f2:	fba3 2302 	umull	r2, r3, r3, r2
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	011c      	lsls	r4, r3, #4
 80042fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042fe:	2200      	movs	r2, #0
 8004300:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004304:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004308:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800430c:	4642      	mov	r2, r8
 800430e:	464b      	mov	r3, r9
 8004310:	1891      	adds	r1, r2, r2
 8004312:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004314:	415b      	adcs	r3, r3
 8004316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004318:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800431c:	4641      	mov	r1, r8
 800431e:	eb12 0a01 	adds.w	sl, r2, r1
 8004322:	4649      	mov	r1, r9
 8004324:	eb43 0b01 	adc.w	fp, r3, r1
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004334:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800433c:	4692      	mov	sl, r2
 800433e:	469b      	mov	fp, r3
 8004340:	4643      	mov	r3, r8
 8004342:	eb1a 0303 	adds.w	r3, sl, r3
 8004346:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800434a:	464b      	mov	r3, r9
 800434c:	eb4b 0303 	adc.w	r3, fp, r3
 8004350:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004360:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004364:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004368:	460b      	mov	r3, r1
 800436a:	18db      	adds	r3, r3, r3
 800436c:	643b      	str	r3, [r7, #64]	@ 0x40
 800436e:	4613      	mov	r3, r2
 8004370:	eb42 0303 	adc.w	r3, r2, r3
 8004374:	647b      	str	r3, [r7, #68]	@ 0x44
 8004376:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800437a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800437e:	f7fb ff97 	bl	80002b0 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4611      	mov	r1, r2
 8004388:	4b3b      	ldr	r3, [pc, #236]	@ (8004478 <UART_SetConfig+0x2d4>)
 800438a:	fba3 2301 	umull	r2, r3, r3, r1
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	2264      	movs	r2, #100	@ 0x64
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	1acb      	subs	r3, r1, r3
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800439e:	4b36      	ldr	r3, [pc, #216]	@ (8004478 <UART_SetConfig+0x2d4>)
 80043a0:	fba3 2302 	umull	r2, r3, r3, r2
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043ac:	441c      	add	r4, r3
 80043ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043c0:	4642      	mov	r2, r8
 80043c2:	464b      	mov	r3, r9
 80043c4:	1891      	adds	r1, r2, r2
 80043c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043c8:	415b      	adcs	r3, r3
 80043ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043d0:	4641      	mov	r1, r8
 80043d2:	1851      	adds	r1, r2, r1
 80043d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80043d6:	4649      	mov	r1, r9
 80043d8:	414b      	adcs	r3, r1
 80043da:	637b      	str	r3, [r7, #52]	@ 0x34
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043e8:	4659      	mov	r1, fp
 80043ea:	00cb      	lsls	r3, r1, #3
 80043ec:	4651      	mov	r1, sl
 80043ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f2:	4651      	mov	r1, sl
 80043f4:	00ca      	lsls	r2, r1, #3
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	4603      	mov	r3, r0
 80043fc:	4642      	mov	r2, r8
 80043fe:	189b      	adds	r3, r3, r2
 8004400:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004404:	464b      	mov	r3, r9
 8004406:	460a      	mov	r2, r1
 8004408:	eb42 0303 	adc.w	r3, r2, r3
 800440c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800441c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004420:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004424:	460b      	mov	r3, r1
 8004426:	18db      	adds	r3, r3, r3
 8004428:	62bb      	str	r3, [r7, #40]	@ 0x28
 800442a:	4613      	mov	r3, r2
 800442c:	eb42 0303 	adc.w	r3, r2, r3
 8004430:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004432:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004436:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800443a:	f7fb ff39 	bl	80002b0 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4b0d      	ldr	r3, [pc, #52]	@ (8004478 <UART_SetConfig+0x2d4>)
 8004444:	fba3 1302 	umull	r1, r3, r3, r2
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	2164      	movs	r1, #100	@ 0x64
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	3332      	adds	r3, #50	@ 0x32
 8004456:	4a08      	ldr	r2, [pc, #32]	@ (8004478 <UART_SetConfig+0x2d4>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	f003 0207 	and.w	r2, r3, #7
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4422      	add	r2, r4
 800446a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800446c:	e106      	b.n	800467c <UART_SetConfig+0x4d8>
 800446e:	bf00      	nop
 8004470:	40011000 	.word	0x40011000
 8004474:	40011400 	.word	0x40011400
 8004478:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800447c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004480:	2200      	movs	r2, #0
 8004482:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004486:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800448a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800448e:	4642      	mov	r2, r8
 8004490:	464b      	mov	r3, r9
 8004492:	1891      	adds	r1, r2, r2
 8004494:	6239      	str	r1, [r7, #32]
 8004496:	415b      	adcs	r3, r3
 8004498:	627b      	str	r3, [r7, #36]	@ 0x24
 800449a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800449e:	4641      	mov	r1, r8
 80044a0:	1854      	adds	r4, r2, r1
 80044a2:	4649      	mov	r1, r9
 80044a4:	eb43 0501 	adc.w	r5, r3, r1
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	00eb      	lsls	r3, r5, #3
 80044b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044b6:	00e2      	lsls	r2, r4, #3
 80044b8:	4614      	mov	r4, r2
 80044ba:	461d      	mov	r5, r3
 80044bc:	4643      	mov	r3, r8
 80044be:	18e3      	adds	r3, r4, r3
 80044c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044c4:	464b      	mov	r3, r9
 80044c6:	eb45 0303 	adc.w	r3, r5, r3
 80044ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044ea:	4629      	mov	r1, r5
 80044ec:	008b      	lsls	r3, r1, #2
 80044ee:	4621      	mov	r1, r4
 80044f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044f4:	4621      	mov	r1, r4
 80044f6:	008a      	lsls	r2, r1, #2
 80044f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044fc:	f7fb fed8 	bl	80002b0 <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4b60      	ldr	r3, [pc, #384]	@ (8004688 <UART_SetConfig+0x4e4>)
 8004506:	fba3 2302 	umull	r2, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	011c      	lsls	r4, r3, #4
 800450e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004512:	2200      	movs	r2, #0
 8004514:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004518:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800451c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004520:	4642      	mov	r2, r8
 8004522:	464b      	mov	r3, r9
 8004524:	1891      	adds	r1, r2, r2
 8004526:	61b9      	str	r1, [r7, #24]
 8004528:	415b      	adcs	r3, r3
 800452a:	61fb      	str	r3, [r7, #28]
 800452c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004530:	4641      	mov	r1, r8
 8004532:	1851      	adds	r1, r2, r1
 8004534:	6139      	str	r1, [r7, #16]
 8004536:	4649      	mov	r1, r9
 8004538:	414b      	adcs	r3, r1
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004548:	4659      	mov	r1, fp
 800454a:	00cb      	lsls	r3, r1, #3
 800454c:	4651      	mov	r1, sl
 800454e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004552:	4651      	mov	r1, sl
 8004554:	00ca      	lsls	r2, r1, #3
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	4603      	mov	r3, r0
 800455c:	4642      	mov	r2, r8
 800455e:	189b      	adds	r3, r3, r2
 8004560:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004564:	464b      	mov	r3, r9
 8004566:	460a      	mov	r2, r1
 8004568:	eb42 0303 	adc.w	r3, r2, r3
 800456c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	67bb      	str	r3, [r7, #120]	@ 0x78
 800457a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004588:	4649      	mov	r1, r9
 800458a:	008b      	lsls	r3, r1, #2
 800458c:	4641      	mov	r1, r8
 800458e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004592:	4641      	mov	r1, r8
 8004594:	008a      	lsls	r2, r1, #2
 8004596:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800459a:	f7fb fe89 	bl	80002b0 <__aeabi_uldivmod>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4611      	mov	r1, r2
 80045a4:	4b38      	ldr	r3, [pc, #224]	@ (8004688 <UART_SetConfig+0x4e4>)
 80045a6:	fba3 2301 	umull	r2, r3, r3, r1
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	2264      	movs	r2, #100	@ 0x64
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	1acb      	subs	r3, r1, r3
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	3332      	adds	r3, #50	@ 0x32
 80045b8:	4a33      	ldr	r2, [pc, #204]	@ (8004688 <UART_SetConfig+0x4e4>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045c4:	441c      	add	r4, r3
 80045c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ca:	2200      	movs	r2, #0
 80045cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80045ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80045d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045d4:	4642      	mov	r2, r8
 80045d6:	464b      	mov	r3, r9
 80045d8:	1891      	adds	r1, r2, r2
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	415b      	adcs	r3, r3
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045e4:	4641      	mov	r1, r8
 80045e6:	1851      	adds	r1, r2, r1
 80045e8:	6039      	str	r1, [r7, #0]
 80045ea:	4649      	mov	r1, r9
 80045ec:	414b      	adcs	r3, r1
 80045ee:	607b      	str	r3, [r7, #4]
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045fc:	4659      	mov	r1, fp
 80045fe:	00cb      	lsls	r3, r1, #3
 8004600:	4651      	mov	r1, sl
 8004602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004606:	4651      	mov	r1, sl
 8004608:	00ca      	lsls	r2, r1, #3
 800460a:	4610      	mov	r0, r2
 800460c:	4619      	mov	r1, r3
 800460e:	4603      	mov	r3, r0
 8004610:	4642      	mov	r2, r8
 8004612:	189b      	adds	r3, r3, r2
 8004614:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004616:	464b      	mov	r3, r9
 8004618:	460a      	mov	r2, r1
 800461a:	eb42 0303 	adc.w	r3, r2, r3
 800461e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	663b      	str	r3, [r7, #96]	@ 0x60
 800462a:	667a      	str	r2, [r7, #100]	@ 0x64
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004638:	4649      	mov	r1, r9
 800463a:	008b      	lsls	r3, r1, #2
 800463c:	4641      	mov	r1, r8
 800463e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004642:	4641      	mov	r1, r8
 8004644:	008a      	lsls	r2, r1, #2
 8004646:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800464a:	f7fb fe31 	bl	80002b0 <__aeabi_uldivmod>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <UART_SetConfig+0x4e4>)
 8004654:	fba3 1302 	umull	r1, r3, r3, r2
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	2164      	movs	r1, #100	@ 0x64
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	3332      	adds	r3, #50	@ 0x32
 8004666:	4a08      	ldr	r2, [pc, #32]	@ (8004688 <UART_SetConfig+0x4e4>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	f003 020f 	and.w	r2, r3, #15
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4422      	add	r2, r4
 800467a:	609a      	str	r2, [r3, #8]
}
 800467c:	bf00      	nop
 800467e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004682:	46bd      	mov	sp, r7
 8004684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004688:	51eb851f 	.word	0x51eb851f

0800468c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800469a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800469e:	2b84      	cmp	r3, #132	@ 0x84
 80046a0:	d005      	beq.n	80046ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80046a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4413      	add	r3, r2
 80046aa:	3303      	adds	r3, #3
 80046ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80046ae:	68fb      	ldr	r3, [r7, #12]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80046c0:	f000 fafc 	bl	8004cbc <vTaskStartScheduler>
  
  return osOK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	bd80      	pop	{r7, pc}

080046ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80046ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046cc:	b089      	sub	sp, #36	@ 0x24
 80046ce:	af04      	add	r7, sp, #16
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d020      	beq.n	800471e <osThreadCreate+0x54>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01c      	beq.n	800471e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685c      	ldr	r4, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691e      	ldr	r6, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff ffc8 	bl	800468c <makeFreeRtosPriority>
 80046fc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004706:	9202      	str	r2, [sp, #8]
 8004708:	9301      	str	r3, [sp, #4]
 800470a:	9100      	str	r1, [sp, #0]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	4632      	mov	r2, r6
 8004710:	4629      	mov	r1, r5
 8004712:	4620      	mov	r0, r4
 8004714:	f000 f8ed 	bl	80048f2 <xTaskCreateStatic>
 8004718:	4603      	mov	r3, r0
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	e01c      	b.n	8004758 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685c      	ldr	r4, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800472a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff ffaa 	bl	800468c <makeFreeRtosPriority>
 8004738:	4602      	mov	r2, r0
 800473a:	f107 030c 	add.w	r3, r7, #12
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	9200      	str	r2, [sp, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	4632      	mov	r2, r6
 8004746:	4629      	mov	r1, r5
 8004748:	4620      	mov	r0, r4
 800474a:	f000 f932 	bl	80049b2 <xTaskCreate>
 800474e:	4603      	mov	r3, r0
 8004750:	2b01      	cmp	r3, #1
 8004752:	d001      	beq.n	8004758 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004758:	68fb      	ldr	r3, [r7, #12]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004762 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <osDelay+0x16>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	e000      	b.n	800477a <osDelay+0x18>
 8004778:	2301      	movs	r3, #1
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fa68 	bl	8004c50 <vTaskDelay>
  
  return osOK;
 8004780:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f103 0208 	add.w	r2, r3, #8
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f04f 32ff 	mov.w	r2, #4294967295
 80047a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f103 0208 	add.w	r2, r3, #8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f103 0208 	add.w	r2, r3, #8
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	601a      	str	r2, [r3, #0]
}
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004842:	d103      	bne.n	800484c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	e00c      	b.n	8004866 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3308      	adds	r3, #8
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e002      	b.n	800485a <vListInsert+0x2e>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	429a      	cmp	r2, r3
 8004864:	d2f6      	bcs.n	8004854 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	601a      	str	r2, [r3, #0]
}
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6892      	ldr	r2, [r2, #8]
 80048b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6852      	ldr	r2, [r2, #4]
 80048be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d103      	bne.n	80048d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	1e5a      	subs	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b08e      	sub	sp, #56	@ 0x38
 80048f6:	af04      	add	r7, sp, #16
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10b      	bne.n	800491e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	e7fd      	b.n	800491a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800491e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10b      	bne.n	800493c <xTaskCreateStatic+0x4a>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	61fb      	str	r3, [r7, #28]
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	e7fd      	b.n	8004938 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800493c:	23a0      	movs	r3, #160	@ 0xa0
 800493e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2ba0      	cmp	r3, #160	@ 0xa0
 8004944:	d00b      	beq.n	800495e <xTaskCreateStatic+0x6c>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	61bb      	str	r3, [r7, #24]
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	e7fd      	b.n	800495a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800495e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01e      	beq.n	80049a4 <xTaskCreateStatic+0xb2>
 8004966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01b      	beq.n	80049a4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800496c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004972:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004974:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	2202      	movs	r2, #2
 800497a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800497e:	2300      	movs	r3, #0
 8004980:	9303      	str	r3, [sp, #12]
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	9302      	str	r3, [sp, #8]
 8004986:	f107 0314 	add.w	r3, r7, #20
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f850 	bl	8004a3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800499c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800499e:	f000 f8ed 	bl	8004b7c <prvAddNewTaskToReadyList>
 80049a2:	e001      	b.n	80049a8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80049a8:	697b      	ldr	r3, [r7, #20]
	}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3728      	adds	r7, #40	@ 0x28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b08c      	sub	sp, #48	@ 0x30
 80049b6:	af04      	add	r7, sp, #16
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	603b      	str	r3, [r7, #0]
 80049be:	4613      	mov	r3, r2
 80049c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fefe 	bl	80057c8 <pvPortMalloc>
 80049cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00e      	beq.n	80049f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049d4:	20a0      	movs	r0, #160	@ 0xa0
 80049d6:	f000 fef7 	bl	80057c8 <pvPortMalloc>
 80049da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80049e8:	e005      	b.n	80049f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049ea:	6978      	ldr	r0, [r7, #20]
 80049ec:	f000 ffba 	bl	8005964 <vPortFree>
 80049f0:	e001      	b.n	80049f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d017      	beq.n	8004a2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a04:	88fa      	ldrh	r2, [r7, #6]
 8004a06:	2300      	movs	r3, #0
 8004a08:	9303      	str	r3, [sp, #12]
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	9302      	str	r3, [sp, #8]
 8004a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f80e 	bl	8004a3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a20:	69f8      	ldr	r0, [r7, #28]
 8004a22:	f000 f8ab 	bl	8004b7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a26:	2301      	movs	r3, #1
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	e002      	b.n	8004a32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a32:	69bb      	ldr	r3, [r7, #24]
	}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a54:	3b01      	subs	r3, #1
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f023 0307 	bic.w	r3, r3, #7
 8004a62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	617b      	str	r3, [r7, #20]
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	e7fd      	b.n	8004a82 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01f      	beq.n	8004acc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	e012      	b.n	8004ab8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	7819      	ldrb	r1, [r3, #0]
 8004a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3334      	adds	r3, #52	@ 0x34
 8004aa2:	460a      	mov	r2, r1
 8004aa4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d006      	beq.n	8004ac0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b0f      	cmp	r3, #15
 8004abc:	d9e9      	bls.n	8004a92 <prvInitialiseNewTask+0x56>
 8004abe:	e000      	b.n	8004ac2 <prvInitialiseNewTask+0x86>
			{
				break;
 8004ac0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004aca:	e003      	b.n	8004ad4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	d901      	bls.n	8004ade <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ada:	2306      	movs	r3, #6
 8004adc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ae8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	2200      	movs	r2, #0
 8004aee:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af2:	3304      	adds	r3, #4
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fe68 	bl	80047ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afc:	3318      	adds	r3, #24
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff fe63 	bl	80047ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0c:	f1c3 0207 	rsb	r2, r3, #7
 8004b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b18:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2c:	334c      	adds	r3, #76	@ 0x4c
 8004b2e:	224c      	movs	r2, #76	@ 0x4c
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 f96d 	bl	8005e12 <memset>
 8004b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8004b70 <prvInitialiseNewTask+0x134>)
 8004b3c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b40:	4a0c      	ldr	r2, [pc, #48]	@ (8004b74 <prvInitialiseNewTask+0x138>)
 8004b42:	655a      	str	r2, [r3, #84]	@ 0x54
 8004b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b46:	4a0c      	ldr	r2, [pc, #48]	@ (8004b78 <prvInitialiseNewTask+0x13c>)
 8004b48:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	68f9      	ldr	r1, [r7, #12]
 8004b4e:	69b8      	ldr	r0, [r7, #24]
 8004b50:	f000 fc2a 	bl	80053a8 <pxPortInitialiseStack>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b66:	bf00      	nop
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	2000422c 	.word	0x2000422c
 8004b74:	20004294 	.word	0x20004294
 8004b78:	200042fc 	.word	0x200042fc

08004b7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b84:	f000 fd40 	bl	8005608 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b88:	4b2a      	ldr	r3, [pc, #168]	@ (8004c34 <prvAddNewTaskToReadyList+0xb8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	4a29      	ldr	r2, [pc, #164]	@ (8004c34 <prvAddNewTaskToReadyList+0xb8>)
 8004b90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b92:	4b29      	ldr	r3, [pc, #164]	@ (8004c38 <prvAddNewTaskToReadyList+0xbc>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b9a:	4a27      	ldr	r2, [pc, #156]	@ (8004c38 <prvAddNewTaskToReadyList+0xbc>)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ba0:	4b24      	ldr	r3, [pc, #144]	@ (8004c34 <prvAddNewTaskToReadyList+0xb8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d110      	bne.n	8004bca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ba8:	f000 fad4 	bl	8005154 <prvInitialiseTaskLists>
 8004bac:	e00d      	b.n	8004bca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bae:	4b23      	ldr	r3, [pc, #140]	@ (8004c3c <prvAddNewTaskToReadyList+0xc0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d109      	bne.n	8004bca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004bb6:	4b20      	ldr	r3, [pc, #128]	@ (8004c38 <prvAddNewTaskToReadyList+0xbc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d802      	bhi.n	8004bca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c38 <prvAddNewTaskToReadyList+0xbc>)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004bca:	4b1d      	ldr	r3, [pc, #116]	@ (8004c40 <prvAddNewTaskToReadyList+0xc4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c40 <prvAddNewTaskToReadyList+0xc4>)
 8004bd2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	2201      	movs	r2, #1
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	4b19      	ldr	r3, [pc, #100]	@ (8004c44 <prvAddNewTaskToReadyList+0xc8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	4a18      	ldr	r2, [pc, #96]	@ (8004c44 <prvAddNewTaskToReadyList+0xc8>)
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4a15      	ldr	r2, [pc, #84]	@ (8004c48 <prvAddNewTaskToReadyList+0xcc>)
 8004bf4:	441a      	add	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	f7ff fdf1 	bl	80047e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c02:	f000 fd33 	bl	800566c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c06:	4b0d      	ldr	r3, [pc, #52]	@ (8004c3c <prvAddNewTaskToReadyList+0xc0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00e      	beq.n	8004c2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <prvAddNewTaskToReadyList+0xbc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d207      	bcs.n	8004c2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <prvAddNewTaskToReadyList+0xd0>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	200005d8 	.word	0x200005d8
 8004c38:	200004d8 	.word	0x200004d8
 8004c3c:	200005e4 	.word	0x200005e4
 8004c40:	200005f4 	.word	0x200005f4
 8004c44:	200005e0 	.word	0x200005e0
 8004c48:	200004dc 	.word	0x200004dc
 8004c4c:	e000ed04 	.word	0xe000ed04

08004c50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d018      	beq.n	8004c94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c62:	4b14      	ldr	r3, [pc, #80]	@ (8004cb4 <vTaskDelay+0x64>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00b      	beq.n	8004c82 <vTaskDelay+0x32>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60bb      	str	r3, [r7, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	e7fd      	b.n	8004c7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c82:	f000 f885 	bl	8004d90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c86:	2100      	movs	r1, #0
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fb27 	bl	80052dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c8e:	f000 f88d 	bl	8004dac <xTaskResumeAll>
 8004c92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d107      	bne.n	8004caa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004c9a:	4b07      	ldr	r3, [pc, #28]	@ (8004cb8 <vTaskDelay+0x68>)
 8004c9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000600 	.word	0x20000600
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08a      	sub	sp, #40	@ 0x28
 8004cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cca:	463a      	mov	r2, r7
 8004ccc:	1d39      	adds	r1, r7, #4
 8004cce:	f107 0308 	add.w	r3, r7, #8
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fb fd68 	bl	80007a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cd8:	6839      	ldr	r1, [r7, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	9202      	str	r2, [sp, #8]
 8004ce0:	9301      	str	r3, [sp, #4]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	460a      	mov	r2, r1
 8004cea:	4921      	ldr	r1, [pc, #132]	@ (8004d70 <vTaskStartScheduler+0xb4>)
 8004cec:	4821      	ldr	r0, [pc, #132]	@ (8004d74 <vTaskStartScheduler+0xb8>)
 8004cee:	f7ff fe00 	bl	80048f2 <xTaskCreateStatic>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4a20      	ldr	r2, [pc, #128]	@ (8004d78 <vTaskStartScheduler+0xbc>)
 8004cf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8004d78 <vTaskStartScheduler+0xbc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d00:	2301      	movs	r3, #1
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e001      	b.n	8004d0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d11b      	bne.n	8004d48 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	613b      	str	r3, [r7, #16]
}
 8004d22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d24:	4b15      	ldr	r3, [pc, #84]	@ (8004d7c <vTaskStartScheduler+0xc0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	334c      	adds	r3, #76	@ 0x4c
 8004d2a:	4a15      	ldr	r2, [pc, #84]	@ (8004d80 <vTaskStartScheduler+0xc4>)
 8004d2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d2e:	4b15      	ldr	r3, [pc, #84]	@ (8004d84 <vTaskStartScheduler+0xc8>)
 8004d30:	f04f 32ff 	mov.w	r2, #4294967295
 8004d34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d36:	4b14      	ldr	r3, [pc, #80]	@ (8004d88 <vTaskStartScheduler+0xcc>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d3c:	4b13      	ldr	r3, [pc, #76]	@ (8004d8c <vTaskStartScheduler+0xd0>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d42:	f000 fbbd 	bl	80054c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d46:	e00f      	b.n	8004d68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d10b      	bne.n	8004d68 <vTaskStartScheduler+0xac>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	60fb      	str	r3, [r7, #12]
}
 8004d62:	bf00      	nop
 8004d64:	bf00      	nop
 8004d66:	e7fd      	b.n	8004d64 <vTaskStartScheduler+0xa8>
}
 8004d68:	bf00      	nop
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	08006f78 	.word	0x08006f78
 8004d74:	08005125 	.word	0x08005125
 8004d78:	200005fc 	.word	0x200005fc
 8004d7c:	200004d8 	.word	0x200004d8
 8004d80:	2000001c 	.word	0x2000001c
 8004d84:	200005f8 	.word	0x200005f8
 8004d88:	200005e4 	.word	0x200005e4
 8004d8c:	200005dc 	.word	0x200005dc

08004d90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d94:	4b04      	ldr	r3, [pc, #16]	@ (8004da8 <vTaskSuspendAll+0x18>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	4a03      	ldr	r2, [pc, #12]	@ (8004da8 <vTaskSuspendAll+0x18>)
 8004d9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d9e:	bf00      	nop
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	20000600 	.word	0x20000600

08004dac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dba:	4b42      	ldr	r3, [pc, #264]	@ (8004ec4 <xTaskResumeAll+0x118>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10b      	bne.n	8004dda <xTaskResumeAll+0x2e>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	603b      	str	r3, [r7, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	e7fd      	b.n	8004dd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004dda:	f000 fc15 	bl	8005608 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dde:	4b39      	ldr	r3, [pc, #228]	@ (8004ec4 <xTaskResumeAll+0x118>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	4a37      	ldr	r2, [pc, #220]	@ (8004ec4 <xTaskResumeAll+0x118>)
 8004de6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004de8:	4b36      	ldr	r3, [pc, #216]	@ (8004ec4 <xTaskResumeAll+0x118>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d161      	bne.n	8004eb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004df0:	4b35      	ldr	r3, [pc, #212]	@ (8004ec8 <xTaskResumeAll+0x11c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d05d      	beq.n	8004eb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004df8:	e02e      	b.n	8004e58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dfa:	4b34      	ldr	r3, [pc, #208]	@ (8004ecc <xTaskResumeAll+0x120>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3318      	adds	r3, #24
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fd49 	bl	800489e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fd44 	bl	800489e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ed0 <xTaskResumeAll+0x124>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed0 <xTaskResumeAll+0x124>)
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4a27      	ldr	r2, [pc, #156]	@ (8004ed4 <xTaskResumeAll+0x128>)
 8004e36:	441a      	add	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f7ff fcd0 	bl	80047e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e48:	4b23      	ldr	r3, [pc, #140]	@ (8004ed8 <xTaskResumeAll+0x12c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e52:	4b22      	ldr	r3, [pc, #136]	@ (8004edc <xTaskResumeAll+0x130>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e58:	4b1c      	ldr	r3, [pc, #112]	@ (8004ecc <xTaskResumeAll+0x120>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1cc      	bne.n	8004dfa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e66:	f000 fa19 	bl	800529c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee0 <xTaskResumeAll+0x134>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d010      	beq.n	8004e98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e76:	f000 f837 	bl	8004ee8 <xTaskIncrementTick>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e80:	4b16      	ldr	r3, [pc, #88]	@ (8004edc <xTaskResumeAll+0x130>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1f1      	bne.n	8004e76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e92:	4b13      	ldr	r3, [pc, #76]	@ (8004ee0 <xTaskResumeAll+0x134>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e98:	4b10      	ldr	r3, [pc, #64]	@ (8004edc <xTaskResumeAll+0x130>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d009      	beq.n	8004eb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee4 <xTaskResumeAll+0x138>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004eb4:	f000 fbda 	bl	800566c <vPortExitCritical>

	return xAlreadyYielded;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000600 	.word	0x20000600
 8004ec8:	200005d8 	.word	0x200005d8
 8004ecc:	20000598 	.word	0x20000598
 8004ed0:	200005e0 	.word	0x200005e0
 8004ed4:	200004dc 	.word	0x200004dc
 8004ed8:	200004d8 	.word	0x200004d8
 8004edc:	200005ec 	.word	0x200005ec
 8004ee0:	200005e8 	.word	0x200005e8
 8004ee4:	e000ed04 	.word	0xe000ed04

08004ee8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ef2:	4b4f      	ldr	r3, [pc, #316]	@ (8005030 <xTaskIncrementTick+0x148>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f040 808f 	bne.w	800501a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004efc:	4b4d      	ldr	r3, [pc, #308]	@ (8005034 <xTaskIncrementTick+0x14c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3301      	adds	r3, #1
 8004f02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f04:	4a4b      	ldr	r2, [pc, #300]	@ (8005034 <xTaskIncrementTick+0x14c>)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d121      	bne.n	8004f54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f10:	4b49      	ldr	r3, [pc, #292]	@ (8005038 <xTaskIncrementTick+0x150>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	603b      	str	r3, [r7, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <xTaskIncrementTick+0x46>
 8004f32:	4b41      	ldr	r3, [pc, #260]	@ (8005038 <xTaskIncrementTick+0x150>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	4b40      	ldr	r3, [pc, #256]	@ (800503c <xTaskIncrementTick+0x154>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a3e      	ldr	r2, [pc, #248]	@ (8005038 <xTaskIncrementTick+0x150>)
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	4a3e      	ldr	r2, [pc, #248]	@ (800503c <xTaskIncrementTick+0x154>)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	4b3e      	ldr	r3, [pc, #248]	@ (8005040 <xTaskIncrementTick+0x158>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005040 <xTaskIncrementTick+0x158>)
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	f000 f9a4 	bl	800529c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f54:	4b3b      	ldr	r3, [pc, #236]	@ (8005044 <xTaskIncrementTick+0x15c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d348      	bcc.n	8004ff0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f5e:	4b36      	ldr	r3, [pc, #216]	@ (8005038 <xTaskIncrementTick+0x150>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d104      	bne.n	8004f72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f68:	4b36      	ldr	r3, [pc, #216]	@ (8005044 <xTaskIncrementTick+0x15c>)
 8004f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6e:	601a      	str	r2, [r3, #0]
					break;
 8004f70:	e03e      	b.n	8004ff0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f72:	4b31      	ldr	r3, [pc, #196]	@ (8005038 <xTaskIncrementTick+0x150>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d203      	bcs.n	8004f92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f8a:	4a2e      	ldr	r2, [pc, #184]	@ (8005044 <xTaskIncrementTick+0x15c>)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f90:	e02e      	b.n	8004ff0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	3304      	adds	r3, #4
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff fc81 	bl	800489e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d004      	beq.n	8004fae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	3318      	adds	r3, #24
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff fc78 	bl	800489e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	409a      	lsls	r2, r3
 8004fb6:	4b24      	ldr	r3, [pc, #144]	@ (8005048 <xTaskIncrementTick+0x160>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	4a22      	ldr	r2, [pc, #136]	@ (8005048 <xTaskIncrementTick+0x160>)
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800504c <xTaskIncrementTick+0x164>)
 8004fce:	441a      	add	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	f7ff fc04 	bl	80047e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8005050 <xTaskIncrementTick+0x168>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d3b9      	bcc.n	8004f5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004fea:	2301      	movs	r3, #1
 8004fec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fee:	e7b6      	b.n	8004f5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ff0:	4b17      	ldr	r3, [pc, #92]	@ (8005050 <xTaskIncrementTick+0x168>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff6:	4915      	ldr	r1, [pc, #84]	@ (800504c <xTaskIncrementTick+0x164>)
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d901      	bls.n	800500c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005008:	2301      	movs	r3, #1
 800500a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800500c:	4b11      	ldr	r3, [pc, #68]	@ (8005054 <xTaskIncrementTick+0x16c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005014:	2301      	movs	r3, #1
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	e004      	b.n	8005024 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800501a:	4b0f      	ldr	r3, [pc, #60]	@ (8005058 <xTaskIncrementTick+0x170>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3301      	adds	r3, #1
 8005020:	4a0d      	ldr	r2, [pc, #52]	@ (8005058 <xTaskIncrementTick+0x170>)
 8005022:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005024:	697b      	ldr	r3, [r7, #20]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000600 	.word	0x20000600
 8005034:	200005dc 	.word	0x200005dc
 8005038:	20000590 	.word	0x20000590
 800503c:	20000594 	.word	0x20000594
 8005040:	200005f0 	.word	0x200005f0
 8005044:	200005f8 	.word	0x200005f8
 8005048:	200005e0 	.word	0x200005e0
 800504c:	200004dc 	.word	0x200004dc
 8005050:	200004d8 	.word	0x200004d8
 8005054:	200005ec 	.word	0x200005ec
 8005058:	200005e8 	.word	0x200005e8

0800505c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005062:	4b2a      	ldr	r3, [pc, #168]	@ (800510c <vTaskSwitchContext+0xb0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800506a:	4b29      	ldr	r3, [pc, #164]	@ (8005110 <vTaskSwitchContext+0xb4>)
 800506c:	2201      	movs	r2, #1
 800506e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005070:	e045      	b.n	80050fe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005072:	4b27      	ldr	r3, [pc, #156]	@ (8005110 <vTaskSwitchContext+0xb4>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005078:	4b26      	ldr	r3, [pc, #152]	@ (8005114 <vTaskSwitchContext+0xb8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	fab3 f383 	clz	r3, r3
 8005084:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005086:	7afb      	ldrb	r3, [r7, #11]
 8005088:	f1c3 031f 	rsb	r3, r3, #31
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	4922      	ldr	r1, [pc, #136]	@ (8005118 <vTaskSwitchContext+0xbc>)
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <vTaskSwitchContext+0x5e>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	607b      	str	r3, [r7, #4]
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop
 80050b8:	e7fd      	b.n	80050b6 <vTaskSwitchContext+0x5a>
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4a14      	ldr	r2, [pc, #80]	@ (8005118 <vTaskSwitchContext+0xbc>)
 80050c6:	4413      	add	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	605a      	str	r2, [r3, #4]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	3308      	adds	r3, #8
 80050dc:	429a      	cmp	r2, r3
 80050de:	d104      	bne.n	80050ea <vTaskSwitchContext+0x8e>
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	605a      	str	r2, [r3, #4]
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a0a      	ldr	r2, [pc, #40]	@ (800511c <vTaskSwitchContext+0xc0>)
 80050f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050f4:	4b09      	ldr	r3, [pc, #36]	@ (800511c <vTaskSwitchContext+0xc0>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	334c      	adds	r3, #76	@ 0x4c
 80050fa:	4a09      	ldr	r2, [pc, #36]	@ (8005120 <vTaskSwitchContext+0xc4>)
 80050fc:	6013      	str	r3, [r2, #0]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	20000600 	.word	0x20000600
 8005110:	200005ec 	.word	0x200005ec
 8005114:	200005e0 	.word	0x200005e0
 8005118:	200004dc 	.word	0x200004dc
 800511c:	200004d8 	.word	0x200004d8
 8005120:	2000001c 	.word	0x2000001c

08005124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800512c:	f000 f852 	bl	80051d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005130:	4b06      	ldr	r3, [pc, #24]	@ (800514c <prvIdleTask+0x28>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d9f9      	bls.n	800512c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005138:	4b05      	ldr	r3, [pc, #20]	@ (8005150 <prvIdleTask+0x2c>)
 800513a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005148:	e7f0      	b.n	800512c <prvIdleTask+0x8>
 800514a:	bf00      	nop
 800514c:	200004dc 	.word	0x200004dc
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800515a:	2300      	movs	r3, #0
 800515c:	607b      	str	r3, [r7, #4]
 800515e:	e00c      	b.n	800517a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4a12      	ldr	r2, [pc, #72]	@ (80051b4 <prvInitialiseTaskLists+0x60>)
 800516c:	4413      	add	r3, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff fb0b 	bl	800478a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3301      	adds	r3, #1
 8005178:	607b      	str	r3, [r7, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b06      	cmp	r3, #6
 800517e:	d9ef      	bls.n	8005160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005180:	480d      	ldr	r0, [pc, #52]	@ (80051b8 <prvInitialiseTaskLists+0x64>)
 8005182:	f7ff fb02 	bl	800478a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005186:	480d      	ldr	r0, [pc, #52]	@ (80051bc <prvInitialiseTaskLists+0x68>)
 8005188:	f7ff faff 	bl	800478a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800518c:	480c      	ldr	r0, [pc, #48]	@ (80051c0 <prvInitialiseTaskLists+0x6c>)
 800518e:	f7ff fafc 	bl	800478a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005192:	480c      	ldr	r0, [pc, #48]	@ (80051c4 <prvInitialiseTaskLists+0x70>)
 8005194:	f7ff faf9 	bl	800478a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005198:	480b      	ldr	r0, [pc, #44]	@ (80051c8 <prvInitialiseTaskLists+0x74>)
 800519a:	f7ff faf6 	bl	800478a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800519e:	4b0b      	ldr	r3, [pc, #44]	@ (80051cc <prvInitialiseTaskLists+0x78>)
 80051a0:	4a05      	ldr	r2, [pc, #20]	@ (80051b8 <prvInitialiseTaskLists+0x64>)
 80051a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051a4:	4b0a      	ldr	r3, [pc, #40]	@ (80051d0 <prvInitialiseTaskLists+0x7c>)
 80051a6:	4a05      	ldr	r2, [pc, #20]	@ (80051bc <prvInitialiseTaskLists+0x68>)
 80051a8:	601a      	str	r2, [r3, #0]
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200004dc 	.word	0x200004dc
 80051b8:	20000568 	.word	0x20000568
 80051bc:	2000057c 	.word	0x2000057c
 80051c0:	20000598 	.word	0x20000598
 80051c4:	200005ac 	.word	0x200005ac
 80051c8:	200005c4 	.word	0x200005c4
 80051cc:	20000590 	.word	0x20000590
 80051d0:	20000594 	.word	0x20000594

080051d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051da:	e019      	b.n	8005210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051dc:	f000 fa14 	bl	8005608 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e0:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <prvCheckTasksWaitingTermination+0x50>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3304      	adds	r3, #4
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff fb56 	bl	800489e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <prvCheckTasksWaitingTermination+0x54>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005228 <prvCheckTasksWaitingTermination+0x54>)
 80051fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051fc:	4b0b      	ldr	r3, [pc, #44]	@ (800522c <prvCheckTasksWaitingTermination+0x58>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3b01      	subs	r3, #1
 8005202:	4a0a      	ldr	r2, [pc, #40]	@ (800522c <prvCheckTasksWaitingTermination+0x58>)
 8005204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005206:	f000 fa31 	bl	800566c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f810 	bl	8005230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005210:	4b06      	ldr	r3, [pc, #24]	@ (800522c <prvCheckTasksWaitingTermination+0x58>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e1      	bne.n	80051dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	200005ac 	.word	0x200005ac
 8005228:	200005d8 	.word	0x200005d8
 800522c:	200005c0 	.word	0x200005c0

08005230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	334c      	adds	r3, #76	@ 0x4c
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fe01 	bl	8005e44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005248:	2b00      	cmp	r3, #0
 800524a:	d108      	bne.n	800525e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fb87 	bl	8005964 <vPortFree>
				vPortFree( pxTCB );
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fb84 	bl	8005964 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800525c:	e019      	b.n	8005292 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005264:	2b01      	cmp	r3, #1
 8005266:	d103      	bne.n	8005270 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fb7b 	bl	8005964 <vPortFree>
	}
 800526e:	e010      	b.n	8005292 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005276:	2b02      	cmp	r3, #2
 8005278:	d00b      	beq.n	8005292 <prvDeleteTCB+0x62>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	60fb      	str	r3, [r7, #12]
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <prvDeleteTCB+0x5e>
	}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052a2:	4b0c      	ldr	r3, [pc, #48]	@ (80052d4 <prvResetNextTaskUnblockTime+0x38>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d104      	bne.n	80052b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052ac:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <prvResetNextTaskUnblockTime+0x3c>)
 80052ae:	f04f 32ff 	mov.w	r2, #4294967295
 80052b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052b4:	e008      	b.n	80052c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b6:	4b07      	ldr	r3, [pc, #28]	@ (80052d4 <prvResetNextTaskUnblockTime+0x38>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4a04      	ldr	r2, [pc, #16]	@ (80052d8 <prvResetNextTaskUnblockTime+0x3c>)
 80052c6:	6013      	str	r3, [r2, #0]
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	20000590 	.word	0x20000590
 80052d8:	200005f8 	.word	0x200005f8

080052dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052e6:	4b29      	ldr	r3, [pc, #164]	@ (800538c <prvAddCurrentTaskToDelayedList+0xb0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ec:	4b28      	ldr	r3, [pc, #160]	@ (8005390 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fad3 	bl	800489e <uxListRemove>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10b      	bne.n	8005316 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80052fe:	4b24      	ldr	r3, [pc, #144]	@ (8005390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005304:	2201      	movs	r2, #1
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	43da      	mvns	r2, r3
 800530c:	4b21      	ldr	r3, [pc, #132]	@ (8005394 <prvAddCurrentTaskToDelayedList+0xb8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4013      	ands	r3, r2
 8005312:	4a20      	ldr	r2, [pc, #128]	@ (8005394 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005314:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531c:	d10a      	bne.n	8005334 <prvAddCurrentTaskToDelayedList+0x58>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005324:	4b1a      	ldr	r3, [pc, #104]	@ (8005390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3304      	adds	r3, #4
 800532a:	4619      	mov	r1, r3
 800532c:	481a      	ldr	r0, [pc, #104]	@ (8005398 <prvAddCurrentTaskToDelayedList+0xbc>)
 800532e:	f7ff fa59 	bl	80047e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005332:	e026      	b.n	8005382 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4413      	add	r3, r2
 800533a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800533c:	4b14      	ldr	r3, [pc, #80]	@ (8005390 <prvAddCurrentTaskToDelayedList+0xb4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	429a      	cmp	r2, r3
 800534a:	d209      	bcs.n	8005360 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800534c:	4b13      	ldr	r3, [pc, #76]	@ (800539c <prvAddCurrentTaskToDelayedList+0xc0>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	4b0f      	ldr	r3, [pc, #60]	@ (8005390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3304      	adds	r3, #4
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f7ff fa67 	bl	800482c <vListInsert>
}
 800535e:	e010      	b.n	8005382 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005360:	4b0f      	ldr	r3, [pc, #60]	@ (80053a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	4b0a      	ldr	r3, [pc, #40]	@ (8005390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3304      	adds	r3, #4
 800536a:	4619      	mov	r1, r3
 800536c:	4610      	mov	r0, r2
 800536e:	f7ff fa5d 	bl	800482c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005372:	4b0c      	ldr	r3, [pc, #48]	@ (80053a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	429a      	cmp	r2, r3
 800537a:	d202      	bcs.n	8005382 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800537c:	4a09      	ldr	r2, [pc, #36]	@ (80053a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6013      	str	r3, [r2, #0]
}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	200005dc 	.word	0x200005dc
 8005390:	200004d8 	.word	0x200004d8
 8005394:	200005e0 	.word	0x200005e0
 8005398:	200005c4 	.word	0x200005c4
 800539c:	20000594 	.word	0x20000594
 80053a0:	20000590 	.word	0x20000590
 80053a4:	200005f8 	.word	0x200005f8

080053a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3b04      	subs	r3, #4
 80053b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3b04      	subs	r3, #4
 80053c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f023 0201 	bic.w	r2, r3, #1
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3b04      	subs	r3, #4
 80053d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053d8:	4a0c      	ldr	r2, [pc, #48]	@ (800540c <pxPortInitialiseStack+0x64>)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3b14      	subs	r3, #20
 80053e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3b04      	subs	r3, #4
 80053ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f06f 0202 	mvn.w	r2, #2
 80053f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3b20      	subs	r3, #32
 80053fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053fe:	68fb      	ldr	r3, [r7, #12]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	08005411 	.word	0x08005411

08005410 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800541a:	4b13      	ldr	r3, [pc, #76]	@ (8005468 <prvTaskExitError+0x58>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d00b      	beq.n	800543c <prvTaskExitError+0x2c>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	60fb      	str	r3, [r7, #12]
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <prvTaskExitError+0x28>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	60bb      	str	r3, [r7, #8]
}
 800544e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005450:	bf00      	nop
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0fc      	beq.n	8005452 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	2000000c 	.word	0x2000000c
 800546c:	00000000 	.word	0x00000000

08005470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005470:	4b07      	ldr	r3, [pc, #28]	@ (8005490 <pxCurrentTCBConst2>)
 8005472:	6819      	ldr	r1, [r3, #0]
 8005474:	6808      	ldr	r0, [r1, #0]
 8005476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547a:	f380 8809 	msr	PSP, r0
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8811 	msr	BASEPRI, r0
 800548a:	4770      	bx	lr
 800548c:	f3af 8000 	nop.w

08005490 <pxCurrentTCBConst2>:
 8005490:	200004d8 	.word	0x200004d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop

08005498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005498:	4808      	ldr	r0, [pc, #32]	@ (80054bc <prvPortStartFirstTask+0x24>)
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	6800      	ldr	r0, [r0, #0]
 800549e:	f380 8808 	msr	MSP, r0
 80054a2:	f04f 0000 	mov.w	r0, #0
 80054a6:	f380 8814 	msr	CONTROL, r0
 80054aa:	b662      	cpsie	i
 80054ac:	b661      	cpsie	f
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	df00      	svc	0
 80054b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054ba:	bf00      	nop
 80054bc:	e000ed08 	.word	0xe000ed08

080054c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054c6:	4b47      	ldr	r3, [pc, #284]	@ (80055e4 <xPortStartScheduler+0x124>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a47      	ldr	r2, [pc, #284]	@ (80055e8 <xPortStartScheduler+0x128>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d10b      	bne.n	80054e8 <xPortStartScheduler+0x28>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	613b      	str	r3, [r7, #16]
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054e8:	4b3e      	ldr	r3, [pc, #248]	@ (80055e4 <xPortStartScheduler+0x124>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a3f      	ldr	r2, [pc, #252]	@ (80055ec <xPortStartScheduler+0x12c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d10b      	bne.n	800550a <xPortStartScheduler+0x4a>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	60fb      	str	r3, [r7, #12]
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	e7fd      	b.n	8005506 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800550a:	4b39      	ldr	r3, [pc, #228]	@ (80055f0 <xPortStartScheduler+0x130>)
 800550c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	22ff      	movs	r2, #255	@ 0xff
 800551a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800552c:	b2da      	uxtb	r2, r3
 800552e:	4b31      	ldr	r3, [pc, #196]	@ (80055f4 <xPortStartScheduler+0x134>)
 8005530:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005532:	4b31      	ldr	r3, [pc, #196]	@ (80055f8 <xPortStartScheduler+0x138>)
 8005534:	2207      	movs	r2, #7
 8005536:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005538:	e009      	b.n	800554e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800553a:	4b2f      	ldr	r3, [pc, #188]	@ (80055f8 <xPortStartScheduler+0x138>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3b01      	subs	r3, #1
 8005540:	4a2d      	ldr	r2, [pc, #180]	@ (80055f8 <xPortStartScheduler+0x138>)
 8005542:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	b2db      	uxtb	r3, r3
 800554c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005556:	2b80      	cmp	r3, #128	@ 0x80
 8005558:	d0ef      	beq.n	800553a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800555a:	4b27      	ldr	r3, [pc, #156]	@ (80055f8 <xPortStartScheduler+0x138>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f1c3 0307 	rsb	r3, r3, #7
 8005562:	2b04      	cmp	r3, #4
 8005564:	d00b      	beq.n	800557e <xPortStartScheduler+0xbe>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	60bb      	str	r3, [r7, #8]
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	e7fd      	b.n	800557a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800557e:	4b1e      	ldr	r3, [pc, #120]	@ (80055f8 <xPortStartScheduler+0x138>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	4a1c      	ldr	r2, [pc, #112]	@ (80055f8 <xPortStartScheduler+0x138>)
 8005586:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005588:	4b1b      	ldr	r3, [pc, #108]	@ (80055f8 <xPortStartScheduler+0x138>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005590:	4a19      	ldr	r2, [pc, #100]	@ (80055f8 <xPortStartScheduler+0x138>)
 8005592:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800559c:	4b17      	ldr	r3, [pc, #92]	@ (80055fc <xPortStartScheduler+0x13c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a16      	ldr	r2, [pc, #88]	@ (80055fc <xPortStartScheduler+0x13c>)
 80055a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80055a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055a8:	4b14      	ldr	r3, [pc, #80]	@ (80055fc <xPortStartScheduler+0x13c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a13      	ldr	r2, [pc, #76]	@ (80055fc <xPortStartScheduler+0x13c>)
 80055ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80055b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055b4:	f000 f8da 	bl	800576c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055b8:	4b11      	ldr	r3, [pc, #68]	@ (8005600 <xPortStartScheduler+0x140>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055be:	f000 f8f9 	bl	80057b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055c2:	4b10      	ldr	r3, [pc, #64]	@ (8005604 <xPortStartScheduler+0x144>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005604 <xPortStartScheduler+0x144>)
 80055c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80055cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055ce:	f7ff ff63 	bl	8005498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055d2:	f7ff fd43 	bl	800505c <vTaskSwitchContext>
	prvTaskExitError();
 80055d6:	f7ff ff1b 	bl	8005410 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	e000ed00 	.word	0xe000ed00
 80055e8:	410fc271 	.word	0x410fc271
 80055ec:	410fc270 	.word	0x410fc270
 80055f0:	e000e400 	.word	0xe000e400
 80055f4:	20000604 	.word	0x20000604
 80055f8:	20000608 	.word	0x20000608
 80055fc:	e000ed20 	.word	0xe000ed20
 8005600:	2000000c 	.word	0x2000000c
 8005604:	e000ef34 	.word	0xe000ef34

08005608 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	607b      	str	r3, [r7, #4]
}
 8005620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005622:	4b10      	ldr	r3, [pc, #64]	@ (8005664 <vPortEnterCritical+0x5c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	4a0e      	ldr	r2, [pc, #56]	@ (8005664 <vPortEnterCritical+0x5c>)
 800562a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800562c:	4b0d      	ldr	r3, [pc, #52]	@ (8005664 <vPortEnterCritical+0x5c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d110      	bne.n	8005656 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005634:	4b0c      	ldr	r3, [pc, #48]	@ (8005668 <vPortEnterCritical+0x60>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00b      	beq.n	8005656 <vPortEnterCritical+0x4e>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	603b      	str	r3, [r7, #0]
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	e7fd      	b.n	8005652 <vPortEnterCritical+0x4a>
	}
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	2000000c 	.word	0x2000000c
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005672:	4b12      	ldr	r3, [pc, #72]	@ (80056bc <vPortExitCritical+0x50>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10b      	bne.n	8005692 <vPortExitCritical+0x26>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	607b      	str	r3, [r7, #4]
}
 800568c:	bf00      	nop
 800568e:	bf00      	nop
 8005690:	e7fd      	b.n	800568e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005692:	4b0a      	ldr	r3, [pc, #40]	@ (80056bc <vPortExitCritical+0x50>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3b01      	subs	r3, #1
 8005698:	4a08      	ldr	r2, [pc, #32]	@ (80056bc <vPortExitCritical+0x50>)
 800569a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800569c:	4b07      	ldr	r3, [pc, #28]	@ (80056bc <vPortExitCritical+0x50>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d105      	bne.n	80056b0 <vPortExitCritical+0x44>
 80056a4:	2300      	movs	r3, #0
 80056a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	2000000c 	.word	0x2000000c

080056c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056c0:	f3ef 8009 	mrs	r0, PSP
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	4b15      	ldr	r3, [pc, #84]	@ (8005720 <pxCurrentTCBConst>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	f01e 0f10 	tst.w	lr, #16
 80056d0:	bf08      	it	eq
 80056d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056da:	6010      	str	r0, [r2, #0]
 80056dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80056e4:	f380 8811 	msr	BASEPRI, r0
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f7ff fcb4 	bl	800505c <vTaskSwitchContext>
 80056f4:	f04f 0000 	mov.w	r0, #0
 80056f8:	f380 8811 	msr	BASEPRI, r0
 80056fc:	bc09      	pop	{r0, r3}
 80056fe:	6819      	ldr	r1, [r3, #0]
 8005700:	6808      	ldr	r0, [r1, #0]
 8005702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005706:	f01e 0f10 	tst.w	lr, #16
 800570a:	bf08      	it	eq
 800570c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005710:	f380 8809 	msr	PSP, r0
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	f3af 8000 	nop.w

08005720 <pxCurrentTCBConst>:
 8005720:	200004d8 	.word	0x200004d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop

08005728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	607b      	str	r3, [r7, #4]
}
 8005740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005742:	f7ff fbd1 	bl	8004ee8 <xTaskIncrementTick>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800574c:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <SysTick_Handler+0x40>)
 800574e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	2300      	movs	r3, #0
 8005756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	f383 8811 	msr	BASEPRI, r3
}
 800575e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005770:	4b0b      	ldr	r3, [pc, #44]	@ (80057a0 <vPortSetupTimerInterrupt+0x34>)
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005776:	4b0b      	ldr	r3, [pc, #44]	@ (80057a4 <vPortSetupTimerInterrupt+0x38>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800577c:	4b0a      	ldr	r3, [pc, #40]	@ (80057a8 <vPortSetupTimerInterrupt+0x3c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a0a      	ldr	r2, [pc, #40]	@ (80057ac <vPortSetupTimerInterrupt+0x40>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	099b      	lsrs	r3, r3, #6
 8005788:	4a09      	ldr	r2, [pc, #36]	@ (80057b0 <vPortSetupTimerInterrupt+0x44>)
 800578a:	3b01      	subs	r3, #1
 800578c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800578e:	4b04      	ldr	r3, [pc, #16]	@ (80057a0 <vPortSetupTimerInterrupt+0x34>)
 8005790:	2207      	movs	r2, #7
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	e000e010 	.word	0xe000e010
 80057a4:	e000e018 	.word	0xe000e018
 80057a8:	20000000 	.word	0x20000000
 80057ac:	10624dd3 	.word	0x10624dd3
 80057b0:	e000e014 	.word	0xe000e014

080057b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80057c4 <vPortEnableVFP+0x10>
 80057b8:	6801      	ldr	r1, [r0, #0]
 80057ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80057be:	6001      	str	r1, [r0, #0]
 80057c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057c2:	bf00      	nop
 80057c4:	e000ed88 	.word	0xe000ed88

080057c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08a      	sub	sp, #40	@ 0x28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057d4:	f7ff fadc 	bl	8004d90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057d8:	4b5c      	ldr	r3, [pc, #368]	@ (800594c <pvPortMalloc+0x184>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057e0:	f000 f924 	bl	8005a2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057e4:	4b5a      	ldr	r3, [pc, #360]	@ (8005950 <pvPortMalloc+0x188>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4013      	ands	r3, r2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f040 8095 	bne.w	800591c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01e      	beq.n	8005836 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80057f8:	2208      	movs	r2, #8
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4413      	add	r3, r2
 80057fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	2b00      	cmp	r3, #0
 8005808:	d015      	beq.n	8005836 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f023 0307 	bic.w	r3, r3, #7
 8005810:	3308      	adds	r3, #8
 8005812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <pvPortMalloc+0x6e>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	617b      	str	r3, [r7, #20]
}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	e7fd      	b.n	8005832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d06f      	beq.n	800591c <pvPortMalloc+0x154>
 800583c:	4b45      	ldr	r3, [pc, #276]	@ (8005954 <pvPortMalloc+0x18c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d86a      	bhi.n	800591c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005846:	4b44      	ldr	r3, [pc, #272]	@ (8005958 <pvPortMalloc+0x190>)
 8005848:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800584a:	4b43      	ldr	r3, [pc, #268]	@ (8005958 <pvPortMalloc+0x190>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005850:	e004      	b.n	800585c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	429a      	cmp	r2, r3
 8005864:	d903      	bls.n	800586e <pvPortMalloc+0xa6>
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f1      	bne.n	8005852 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800586e:	4b37      	ldr	r3, [pc, #220]	@ (800594c <pvPortMalloc+0x184>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005874:	429a      	cmp	r2, r3
 8005876:	d051      	beq.n	800591c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2208      	movs	r2, #8
 800587e:	4413      	add	r3, r2
 8005880:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	1ad2      	subs	r2, r2, r3
 8005892:	2308      	movs	r3, #8
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	429a      	cmp	r2, r3
 8005898:	d920      	bls.n	80058dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800589a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4413      	add	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00b      	beq.n	80058c4 <pvPortMalloc+0xfc>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	613b      	str	r3, [r7, #16]
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	e7fd      	b.n	80058c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	1ad2      	subs	r2, r2, r3
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058d6:	69b8      	ldr	r0, [r7, #24]
 80058d8:	f000 f90a 	bl	8005af0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005954 <pvPortMalloc+0x18c>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005954 <pvPortMalloc+0x18c>)
 80058e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005954 <pvPortMalloc+0x18c>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4b1b      	ldr	r3, [pc, #108]	@ (800595c <pvPortMalloc+0x194>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d203      	bcs.n	80058fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058f6:	4b17      	ldr	r3, [pc, #92]	@ (8005954 <pvPortMalloc+0x18c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a18      	ldr	r2, [pc, #96]	@ (800595c <pvPortMalloc+0x194>)
 80058fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	4b13      	ldr	r3, [pc, #76]	@ (8005950 <pvPortMalloc+0x188>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	431a      	orrs	r2, r3
 8005908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800590c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005912:	4b13      	ldr	r3, [pc, #76]	@ (8005960 <pvPortMalloc+0x198>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3301      	adds	r3, #1
 8005918:	4a11      	ldr	r2, [pc, #68]	@ (8005960 <pvPortMalloc+0x198>)
 800591a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800591c:	f7ff fa46 	bl	8004dac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00b      	beq.n	8005942 <pvPortMalloc+0x17a>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	60fb      	str	r3, [r7, #12]
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	e7fd      	b.n	800593e <pvPortMalloc+0x176>
	return pvReturn;
 8005942:	69fb      	ldr	r3, [r7, #28]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3728      	adds	r7, #40	@ 0x28
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20004214 	.word	0x20004214
 8005950:	20004228 	.word	0x20004228
 8005954:	20004218 	.word	0x20004218
 8005958:	2000420c 	.word	0x2000420c
 800595c:	2000421c 	.word	0x2000421c
 8005960:	20004220 	.word	0x20004220

08005964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d04f      	beq.n	8005a16 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005976:	2308      	movs	r3, #8
 8005978:	425b      	negs	r3, r3
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4413      	add	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	4b25      	ldr	r3, [pc, #148]	@ (8005a20 <vPortFree+0xbc>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4013      	ands	r3, r2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10b      	bne.n	80059aa <vPortFree+0x46>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60fb      	str	r3, [r7, #12]
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	e7fd      	b.n	80059a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <vPortFree+0x66>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	60bb      	str	r3, [r7, #8]
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	e7fd      	b.n	80059c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	4b14      	ldr	r3, [pc, #80]	@ (8005a20 <vPortFree+0xbc>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4013      	ands	r3, r2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01e      	beq.n	8005a16 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d11a      	bne.n	8005a16 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a20 <vPortFree+0xbc>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	43db      	mvns	r3, r3
 80059ea:	401a      	ands	r2, r3
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059f0:	f7ff f9ce 	bl	8004d90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a24 <vPortFree+0xc0>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4413      	add	r3, r2
 80059fe:	4a09      	ldr	r2, [pc, #36]	@ (8005a24 <vPortFree+0xc0>)
 8005a00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a02:	6938      	ldr	r0, [r7, #16]
 8005a04:	f000 f874 	bl	8005af0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a08:	4b07      	ldr	r3, [pc, #28]	@ (8005a28 <vPortFree+0xc4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	4a06      	ldr	r2, [pc, #24]	@ (8005a28 <vPortFree+0xc4>)
 8005a10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a12:	f7ff f9cb 	bl	8004dac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a16:	bf00      	nop
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20004228 	.word	0x20004228
 8005a24:	20004218 	.word	0x20004218
 8005a28:	20004224 	.word	0x20004224

08005a2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a32:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005a36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a38:	4b27      	ldr	r3, [pc, #156]	@ (8005ad8 <prvHeapInit+0xac>)
 8005a3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3307      	adds	r3, #7
 8005a4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0307 	bic.w	r3, r3, #7
 8005a52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad8 <prvHeapInit+0xac>)
 8005a5c:	4413      	add	r3, r2
 8005a5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a64:	4a1d      	ldr	r2, [pc, #116]	@ (8005adc <prvHeapInit+0xb0>)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8005adc <prvHeapInit+0xb0>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	4413      	add	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a78:	2208      	movs	r2, #8
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0307 	bic.w	r3, r3, #7
 8005a86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4a15      	ldr	r2, [pc, #84]	@ (8005ae0 <prvHeapInit+0xb4>)
 8005a8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a8e:	4b14      	ldr	r3, [pc, #80]	@ (8005ae0 <prvHeapInit+0xb4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2200      	movs	r2, #0
 8005a94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a96:	4b12      	ldr	r3, [pc, #72]	@ (8005ae0 <prvHeapInit+0xb4>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	1ad2      	subs	r2, r2, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005aac:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae0 <prvHeapInit+0xb4>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae4 <prvHeapInit+0xb8>)
 8005aba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	4a09      	ldr	r2, [pc, #36]	@ (8005ae8 <prvHeapInit+0xbc>)
 8005ac2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ac4:	4b09      	ldr	r3, [pc, #36]	@ (8005aec <prvHeapInit+0xc0>)
 8005ac6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005aca:	601a      	str	r2, [r3, #0]
}
 8005acc:	bf00      	nop
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	2000060c 	.word	0x2000060c
 8005adc:	2000420c 	.word	0x2000420c
 8005ae0:	20004214 	.word	0x20004214
 8005ae4:	2000421c 	.word	0x2000421c
 8005ae8:	20004218 	.word	0x20004218
 8005aec:	20004228 	.word	0x20004228

08005af0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005af8:	4b28      	ldr	r3, [pc, #160]	@ (8005b9c <prvInsertBlockIntoFreeList+0xac>)
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	e002      	b.n	8005b04 <prvInsertBlockIntoFreeList+0x14>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d8f7      	bhi.n	8005afe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	4413      	add	r3, r2
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d108      	bne.n	8005b32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	441a      	add	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	441a      	add	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d118      	bne.n	8005b78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4b15      	ldr	r3, [pc, #84]	@ (8005ba0 <prvInsertBlockIntoFreeList+0xb0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d00d      	beq.n	8005b6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	441a      	add	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e008      	b.n	8005b80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba0 <prvInsertBlockIntoFreeList+0xb0>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e003      	b.n	8005b80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d002      	beq.n	8005b8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b8e:	bf00      	nop
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	2000420c 	.word	0x2000420c
 8005ba0:	20004214 	.word	0x20004214

08005ba4 <std>:
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	b510      	push	{r4, lr}
 8005ba8:	4604      	mov	r4, r0
 8005baa:	e9c0 3300 	strd	r3, r3, [r0]
 8005bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bb2:	6083      	str	r3, [r0, #8]
 8005bb4:	8181      	strh	r1, [r0, #12]
 8005bb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bb8:	81c2      	strh	r2, [r0, #14]
 8005bba:	6183      	str	r3, [r0, #24]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	2208      	movs	r2, #8
 8005bc0:	305c      	adds	r0, #92	@ 0x5c
 8005bc2:	f000 f926 	bl	8005e12 <memset>
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bfc <std+0x58>)
 8005bc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bca:	4b0d      	ldr	r3, [pc, #52]	@ (8005c00 <std+0x5c>)
 8005bcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <std+0x60>)
 8005bd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c08 <std+0x64>)
 8005bd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c0c <std+0x68>)
 8005bd8:	6224      	str	r4, [r4, #32]
 8005bda:	429c      	cmp	r4, r3
 8005bdc:	d006      	beq.n	8005bec <std+0x48>
 8005bde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005be2:	4294      	cmp	r4, r2
 8005be4:	d002      	beq.n	8005bec <std+0x48>
 8005be6:	33d0      	adds	r3, #208	@ 0xd0
 8005be8:	429c      	cmp	r4, r3
 8005bea:	d105      	bne.n	8005bf8 <std+0x54>
 8005bec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf4:	f000 b9dc 	b.w	8005fb0 <__retarget_lock_init_recursive>
 8005bf8:	bd10      	pop	{r4, pc}
 8005bfa:	bf00      	nop
 8005bfc:	08005d8d 	.word	0x08005d8d
 8005c00:	08005daf 	.word	0x08005daf
 8005c04:	08005de7 	.word	0x08005de7
 8005c08:	08005e0b 	.word	0x08005e0b
 8005c0c:	2000422c 	.word	0x2000422c

08005c10 <stdio_exit_handler>:
 8005c10:	4a02      	ldr	r2, [pc, #8]	@ (8005c1c <stdio_exit_handler+0xc>)
 8005c12:	4903      	ldr	r1, [pc, #12]	@ (8005c20 <stdio_exit_handler+0x10>)
 8005c14:	4803      	ldr	r0, [pc, #12]	@ (8005c24 <stdio_exit_handler+0x14>)
 8005c16:	f000 b869 	b.w	8005cec <_fwalk_sglue>
 8005c1a:	bf00      	nop
 8005c1c:	20000010 	.word	0x20000010
 8005c20:	08006b1d 	.word	0x08006b1d
 8005c24:	20000020 	.word	0x20000020

08005c28 <cleanup_stdio>:
 8005c28:	6841      	ldr	r1, [r0, #4]
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c5c <cleanup_stdio+0x34>)
 8005c2c:	4299      	cmp	r1, r3
 8005c2e:	b510      	push	{r4, lr}
 8005c30:	4604      	mov	r4, r0
 8005c32:	d001      	beq.n	8005c38 <cleanup_stdio+0x10>
 8005c34:	f000 ff72 	bl	8006b1c <_fflush_r>
 8005c38:	68a1      	ldr	r1, [r4, #8]
 8005c3a:	4b09      	ldr	r3, [pc, #36]	@ (8005c60 <cleanup_stdio+0x38>)
 8005c3c:	4299      	cmp	r1, r3
 8005c3e:	d002      	beq.n	8005c46 <cleanup_stdio+0x1e>
 8005c40:	4620      	mov	r0, r4
 8005c42:	f000 ff6b 	bl	8006b1c <_fflush_r>
 8005c46:	68e1      	ldr	r1, [r4, #12]
 8005c48:	4b06      	ldr	r3, [pc, #24]	@ (8005c64 <cleanup_stdio+0x3c>)
 8005c4a:	4299      	cmp	r1, r3
 8005c4c:	d004      	beq.n	8005c58 <cleanup_stdio+0x30>
 8005c4e:	4620      	mov	r0, r4
 8005c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c54:	f000 bf62 	b.w	8006b1c <_fflush_r>
 8005c58:	bd10      	pop	{r4, pc}
 8005c5a:	bf00      	nop
 8005c5c:	2000422c 	.word	0x2000422c
 8005c60:	20004294 	.word	0x20004294
 8005c64:	200042fc 	.word	0x200042fc

08005c68 <global_stdio_init.part.0>:
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c98 <global_stdio_init.part.0+0x30>)
 8005c6c:	4c0b      	ldr	r4, [pc, #44]	@ (8005c9c <global_stdio_init.part.0+0x34>)
 8005c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8005ca0 <global_stdio_init.part.0+0x38>)
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	4620      	mov	r0, r4
 8005c74:	2200      	movs	r2, #0
 8005c76:	2104      	movs	r1, #4
 8005c78:	f7ff ff94 	bl	8005ba4 <std>
 8005c7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c80:	2201      	movs	r2, #1
 8005c82:	2109      	movs	r1, #9
 8005c84:	f7ff ff8e 	bl	8005ba4 <std>
 8005c88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c92:	2112      	movs	r1, #18
 8005c94:	f7ff bf86 	b.w	8005ba4 <std>
 8005c98:	20004364 	.word	0x20004364
 8005c9c:	2000422c 	.word	0x2000422c
 8005ca0:	08005c11 	.word	0x08005c11

08005ca4 <__sfp_lock_acquire>:
 8005ca4:	4801      	ldr	r0, [pc, #4]	@ (8005cac <__sfp_lock_acquire+0x8>)
 8005ca6:	f000 b984 	b.w	8005fb2 <__retarget_lock_acquire_recursive>
 8005caa:	bf00      	nop
 8005cac:	2000436d 	.word	0x2000436d

08005cb0 <__sfp_lock_release>:
 8005cb0:	4801      	ldr	r0, [pc, #4]	@ (8005cb8 <__sfp_lock_release+0x8>)
 8005cb2:	f000 b97f 	b.w	8005fb4 <__retarget_lock_release_recursive>
 8005cb6:	bf00      	nop
 8005cb8:	2000436d 	.word	0x2000436d

08005cbc <__sinit>:
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	f7ff fff0 	bl	8005ca4 <__sfp_lock_acquire>
 8005cc4:	6a23      	ldr	r3, [r4, #32]
 8005cc6:	b11b      	cbz	r3, 8005cd0 <__sinit+0x14>
 8005cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ccc:	f7ff bff0 	b.w	8005cb0 <__sfp_lock_release>
 8005cd0:	4b04      	ldr	r3, [pc, #16]	@ (8005ce4 <__sinit+0x28>)
 8005cd2:	6223      	str	r3, [r4, #32]
 8005cd4:	4b04      	ldr	r3, [pc, #16]	@ (8005ce8 <__sinit+0x2c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f5      	bne.n	8005cc8 <__sinit+0xc>
 8005cdc:	f7ff ffc4 	bl	8005c68 <global_stdio_init.part.0>
 8005ce0:	e7f2      	b.n	8005cc8 <__sinit+0xc>
 8005ce2:	bf00      	nop
 8005ce4:	08005c29 	.word	0x08005c29
 8005ce8:	20004364 	.word	0x20004364

08005cec <_fwalk_sglue>:
 8005cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	4688      	mov	r8, r1
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	2600      	movs	r6, #0
 8005cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8005d00:	d505      	bpl.n	8005d0e <_fwalk_sglue+0x22>
 8005d02:	6824      	ldr	r4, [r4, #0]
 8005d04:	2c00      	cmp	r4, #0
 8005d06:	d1f7      	bne.n	8005cf8 <_fwalk_sglue+0xc>
 8005d08:	4630      	mov	r0, r6
 8005d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d0e:	89ab      	ldrh	r3, [r5, #12]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d907      	bls.n	8005d24 <_fwalk_sglue+0x38>
 8005d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	d003      	beq.n	8005d24 <_fwalk_sglue+0x38>
 8005d1c:	4629      	mov	r1, r5
 8005d1e:	4638      	mov	r0, r7
 8005d20:	47c0      	blx	r8
 8005d22:	4306      	orrs	r6, r0
 8005d24:	3568      	adds	r5, #104	@ 0x68
 8005d26:	e7e9      	b.n	8005cfc <_fwalk_sglue+0x10>

08005d28 <iprintf>:
 8005d28:	b40f      	push	{r0, r1, r2, r3}
 8005d2a:	b507      	push	{r0, r1, r2, lr}
 8005d2c:	4906      	ldr	r1, [pc, #24]	@ (8005d48 <iprintf+0x20>)
 8005d2e:	ab04      	add	r3, sp, #16
 8005d30:	6808      	ldr	r0, [r1, #0]
 8005d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d36:	6881      	ldr	r1, [r0, #8]
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	f000 fbc5 	bl	80064c8 <_vfiprintf_r>
 8005d3e:	b003      	add	sp, #12
 8005d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d44:	b004      	add	sp, #16
 8005d46:	4770      	bx	lr
 8005d48:	2000001c 	.word	0x2000001c

08005d4c <siprintf>:
 8005d4c:	b40e      	push	{r1, r2, r3}
 8005d4e:	b500      	push	{lr}
 8005d50:	b09c      	sub	sp, #112	@ 0x70
 8005d52:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d54:	9002      	str	r0, [sp, #8]
 8005d56:	9006      	str	r0, [sp, #24]
 8005d58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d5c:	4809      	ldr	r0, [pc, #36]	@ (8005d84 <siprintf+0x38>)
 8005d5e:	9107      	str	r1, [sp, #28]
 8005d60:	9104      	str	r1, [sp, #16]
 8005d62:	4909      	ldr	r1, [pc, #36]	@ (8005d88 <siprintf+0x3c>)
 8005d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d68:	9105      	str	r1, [sp, #20]
 8005d6a:	6800      	ldr	r0, [r0, #0]
 8005d6c:	9301      	str	r3, [sp, #4]
 8005d6e:	a902      	add	r1, sp, #8
 8005d70:	f000 fa84 	bl	800627c <_svfiprintf_r>
 8005d74:	9b02      	ldr	r3, [sp, #8]
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	b01c      	add	sp, #112	@ 0x70
 8005d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d80:	b003      	add	sp, #12
 8005d82:	4770      	bx	lr
 8005d84:	2000001c 	.word	0x2000001c
 8005d88:	ffff0208 	.word	0xffff0208

08005d8c <__sread>:
 8005d8c:	b510      	push	{r4, lr}
 8005d8e:	460c      	mov	r4, r1
 8005d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d94:	f000 f8be 	bl	8005f14 <_read_r>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	bfab      	itete	ge
 8005d9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8005da0:	181b      	addge	r3, r3, r0
 8005da2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005da6:	bfac      	ite	ge
 8005da8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005daa:	81a3      	strhlt	r3, [r4, #12]
 8005dac:	bd10      	pop	{r4, pc}

08005dae <__swrite>:
 8005dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db2:	461f      	mov	r7, r3
 8005db4:	898b      	ldrh	r3, [r1, #12]
 8005db6:	05db      	lsls	r3, r3, #23
 8005db8:	4605      	mov	r5, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	4616      	mov	r6, r2
 8005dbe:	d505      	bpl.n	8005dcc <__swrite+0x1e>
 8005dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f000 f892 	bl	8005ef0 <_lseek_r>
 8005dcc:	89a3      	ldrh	r3, [r4, #12]
 8005dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	4632      	mov	r2, r6
 8005dda:	463b      	mov	r3, r7
 8005ddc:	4628      	mov	r0, r5
 8005dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005de2:	f000 b8a9 	b.w	8005f38 <_write_r>

08005de6 <__sseek>:
 8005de6:	b510      	push	{r4, lr}
 8005de8:	460c      	mov	r4, r1
 8005dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dee:	f000 f87f 	bl	8005ef0 <_lseek_r>
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	bf15      	itete	ne
 8005df8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e02:	81a3      	strheq	r3, [r4, #12]
 8005e04:	bf18      	it	ne
 8005e06:	81a3      	strhne	r3, [r4, #12]
 8005e08:	bd10      	pop	{r4, pc}

08005e0a <__sclose>:
 8005e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0e:	f000 b809 	b.w	8005e24 <_close_r>

08005e12 <memset>:
 8005e12:	4402      	add	r2, r0
 8005e14:	4603      	mov	r3, r0
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d100      	bne.n	8005e1c <memset+0xa>
 8005e1a:	4770      	bx	lr
 8005e1c:	f803 1b01 	strb.w	r1, [r3], #1
 8005e20:	e7f9      	b.n	8005e16 <memset+0x4>
	...

08005e24 <_close_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4d06      	ldr	r5, [pc, #24]	@ (8005e40 <_close_r+0x1c>)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	602b      	str	r3, [r5, #0]
 8005e30:	f7fb fae9 	bl	8001406 <_close>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d102      	bne.n	8005e3e <_close_r+0x1a>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b103      	cbz	r3, 8005e3e <_close_r+0x1a>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
 8005e40:	20004368 	.word	0x20004368

08005e44 <_reclaim_reent>:
 8005e44:	4b29      	ldr	r3, [pc, #164]	@ (8005eec <_reclaim_reent+0xa8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4283      	cmp	r3, r0
 8005e4a:	b570      	push	{r4, r5, r6, lr}
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	d04b      	beq.n	8005ee8 <_reclaim_reent+0xa4>
 8005e50:	69c3      	ldr	r3, [r0, #28]
 8005e52:	b1ab      	cbz	r3, 8005e80 <_reclaim_reent+0x3c>
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	b16b      	cbz	r3, 8005e74 <_reclaim_reent+0x30>
 8005e58:	2500      	movs	r5, #0
 8005e5a:	69e3      	ldr	r3, [r4, #28]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	5959      	ldr	r1, [r3, r5]
 8005e60:	2900      	cmp	r1, #0
 8005e62:	d13b      	bne.n	8005edc <_reclaim_reent+0x98>
 8005e64:	3504      	adds	r5, #4
 8005e66:	2d80      	cmp	r5, #128	@ 0x80
 8005e68:	d1f7      	bne.n	8005e5a <_reclaim_reent+0x16>
 8005e6a:	69e3      	ldr	r3, [r4, #28]
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	68d9      	ldr	r1, [r3, #12]
 8005e70:	f000 f8b0 	bl	8005fd4 <_free_r>
 8005e74:	69e3      	ldr	r3, [r4, #28]
 8005e76:	6819      	ldr	r1, [r3, #0]
 8005e78:	b111      	cbz	r1, 8005e80 <_reclaim_reent+0x3c>
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 f8aa 	bl	8005fd4 <_free_r>
 8005e80:	6961      	ldr	r1, [r4, #20]
 8005e82:	b111      	cbz	r1, 8005e8a <_reclaim_reent+0x46>
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 f8a5 	bl	8005fd4 <_free_r>
 8005e8a:	69e1      	ldr	r1, [r4, #28]
 8005e8c:	b111      	cbz	r1, 8005e94 <_reclaim_reent+0x50>
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 f8a0 	bl	8005fd4 <_free_r>
 8005e94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005e96:	b111      	cbz	r1, 8005e9e <_reclaim_reent+0x5a>
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f89b 	bl	8005fd4 <_free_r>
 8005e9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ea0:	b111      	cbz	r1, 8005ea8 <_reclaim_reent+0x64>
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 f896 	bl	8005fd4 <_free_r>
 8005ea8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005eaa:	b111      	cbz	r1, 8005eb2 <_reclaim_reent+0x6e>
 8005eac:	4620      	mov	r0, r4
 8005eae:	f000 f891 	bl	8005fd4 <_free_r>
 8005eb2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005eb4:	b111      	cbz	r1, 8005ebc <_reclaim_reent+0x78>
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 f88c 	bl	8005fd4 <_free_r>
 8005ebc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005ebe:	b111      	cbz	r1, 8005ec6 <_reclaim_reent+0x82>
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 f887 	bl	8005fd4 <_free_r>
 8005ec6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ec8:	b111      	cbz	r1, 8005ed0 <_reclaim_reent+0x8c>
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f000 f882 	bl	8005fd4 <_free_r>
 8005ed0:	6a23      	ldr	r3, [r4, #32]
 8005ed2:	b14b      	cbz	r3, 8005ee8 <_reclaim_reent+0xa4>
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005eda:	4718      	bx	r3
 8005edc:	680e      	ldr	r6, [r1, #0]
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 f878 	bl	8005fd4 <_free_r>
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	e7bb      	b.n	8005e60 <_reclaim_reent+0x1c>
 8005ee8:	bd70      	pop	{r4, r5, r6, pc}
 8005eea:	bf00      	nop
 8005eec:	2000001c 	.word	0x2000001c

08005ef0 <_lseek_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4d07      	ldr	r5, [pc, #28]	@ (8005f10 <_lseek_r+0x20>)
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	4608      	mov	r0, r1
 8005ef8:	4611      	mov	r1, r2
 8005efa:	2200      	movs	r2, #0
 8005efc:	602a      	str	r2, [r5, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	f7fb faa8 	bl	8001454 <_lseek>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	d102      	bne.n	8005f0e <_lseek_r+0x1e>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	b103      	cbz	r3, 8005f0e <_lseek_r+0x1e>
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
 8005f10:	20004368 	.word	0x20004368

08005f14 <_read_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4d07      	ldr	r5, [pc, #28]	@ (8005f34 <_read_r+0x20>)
 8005f18:	4604      	mov	r4, r0
 8005f1a:	4608      	mov	r0, r1
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	2200      	movs	r2, #0
 8005f20:	602a      	str	r2, [r5, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	f7fb fa36 	bl	8001394 <_read>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d102      	bne.n	8005f32 <_read_r+0x1e>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	b103      	cbz	r3, 8005f32 <_read_r+0x1e>
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	bd38      	pop	{r3, r4, r5, pc}
 8005f34:	20004368 	.word	0x20004368

08005f38 <_write_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	4d07      	ldr	r5, [pc, #28]	@ (8005f58 <_write_r+0x20>)
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	4608      	mov	r0, r1
 8005f40:	4611      	mov	r1, r2
 8005f42:	2200      	movs	r2, #0
 8005f44:	602a      	str	r2, [r5, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	f7fb fa41 	bl	80013ce <_write>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d102      	bne.n	8005f56 <_write_r+0x1e>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	b103      	cbz	r3, 8005f56 <_write_r+0x1e>
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	20004368 	.word	0x20004368

08005f5c <__errno>:
 8005f5c:	4b01      	ldr	r3, [pc, #4]	@ (8005f64 <__errno+0x8>)
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	2000001c 	.word	0x2000001c

08005f68 <__libc_init_array>:
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8005fa0 <__libc_init_array+0x38>)
 8005f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8005fa4 <__libc_init_array+0x3c>)
 8005f6e:	1b64      	subs	r4, r4, r5
 8005f70:	10a4      	asrs	r4, r4, #2
 8005f72:	2600      	movs	r6, #0
 8005f74:	42a6      	cmp	r6, r4
 8005f76:	d109      	bne.n	8005f8c <__libc_init_array+0x24>
 8005f78:	4d0b      	ldr	r5, [pc, #44]	@ (8005fa8 <__libc_init_array+0x40>)
 8005f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8005fac <__libc_init_array+0x44>)
 8005f7c:	f000 ff6e 	bl	8006e5c <_init>
 8005f80:	1b64      	subs	r4, r4, r5
 8005f82:	10a4      	asrs	r4, r4, #2
 8005f84:	2600      	movs	r6, #0
 8005f86:	42a6      	cmp	r6, r4
 8005f88:	d105      	bne.n	8005f96 <__libc_init_array+0x2e>
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f90:	4798      	blx	r3
 8005f92:	3601      	adds	r6, #1
 8005f94:	e7ee      	b.n	8005f74 <__libc_init_array+0xc>
 8005f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9a:	4798      	blx	r3
 8005f9c:	3601      	adds	r6, #1
 8005f9e:	e7f2      	b.n	8005f86 <__libc_init_array+0x1e>
 8005fa0:	08006fdc 	.word	0x08006fdc
 8005fa4:	08006fdc 	.word	0x08006fdc
 8005fa8:	08006fdc 	.word	0x08006fdc
 8005fac:	08006fe0 	.word	0x08006fe0

08005fb0 <__retarget_lock_init_recursive>:
 8005fb0:	4770      	bx	lr

08005fb2 <__retarget_lock_acquire_recursive>:
 8005fb2:	4770      	bx	lr

08005fb4 <__retarget_lock_release_recursive>:
 8005fb4:	4770      	bx	lr

08005fb6 <memcpy>:
 8005fb6:	440a      	add	r2, r1
 8005fb8:	4291      	cmp	r1, r2
 8005fba:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fbe:	d100      	bne.n	8005fc2 <memcpy+0xc>
 8005fc0:	4770      	bx	lr
 8005fc2:	b510      	push	{r4, lr}
 8005fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fcc:	4291      	cmp	r1, r2
 8005fce:	d1f9      	bne.n	8005fc4 <memcpy+0xe>
 8005fd0:	bd10      	pop	{r4, pc}
	...

08005fd4 <_free_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4605      	mov	r5, r0
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	d041      	beq.n	8006060 <_free_r+0x8c>
 8005fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fe0:	1f0c      	subs	r4, r1, #4
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	bfb8      	it	lt
 8005fe6:	18e4      	addlt	r4, r4, r3
 8005fe8:	f000 f8e0 	bl	80061ac <__malloc_lock>
 8005fec:	4a1d      	ldr	r2, [pc, #116]	@ (8006064 <_free_r+0x90>)
 8005fee:	6813      	ldr	r3, [r2, #0]
 8005ff0:	b933      	cbnz	r3, 8006000 <_free_r+0x2c>
 8005ff2:	6063      	str	r3, [r4, #4]
 8005ff4:	6014      	str	r4, [r2, #0]
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ffc:	f000 b8dc 	b.w	80061b8 <__malloc_unlock>
 8006000:	42a3      	cmp	r3, r4
 8006002:	d908      	bls.n	8006016 <_free_r+0x42>
 8006004:	6820      	ldr	r0, [r4, #0]
 8006006:	1821      	adds	r1, r4, r0
 8006008:	428b      	cmp	r3, r1
 800600a:	bf01      	itttt	eq
 800600c:	6819      	ldreq	r1, [r3, #0]
 800600e:	685b      	ldreq	r3, [r3, #4]
 8006010:	1809      	addeq	r1, r1, r0
 8006012:	6021      	streq	r1, [r4, #0]
 8006014:	e7ed      	b.n	8005ff2 <_free_r+0x1e>
 8006016:	461a      	mov	r2, r3
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	b10b      	cbz	r3, 8006020 <_free_r+0x4c>
 800601c:	42a3      	cmp	r3, r4
 800601e:	d9fa      	bls.n	8006016 <_free_r+0x42>
 8006020:	6811      	ldr	r1, [r2, #0]
 8006022:	1850      	adds	r0, r2, r1
 8006024:	42a0      	cmp	r0, r4
 8006026:	d10b      	bne.n	8006040 <_free_r+0x6c>
 8006028:	6820      	ldr	r0, [r4, #0]
 800602a:	4401      	add	r1, r0
 800602c:	1850      	adds	r0, r2, r1
 800602e:	4283      	cmp	r3, r0
 8006030:	6011      	str	r1, [r2, #0]
 8006032:	d1e0      	bne.n	8005ff6 <_free_r+0x22>
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	6053      	str	r3, [r2, #4]
 800603a:	4408      	add	r0, r1
 800603c:	6010      	str	r0, [r2, #0]
 800603e:	e7da      	b.n	8005ff6 <_free_r+0x22>
 8006040:	d902      	bls.n	8006048 <_free_r+0x74>
 8006042:	230c      	movs	r3, #12
 8006044:	602b      	str	r3, [r5, #0]
 8006046:	e7d6      	b.n	8005ff6 <_free_r+0x22>
 8006048:	6820      	ldr	r0, [r4, #0]
 800604a:	1821      	adds	r1, r4, r0
 800604c:	428b      	cmp	r3, r1
 800604e:	bf04      	itt	eq
 8006050:	6819      	ldreq	r1, [r3, #0]
 8006052:	685b      	ldreq	r3, [r3, #4]
 8006054:	6063      	str	r3, [r4, #4]
 8006056:	bf04      	itt	eq
 8006058:	1809      	addeq	r1, r1, r0
 800605a:	6021      	streq	r1, [r4, #0]
 800605c:	6054      	str	r4, [r2, #4]
 800605e:	e7ca      	b.n	8005ff6 <_free_r+0x22>
 8006060:	bd38      	pop	{r3, r4, r5, pc}
 8006062:	bf00      	nop
 8006064:	20004374 	.word	0x20004374

08006068 <sbrk_aligned>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4e0f      	ldr	r6, [pc, #60]	@ (80060a8 <sbrk_aligned+0x40>)
 800606c:	460c      	mov	r4, r1
 800606e:	6831      	ldr	r1, [r6, #0]
 8006070:	4605      	mov	r5, r0
 8006072:	b911      	cbnz	r1, 800607a <sbrk_aligned+0x12>
 8006074:	f000 fe28 	bl	8006cc8 <_sbrk_r>
 8006078:	6030      	str	r0, [r6, #0]
 800607a:	4621      	mov	r1, r4
 800607c:	4628      	mov	r0, r5
 800607e:	f000 fe23 	bl	8006cc8 <_sbrk_r>
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	d103      	bne.n	800608e <sbrk_aligned+0x26>
 8006086:	f04f 34ff 	mov.w	r4, #4294967295
 800608a:	4620      	mov	r0, r4
 800608c:	bd70      	pop	{r4, r5, r6, pc}
 800608e:	1cc4      	adds	r4, r0, #3
 8006090:	f024 0403 	bic.w	r4, r4, #3
 8006094:	42a0      	cmp	r0, r4
 8006096:	d0f8      	beq.n	800608a <sbrk_aligned+0x22>
 8006098:	1a21      	subs	r1, r4, r0
 800609a:	4628      	mov	r0, r5
 800609c:	f000 fe14 	bl	8006cc8 <_sbrk_r>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d1f2      	bne.n	800608a <sbrk_aligned+0x22>
 80060a4:	e7ef      	b.n	8006086 <sbrk_aligned+0x1e>
 80060a6:	bf00      	nop
 80060a8:	20004370 	.word	0x20004370

080060ac <_malloc_r>:
 80060ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b0:	1ccd      	adds	r5, r1, #3
 80060b2:	f025 0503 	bic.w	r5, r5, #3
 80060b6:	3508      	adds	r5, #8
 80060b8:	2d0c      	cmp	r5, #12
 80060ba:	bf38      	it	cc
 80060bc:	250c      	movcc	r5, #12
 80060be:	2d00      	cmp	r5, #0
 80060c0:	4606      	mov	r6, r0
 80060c2:	db01      	blt.n	80060c8 <_malloc_r+0x1c>
 80060c4:	42a9      	cmp	r1, r5
 80060c6:	d904      	bls.n	80060d2 <_malloc_r+0x26>
 80060c8:	230c      	movs	r3, #12
 80060ca:	6033      	str	r3, [r6, #0]
 80060cc:	2000      	movs	r0, #0
 80060ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061a8 <_malloc_r+0xfc>
 80060d6:	f000 f869 	bl	80061ac <__malloc_lock>
 80060da:	f8d8 3000 	ldr.w	r3, [r8]
 80060de:	461c      	mov	r4, r3
 80060e0:	bb44      	cbnz	r4, 8006134 <_malloc_r+0x88>
 80060e2:	4629      	mov	r1, r5
 80060e4:	4630      	mov	r0, r6
 80060e6:	f7ff ffbf 	bl	8006068 <sbrk_aligned>
 80060ea:	1c43      	adds	r3, r0, #1
 80060ec:	4604      	mov	r4, r0
 80060ee:	d158      	bne.n	80061a2 <_malloc_r+0xf6>
 80060f0:	f8d8 4000 	ldr.w	r4, [r8]
 80060f4:	4627      	mov	r7, r4
 80060f6:	2f00      	cmp	r7, #0
 80060f8:	d143      	bne.n	8006182 <_malloc_r+0xd6>
 80060fa:	2c00      	cmp	r4, #0
 80060fc:	d04b      	beq.n	8006196 <_malloc_r+0xea>
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	4639      	mov	r1, r7
 8006102:	4630      	mov	r0, r6
 8006104:	eb04 0903 	add.w	r9, r4, r3
 8006108:	f000 fdde 	bl	8006cc8 <_sbrk_r>
 800610c:	4581      	cmp	r9, r0
 800610e:	d142      	bne.n	8006196 <_malloc_r+0xea>
 8006110:	6821      	ldr	r1, [r4, #0]
 8006112:	1a6d      	subs	r5, r5, r1
 8006114:	4629      	mov	r1, r5
 8006116:	4630      	mov	r0, r6
 8006118:	f7ff ffa6 	bl	8006068 <sbrk_aligned>
 800611c:	3001      	adds	r0, #1
 800611e:	d03a      	beq.n	8006196 <_malloc_r+0xea>
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	442b      	add	r3, r5
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	f8d8 3000 	ldr.w	r3, [r8]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	bb62      	cbnz	r2, 8006188 <_malloc_r+0xdc>
 800612e:	f8c8 7000 	str.w	r7, [r8]
 8006132:	e00f      	b.n	8006154 <_malloc_r+0xa8>
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	1b52      	subs	r2, r2, r5
 8006138:	d420      	bmi.n	800617c <_malloc_r+0xd0>
 800613a:	2a0b      	cmp	r2, #11
 800613c:	d917      	bls.n	800616e <_malloc_r+0xc2>
 800613e:	1961      	adds	r1, r4, r5
 8006140:	42a3      	cmp	r3, r4
 8006142:	6025      	str	r5, [r4, #0]
 8006144:	bf18      	it	ne
 8006146:	6059      	strne	r1, [r3, #4]
 8006148:	6863      	ldr	r3, [r4, #4]
 800614a:	bf08      	it	eq
 800614c:	f8c8 1000 	streq.w	r1, [r8]
 8006150:	5162      	str	r2, [r4, r5]
 8006152:	604b      	str	r3, [r1, #4]
 8006154:	4630      	mov	r0, r6
 8006156:	f000 f82f 	bl	80061b8 <__malloc_unlock>
 800615a:	f104 000b 	add.w	r0, r4, #11
 800615e:	1d23      	adds	r3, r4, #4
 8006160:	f020 0007 	bic.w	r0, r0, #7
 8006164:	1ac2      	subs	r2, r0, r3
 8006166:	bf1c      	itt	ne
 8006168:	1a1b      	subne	r3, r3, r0
 800616a:	50a3      	strne	r3, [r4, r2]
 800616c:	e7af      	b.n	80060ce <_malloc_r+0x22>
 800616e:	6862      	ldr	r2, [r4, #4]
 8006170:	42a3      	cmp	r3, r4
 8006172:	bf0c      	ite	eq
 8006174:	f8c8 2000 	streq.w	r2, [r8]
 8006178:	605a      	strne	r2, [r3, #4]
 800617a:	e7eb      	b.n	8006154 <_malloc_r+0xa8>
 800617c:	4623      	mov	r3, r4
 800617e:	6864      	ldr	r4, [r4, #4]
 8006180:	e7ae      	b.n	80060e0 <_malloc_r+0x34>
 8006182:	463c      	mov	r4, r7
 8006184:	687f      	ldr	r7, [r7, #4]
 8006186:	e7b6      	b.n	80060f6 <_malloc_r+0x4a>
 8006188:	461a      	mov	r2, r3
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	42a3      	cmp	r3, r4
 800618e:	d1fb      	bne.n	8006188 <_malloc_r+0xdc>
 8006190:	2300      	movs	r3, #0
 8006192:	6053      	str	r3, [r2, #4]
 8006194:	e7de      	b.n	8006154 <_malloc_r+0xa8>
 8006196:	230c      	movs	r3, #12
 8006198:	6033      	str	r3, [r6, #0]
 800619a:	4630      	mov	r0, r6
 800619c:	f000 f80c 	bl	80061b8 <__malloc_unlock>
 80061a0:	e794      	b.n	80060cc <_malloc_r+0x20>
 80061a2:	6005      	str	r5, [r0, #0]
 80061a4:	e7d6      	b.n	8006154 <_malloc_r+0xa8>
 80061a6:	bf00      	nop
 80061a8:	20004374 	.word	0x20004374

080061ac <__malloc_lock>:
 80061ac:	4801      	ldr	r0, [pc, #4]	@ (80061b4 <__malloc_lock+0x8>)
 80061ae:	f7ff bf00 	b.w	8005fb2 <__retarget_lock_acquire_recursive>
 80061b2:	bf00      	nop
 80061b4:	2000436c 	.word	0x2000436c

080061b8 <__malloc_unlock>:
 80061b8:	4801      	ldr	r0, [pc, #4]	@ (80061c0 <__malloc_unlock+0x8>)
 80061ba:	f7ff befb 	b.w	8005fb4 <__retarget_lock_release_recursive>
 80061be:	bf00      	nop
 80061c0:	2000436c 	.word	0x2000436c

080061c4 <__ssputs_r>:
 80061c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	688e      	ldr	r6, [r1, #8]
 80061ca:	461f      	mov	r7, r3
 80061cc:	42be      	cmp	r6, r7
 80061ce:	680b      	ldr	r3, [r1, #0]
 80061d0:	4682      	mov	sl, r0
 80061d2:	460c      	mov	r4, r1
 80061d4:	4690      	mov	r8, r2
 80061d6:	d82d      	bhi.n	8006234 <__ssputs_r+0x70>
 80061d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80061e0:	d026      	beq.n	8006230 <__ssputs_r+0x6c>
 80061e2:	6965      	ldr	r5, [r4, #20]
 80061e4:	6909      	ldr	r1, [r1, #16]
 80061e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061ea:	eba3 0901 	sub.w	r9, r3, r1
 80061ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061f2:	1c7b      	adds	r3, r7, #1
 80061f4:	444b      	add	r3, r9
 80061f6:	106d      	asrs	r5, r5, #1
 80061f8:	429d      	cmp	r5, r3
 80061fa:	bf38      	it	cc
 80061fc:	461d      	movcc	r5, r3
 80061fe:	0553      	lsls	r3, r2, #21
 8006200:	d527      	bpl.n	8006252 <__ssputs_r+0x8e>
 8006202:	4629      	mov	r1, r5
 8006204:	f7ff ff52 	bl	80060ac <_malloc_r>
 8006208:	4606      	mov	r6, r0
 800620a:	b360      	cbz	r0, 8006266 <__ssputs_r+0xa2>
 800620c:	6921      	ldr	r1, [r4, #16]
 800620e:	464a      	mov	r2, r9
 8006210:	f7ff fed1 	bl	8005fb6 <memcpy>
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800621a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	6126      	str	r6, [r4, #16]
 8006222:	6165      	str	r5, [r4, #20]
 8006224:	444e      	add	r6, r9
 8006226:	eba5 0509 	sub.w	r5, r5, r9
 800622a:	6026      	str	r6, [r4, #0]
 800622c:	60a5      	str	r5, [r4, #8]
 800622e:	463e      	mov	r6, r7
 8006230:	42be      	cmp	r6, r7
 8006232:	d900      	bls.n	8006236 <__ssputs_r+0x72>
 8006234:	463e      	mov	r6, r7
 8006236:	6820      	ldr	r0, [r4, #0]
 8006238:	4632      	mov	r2, r6
 800623a:	4641      	mov	r1, r8
 800623c:	f000 fd2a 	bl	8006c94 <memmove>
 8006240:	68a3      	ldr	r3, [r4, #8]
 8006242:	1b9b      	subs	r3, r3, r6
 8006244:	60a3      	str	r3, [r4, #8]
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	4433      	add	r3, r6
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	2000      	movs	r0, #0
 800624e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006252:	462a      	mov	r2, r5
 8006254:	f000 fd48 	bl	8006ce8 <_realloc_r>
 8006258:	4606      	mov	r6, r0
 800625a:	2800      	cmp	r0, #0
 800625c:	d1e0      	bne.n	8006220 <__ssputs_r+0x5c>
 800625e:	6921      	ldr	r1, [r4, #16]
 8006260:	4650      	mov	r0, sl
 8006262:	f7ff feb7 	bl	8005fd4 <_free_r>
 8006266:	230c      	movs	r3, #12
 8006268:	f8ca 3000 	str.w	r3, [sl]
 800626c:	89a3      	ldrh	r3, [r4, #12]
 800626e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006272:	81a3      	strh	r3, [r4, #12]
 8006274:	f04f 30ff 	mov.w	r0, #4294967295
 8006278:	e7e9      	b.n	800624e <__ssputs_r+0x8a>
	...

0800627c <_svfiprintf_r>:
 800627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	4698      	mov	r8, r3
 8006282:	898b      	ldrh	r3, [r1, #12]
 8006284:	061b      	lsls	r3, r3, #24
 8006286:	b09d      	sub	sp, #116	@ 0x74
 8006288:	4607      	mov	r7, r0
 800628a:	460d      	mov	r5, r1
 800628c:	4614      	mov	r4, r2
 800628e:	d510      	bpl.n	80062b2 <_svfiprintf_r+0x36>
 8006290:	690b      	ldr	r3, [r1, #16]
 8006292:	b973      	cbnz	r3, 80062b2 <_svfiprintf_r+0x36>
 8006294:	2140      	movs	r1, #64	@ 0x40
 8006296:	f7ff ff09 	bl	80060ac <_malloc_r>
 800629a:	6028      	str	r0, [r5, #0]
 800629c:	6128      	str	r0, [r5, #16]
 800629e:	b930      	cbnz	r0, 80062ae <_svfiprintf_r+0x32>
 80062a0:	230c      	movs	r3, #12
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295
 80062a8:	b01d      	add	sp, #116	@ 0x74
 80062aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ae:	2340      	movs	r3, #64	@ 0x40
 80062b0:	616b      	str	r3, [r5, #20]
 80062b2:	2300      	movs	r3, #0
 80062b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062b6:	2320      	movs	r3, #32
 80062b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80062c0:	2330      	movs	r3, #48	@ 0x30
 80062c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006460 <_svfiprintf_r+0x1e4>
 80062c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062ca:	f04f 0901 	mov.w	r9, #1
 80062ce:	4623      	mov	r3, r4
 80062d0:	469a      	mov	sl, r3
 80062d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062d6:	b10a      	cbz	r2, 80062dc <_svfiprintf_r+0x60>
 80062d8:	2a25      	cmp	r2, #37	@ 0x25
 80062da:	d1f9      	bne.n	80062d0 <_svfiprintf_r+0x54>
 80062dc:	ebba 0b04 	subs.w	fp, sl, r4
 80062e0:	d00b      	beq.n	80062fa <_svfiprintf_r+0x7e>
 80062e2:	465b      	mov	r3, fp
 80062e4:	4622      	mov	r2, r4
 80062e6:	4629      	mov	r1, r5
 80062e8:	4638      	mov	r0, r7
 80062ea:	f7ff ff6b 	bl	80061c4 <__ssputs_r>
 80062ee:	3001      	adds	r0, #1
 80062f0:	f000 80a7 	beq.w	8006442 <_svfiprintf_r+0x1c6>
 80062f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062f6:	445a      	add	r2, fp
 80062f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80062fa:	f89a 3000 	ldrb.w	r3, [sl]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 809f 	beq.w	8006442 <_svfiprintf_r+0x1c6>
 8006304:	2300      	movs	r3, #0
 8006306:	f04f 32ff 	mov.w	r2, #4294967295
 800630a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800630e:	f10a 0a01 	add.w	sl, sl, #1
 8006312:	9304      	str	r3, [sp, #16]
 8006314:	9307      	str	r3, [sp, #28]
 8006316:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800631a:	931a      	str	r3, [sp, #104]	@ 0x68
 800631c:	4654      	mov	r4, sl
 800631e:	2205      	movs	r2, #5
 8006320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006324:	484e      	ldr	r0, [pc, #312]	@ (8006460 <_svfiprintf_r+0x1e4>)
 8006326:	f7f9 ff73 	bl	8000210 <memchr>
 800632a:	9a04      	ldr	r2, [sp, #16]
 800632c:	b9d8      	cbnz	r0, 8006366 <_svfiprintf_r+0xea>
 800632e:	06d0      	lsls	r0, r2, #27
 8006330:	bf44      	itt	mi
 8006332:	2320      	movmi	r3, #32
 8006334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006338:	0711      	lsls	r1, r2, #28
 800633a:	bf44      	itt	mi
 800633c:	232b      	movmi	r3, #43	@ 0x2b
 800633e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006342:	f89a 3000 	ldrb.w	r3, [sl]
 8006346:	2b2a      	cmp	r3, #42	@ 0x2a
 8006348:	d015      	beq.n	8006376 <_svfiprintf_r+0xfa>
 800634a:	9a07      	ldr	r2, [sp, #28]
 800634c:	4654      	mov	r4, sl
 800634e:	2000      	movs	r0, #0
 8006350:	f04f 0c0a 	mov.w	ip, #10
 8006354:	4621      	mov	r1, r4
 8006356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800635a:	3b30      	subs	r3, #48	@ 0x30
 800635c:	2b09      	cmp	r3, #9
 800635e:	d94b      	bls.n	80063f8 <_svfiprintf_r+0x17c>
 8006360:	b1b0      	cbz	r0, 8006390 <_svfiprintf_r+0x114>
 8006362:	9207      	str	r2, [sp, #28]
 8006364:	e014      	b.n	8006390 <_svfiprintf_r+0x114>
 8006366:	eba0 0308 	sub.w	r3, r0, r8
 800636a:	fa09 f303 	lsl.w	r3, r9, r3
 800636e:	4313      	orrs	r3, r2
 8006370:	9304      	str	r3, [sp, #16]
 8006372:	46a2      	mov	sl, r4
 8006374:	e7d2      	b.n	800631c <_svfiprintf_r+0xa0>
 8006376:	9b03      	ldr	r3, [sp, #12]
 8006378:	1d19      	adds	r1, r3, #4
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	9103      	str	r1, [sp, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	bfbb      	ittet	lt
 8006382:	425b      	neglt	r3, r3
 8006384:	f042 0202 	orrlt.w	r2, r2, #2
 8006388:	9307      	strge	r3, [sp, #28]
 800638a:	9307      	strlt	r3, [sp, #28]
 800638c:	bfb8      	it	lt
 800638e:	9204      	strlt	r2, [sp, #16]
 8006390:	7823      	ldrb	r3, [r4, #0]
 8006392:	2b2e      	cmp	r3, #46	@ 0x2e
 8006394:	d10a      	bne.n	80063ac <_svfiprintf_r+0x130>
 8006396:	7863      	ldrb	r3, [r4, #1]
 8006398:	2b2a      	cmp	r3, #42	@ 0x2a
 800639a:	d132      	bne.n	8006402 <_svfiprintf_r+0x186>
 800639c:	9b03      	ldr	r3, [sp, #12]
 800639e:	1d1a      	adds	r2, r3, #4
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	9203      	str	r2, [sp, #12]
 80063a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063a8:	3402      	adds	r4, #2
 80063aa:	9305      	str	r3, [sp, #20]
 80063ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006470 <_svfiprintf_r+0x1f4>
 80063b0:	7821      	ldrb	r1, [r4, #0]
 80063b2:	2203      	movs	r2, #3
 80063b4:	4650      	mov	r0, sl
 80063b6:	f7f9 ff2b 	bl	8000210 <memchr>
 80063ba:	b138      	cbz	r0, 80063cc <_svfiprintf_r+0x150>
 80063bc:	9b04      	ldr	r3, [sp, #16]
 80063be:	eba0 000a 	sub.w	r0, r0, sl
 80063c2:	2240      	movs	r2, #64	@ 0x40
 80063c4:	4082      	lsls	r2, r0
 80063c6:	4313      	orrs	r3, r2
 80063c8:	3401      	adds	r4, #1
 80063ca:	9304      	str	r3, [sp, #16]
 80063cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d0:	4824      	ldr	r0, [pc, #144]	@ (8006464 <_svfiprintf_r+0x1e8>)
 80063d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063d6:	2206      	movs	r2, #6
 80063d8:	f7f9 ff1a 	bl	8000210 <memchr>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d036      	beq.n	800644e <_svfiprintf_r+0x1d2>
 80063e0:	4b21      	ldr	r3, [pc, #132]	@ (8006468 <_svfiprintf_r+0x1ec>)
 80063e2:	bb1b      	cbnz	r3, 800642c <_svfiprintf_r+0x1b0>
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	3307      	adds	r3, #7
 80063e8:	f023 0307 	bic.w	r3, r3, #7
 80063ec:	3308      	adds	r3, #8
 80063ee:	9303      	str	r3, [sp, #12]
 80063f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f2:	4433      	add	r3, r6
 80063f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063f6:	e76a      	b.n	80062ce <_svfiprintf_r+0x52>
 80063f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80063fc:	460c      	mov	r4, r1
 80063fe:	2001      	movs	r0, #1
 8006400:	e7a8      	b.n	8006354 <_svfiprintf_r+0xd8>
 8006402:	2300      	movs	r3, #0
 8006404:	3401      	adds	r4, #1
 8006406:	9305      	str	r3, [sp, #20]
 8006408:	4619      	mov	r1, r3
 800640a:	f04f 0c0a 	mov.w	ip, #10
 800640e:	4620      	mov	r0, r4
 8006410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006414:	3a30      	subs	r2, #48	@ 0x30
 8006416:	2a09      	cmp	r2, #9
 8006418:	d903      	bls.n	8006422 <_svfiprintf_r+0x1a6>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0c6      	beq.n	80063ac <_svfiprintf_r+0x130>
 800641e:	9105      	str	r1, [sp, #20]
 8006420:	e7c4      	b.n	80063ac <_svfiprintf_r+0x130>
 8006422:	fb0c 2101 	mla	r1, ip, r1, r2
 8006426:	4604      	mov	r4, r0
 8006428:	2301      	movs	r3, #1
 800642a:	e7f0      	b.n	800640e <_svfiprintf_r+0x192>
 800642c:	ab03      	add	r3, sp, #12
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	462a      	mov	r2, r5
 8006432:	4b0e      	ldr	r3, [pc, #56]	@ (800646c <_svfiprintf_r+0x1f0>)
 8006434:	a904      	add	r1, sp, #16
 8006436:	4638      	mov	r0, r7
 8006438:	f3af 8000 	nop.w
 800643c:	1c42      	adds	r2, r0, #1
 800643e:	4606      	mov	r6, r0
 8006440:	d1d6      	bne.n	80063f0 <_svfiprintf_r+0x174>
 8006442:	89ab      	ldrh	r3, [r5, #12]
 8006444:	065b      	lsls	r3, r3, #25
 8006446:	f53f af2d 	bmi.w	80062a4 <_svfiprintf_r+0x28>
 800644a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800644c:	e72c      	b.n	80062a8 <_svfiprintf_r+0x2c>
 800644e:	ab03      	add	r3, sp, #12
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	462a      	mov	r2, r5
 8006454:	4b05      	ldr	r3, [pc, #20]	@ (800646c <_svfiprintf_r+0x1f0>)
 8006456:	a904      	add	r1, sp, #16
 8006458:	4638      	mov	r0, r7
 800645a:	f000 f9bb 	bl	80067d4 <_printf_i>
 800645e:	e7ed      	b.n	800643c <_svfiprintf_r+0x1c0>
 8006460:	08006fa0 	.word	0x08006fa0
 8006464:	08006faa 	.word	0x08006faa
 8006468:	00000000 	.word	0x00000000
 800646c:	080061c5 	.word	0x080061c5
 8006470:	08006fa6 	.word	0x08006fa6

08006474 <__sfputc_r>:
 8006474:	6893      	ldr	r3, [r2, #8]
 8006476:	3b01      	subs	r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	b410      	push	{r4}
 800647c:	6093      	str	r3, [r2, #8]
 800647e:	da08      	bge.n	8006492 <__sfputc_r+0x1e>
 8006480:	6994      	ldr	r4, [r2, #24]
 8006482:	42a3      	cmp	r3, r4
 8006484:	db01      	blt.n	800648a <__sfputc_r+0x16>
 8006486:	290a      	cmp	r1, #10
 8006488:	d103      	bne.n	8006492 <__sfputc_r+0x1e>
 800648a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800648e:	f000 bb6d 	b.w	8006b6c <__swbuf_r>
 8006492:	6813      	ldr	r3, [r2, #0]
 8006494:	1c58      	adds	r0, r3, #1
 8006496:	6010      	str	r0, [r2, #0]
 8006498:	7019      	strb	r1, [r3, #0]
 800649a:	4608      	mov	r0, r1
 800649c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <__sfputs_r>:
 80064a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a4:	4606      	mov	r6, r0
 80064a6:	460f      	mov	r7, r1
 80064a8:	4614      	mov	r4, r2
 80064aa:	18d5      	adds	r5, r2, r3
 80064ac:	42ac      	cmp	r4, r5
 80064ae:	d101      	bne.n	80064b4 <__sfputs_r+0x12>
 80064b0:	2000      	movs	r0, #0
 80064b2:	e007      	b.n	80064c4 <__sfputs_r+0x22>
 80064b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b8:	463a      	mov	r2, r7
 80064ba:	4630      	mov	r0, r6
 80064bc:	f7ff ffda 	bl	8006474 <__sfputc_r>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d1f3      	bne.n	80064ac <__sfputs_r+0xa>
 80064c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064c8 <_vfiprintf_r>:
 80064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	460d      	mov	r5, r1
 80064ce:	b09d      	sub	sp, #116	@ 0x74
 80064d0:	4614      	mov	r4, r2
 80064d2:	4698      	mov	r8, r3
 80064d4:	4606      	mov	r6, r0
 80064d6:	b118      	cbz	r0, 80064e0 <_vfiprintf_r+0x18>
 80064d8:	6a03      	ldr	r3, [r0, #32]
 80064da:	b90b      	cbnz	r3, 80064e0 <_vfiprintf_r+0x18>
 80064dc:	f7ff fbee 	bl	8005cbc <__sinit>
 80064e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064e2:	07d9      	lsls	r1, r3, #31
 80064e4:	d405      	bmi.n	80064f2 <_vfiprintf_r+0x2a>
 80064e6:	89ab      	ldrh	r3, [r5, #12]
 80064e8:	059a      	lsls	r2, r3, #22
 80064ea:	d402      	bmi.n	80064f2 <_vfiprintf_r+0x2a>
 80064ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064ee:	f7ff fd60 	bl	8005fb2 <__retarget_lock_acquire_recursive>
 80064f2:	89ab      	ldrh	r3, [r5, #12]
 80064f4:	071b      	lsls	r3, r3, #28
 80064f6:	d501      	bpl.n	80064fc <_vfiprintf_r+0x34>
 80064f8:	692b      	ldr	r3, [r5, #16]
 80064fa:	b99b      	cbnz	r3, 8006524 <_vfiprintf_r+0x5c>
 80064fc:	4629      	mov	r1, r5
 80064fe:	4630      	mov	r0, r6
 8006500:	f000 fb72 	bl	8006be8 <__swsetup_r>
 8006504:	b170      	cbz	r0, 8006524 <_vfiprintf_r+0x5c>
 8006506:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006508:	07dc      	lsls	r4, r3, #31
 800650a:	d504      	bpl.n	8006516 <_vfiprintf_r+0x4e>
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	b01d      	add	sp, #116	@ 0x74
 8006512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006516:	89ab      	ldrh	r3, [r5, #12]
 8006518:	0598      	lsls	r0, r3, #22
 800651a:	d4f7      	bmi.n	800650c <_vfiprintf_r+0x44>
 800651c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800651e:	f7ff fd49 	bl	8005fb4 <__retarget_lock_release_recursive>
 8006522:	e7f3      	b.n	800650c <_vfiprintf_r+0x44>
 8006524:	2300      	movs	r3, #0
 8006526:	9309      	str	r3, [sp, #36]	@ 0x24
 8006528:	2320      	movs	r3, #32
 800652a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800652e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006532:	2330      	movs	r3, #48	@ 0x30
 8006534:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80066e4 <_vfiprintf_r+0x21c>
 8006538:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800653c:	f04f 0901 	mov.w	r9, #1
 8006540:	4623      	mov	r3, r4
 8006542:	469a      	mov	sl, r3
 8006544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006548:	b10a      	cbz	r2, 800654e <_vfiprintf_r+0x86>
 800654a:	2a25      	cmp	r2, #37	@ 0x25
 800654c:	d1f9      	bne.n	8006542 <_vfiprintf_r+0x7a>
 800654e:	ebba 0b04 	subs.w	fp, sl, r4
 8006552:	d00b      	beq.n	800656c <_vfiprintf_r+0xa4>
 8006554:	465b      	mov	r3, fp
 8006556:	4622      	mov	r2, r4
 8006558:	4629      	mov	r1, r5
 800655a:	4630      	mov	r0, r6
 800655c:	f7ff ffa1 	bl	80064a2 <__sfputs_r>
 8006560:	3001      	adds	r0, #1
 8006562:	f000 80a7 	beq.w	80066b4 <_vfiprintf_r+0x1ec>
 8006566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006568:	445a      	add	r2, fp
 800656a:	9209      	str	r2, [sp, #36]	@ 0x24
 800656c:	f89a 3000 	ldrb.w	r3, [sl]
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 809f 	beq.w	80066b4 <_vfiprintf_r+0x1ec>
 8006576:	2300      	movs	r3, #0
 8006578:	f04f 32ff 	mov.w	r2, #4294967295
 800657c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006580:	f10a 0a01 	add.w	sl, sl, #1
 8006584:	9304      	str	r3, [sp, #16]
 8006586:	9307      	str	r3, [sp, #28]
 8006588:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800658c:	931a      	str	r3, [sp, #104]	@ 0x68
 800658e:	4654      	mov	r4, sl
 8006590:	2205      	movs	r2, #5
 8006592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006596:	4853      	ldr	r0, [pc, #332]	@ (80066e4 <_vfiprintf_r+0x21c>)
 8006598:	f7f9 fe3a 	bl	8000210 <memchr>
 800659c:	9a04      	ldr	r2, [sp, #16]
 800659e:	b9d8      	cbnz	r0, 80065d8 <_vfiprintf_r+0x110>
 80065a0:	06d1      	lsls	r1, r2, #27
 80065a2:	bf44      	itt	mi
 80065a4:	2320      	movmi	r3, #32
 80065a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065aa:	0713      	lsls	r3, r2, #28
 80065ac:	bf44      	itt	mi
 80065ae:	232b      	movmi	r3, #43	@ 0x2b
 80065b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065b4:	f89a 3000 	ldrb.w	r3, [sl]
 80065b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80065ba:	d015      	beq.n	80065e8 <_vfiprintf_r+0x120>
 80065bc:	9a07      	ldr	r2, [sp, #28]
 80065be:	4654      	mov	r4, sl
 80065c0:	2000      	movs	r0, #0
 80065c2:	f04f 0c0a 	mov.w	ip, #10
 80065c6:	4621      	mov	r1, r4
 80065c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065cc:	3b30      	subs	r3, #48	@ 0x30
 80065ce:	2b09      	cmp	r3, #9
 80065d0:	d94b      	bls.n	800666a <_vfiprintf_r+0x1a2>
 80065d2:	b1b0      	cbz	r0, 8006602 <_vfiprintf_r+0x13a>
 80065d4:	9207      	str	r2, [sp, #28]
 80065d6:	e014      	b.n	8006602 <_vfiprintf_r+0x13a>
 80065d8:	eba0 0308 	sub.w	r3, r0, r8
 80065dc:	fa09 f303 	lsl.w	r3, r9, r3
 80065e0:	4313      	orrs	r3, r2
 80065e2:	9304      	str	r3, [sp, #16]
 80065e4:	46a2      	mov	sl, r4
 80065e6:	e7d2      	b.n	800658e <_vfiprintf_r+0xc6>
 80065e8:	9b03      	ldr	r3, [sp, #12]
 80065ea:	1d19      	adds	r1, r3, #4
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	9103      	str	r1, [sp, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	bfbb      	ittet	lt
 80065f4:	425b      	neglt	r3, r3
 80065f6:	f042 0202 	orrlt.w	r2, r2, #2
 80065fa:	9307      	strge	r3, [sp, #28]
 80065fc:	9307      	strlt	r3, [sp, #28]
 80065fe:	bfb8      	it	lt
 8006600:	9204      	strlt	r2, [sp, #16]
 8006602:	7823      	ldrb	r3, [r4, #0]
 8006604:	2b2e      	cmp	r3, #46	@ 0x2e
 8006606:	d10a      	bne.n	800661e <_vfiprintf_r+0x156>
 8006608:	7863      	ldrb	r3, [r4, #1]
 800660a:	2b2a      	cmp	r3, #42	@ 0x2a
 800660c:	d132      	bne.n	8006674 <_vfiprintf_r+0x1ac>
 800660e:	9b03      	ldr	r3, [sp, #12]
 8006610:	1d1a      	adds	r2, r3, #4
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	9203      	str	r2, [sp, #12]
 8006616:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800661a:	3402      	adds	r4, #2
 800661c:	9305      	str	r3, [sp, #20]
 800661e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80066f4 <_vfiprintf_r+0x22c>
 8006622:	7821      	ldrb	r1, [r4, #0]
 8006624:	2203      	movs	r2, #3
 8006626:	4650      	mov	r0, sl
 8006628:	f7f9 fdf2 	bl	8000210 <memchr>
 800662c:	b138      	cbz	r0, 800663e <_vfiprintf_r+0x176>
 800662e:	9b04      	ldr	r3, [sp, #16]
 8006630:	eba0 000a 	sub.w	r0, r0, sl
 8006634:	2240      	movs	r2, #64	@ 0x40
 8006636:	4082      	lsls	r2, r0
 8006638:	4313      	orrs	r3, r2
 800663a:	3401      	adds	r4, #1
 800663c:	9304      	str	r3, [sp, #16]
 800663e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006642:	4829      	ldr	r0, [pc, #164]	@ (80066e8 <_vfiprintf_r+0x220>)
 8006644:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006648:	2206      	movs	r2, #6
 800664a:	f7f9 fde1 	bl	8000210 <memchr>
 800664e:	2800      	cmp	r0, #0
 8006650:	d03f      	beq.n	80066d2 <_vfiprintf_r+0x20a>
 8006652:	4b26      	ldr	r3, [pc, #152]	@ (80066ec <_vfiprintf_r+0x224>)
 8006654:	bb1b      	cbnz	r3, 800669e <_vfiprintf_r+0x1d6>
 8006656:	9b03      	ldr	r3, [sp, #12]
 8006658:	3307      	adds	r3, #7
 800665a:	f023 0307 	bic.w	r3, r3, #7
 800665e:	3308      	adds	r3, #8
 8006660:	9303      	str	r3, [sp, #12]
 8006662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006664:	443b      	add	r3, r7
 8006666:	9309      	str	r3, [sp, #36]	@ 0x24
 8006668:	e76a      	b.n	8006540 <_vfiprintf_r+0x78>
 800666a:	fb0c 3202 	mla	r2, ip, r2, r3
 800666e:	460c      	mov	r4, r1
 8006670:	2001      	movs	r0, #1
 8006672:	e7a8      	b.n	80065c6 <_vfiprintf_r+0xfe>
 8006674:	2300      	movs	r3, #0
 8006676:	3401      	adds	r4, #1
 8006678:	9305      	str	r3, [sp, #20]
 800667a:	4619      	mov	r1, r3
 800667c:	f04f 0c0a 	mov.w	ip, #10
 8006680:	4620      	mov	r0, r4
 8006682:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006686:	3a30      	subs	r2, #48	@ 0x30
 8006688:	2a09      	cmp	r2, #9
 800668a:	d903      	bls.n	8006694 <_vfiprintf_r+0x1cc>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0c6      	beq.n	800661e <_vfiprintf_r+0x156>
 8006690:	9105      	str	r1, [sp, #20]
 8006692:	e7c4      	b.n	800661e <_vfiprintf_r+0x156>
 8006694:	fb0c 2101 	mla	r1, ip, r1, r2
 8006698:	4604      	mov	r4, r0
 800669a:	2301      	movs	r3, #1
 800669c:	e7f0      	b.n	8006680 <_vfiprintf_r+0x1b8>
 800669e:	ab03      	add	r3, sp, #12
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	462a      	mov	r2, r5
 80066a4:	4b12      	ldr	r3, [pc, #72]	@ (80066f0 <_vfiprintf_r+0x228>)
 80066a6:	a904      	add	r1, sp, #16
 80066a8:	4630      	mov	r0, r6
 80066aa:	f3af 8000 	nop.w
 80066ae:	4607      	mov	r7, r0
 80066b0:	1c78      	adds	r0, r7, #1
 80066b2:	d1d6      	bne.n	8006662 <_vfiprintf_r+0x19a>
 80066b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066b6:	07d9      	lsls	r1, r3, #31
 80066b8:	d405      	bmi.n	80066c6 <_vfiprintf_r+0x1fe>
 80066ba:	89ab      	ldrh	r3, [r5, #12]
 80066bc:	059a      	lsls	r2, r3, #22
 80066be:	d402      	bmi.n	80066c6 <_vfiprintf_r+0x1fe>
 80066c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066c2:	f7ff fc77 	bl	8005fb4 <__retarget_lock_release_recursive>
 80066c6:	89ab      	ldrh	r3, [r5, #12]
 80066c8:	065b      	lsls	r3, r3, #25
 80066ca:	f53f af1f 	bmi.w	800650c <_vfiprintf_r+0x44>
 80066ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066d0:	e71e      	b.n	8006510 <_vfiprintf_r+0x48>
 80066d2:	ab03      	add	r3, sp, #12
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	462a      	mov	r2, r5
 80066d8:	4b05      	ldr	r3, [pc, #20]	@ (80066f0 <_vfiprintf_r+0x228>)
 80066da:	a904      	add	r1, sp, #16
 80066dc:	4630      	mov	r0, r6
 80066de:	f000 f879 	bl	80067d4 <_printf_i>
 80066e2:	e7e4      	b.n	80066ae <_vfiprintf_r+0x1e6>
 80066e4:	08006fa0 	.word	0x08006fa0
 80066e8:	08006faa 	.word	0x08006faa
 80066ec:	00000000 	.word	0x00000000
 80066f0:	080064a3 	.word	0x080064a3
 80066f4:	08006fa6 	.word	0x08006fa6

080066f8 <_printf_common>:
 80066f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066fc:	4616      	mov	r6, r2
 80066fe:	4698      	mov	r8, r3
 8006700:	688a      	ldr	r2, [r1, #8]
 8006702:	690b      	ldr	r3, [r1, #16]
 8006704:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006708:	4293      	cmp	r3, r2
 800670a:	bfb8      	it	lt
 800670c:	4613      	movlt	r3, r2
 800670e:	6033      	str	r3, [r6, #0]
 8006710:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006714:	4607      	mov	r7, r0
 8006716:	460c      	mov	r4, r1
 8006718:	b10a      	cbz	r2, 800671e <_printf_common+0x26>
 800671a:	3301      	adds	r3, #1
 800671c:	6033      	str	r3, [r6, #0]
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	0699      	lsls	r1, r3, #26
 8006722:	bf42      	ittt	mi
 8006724:	6833      	ldrmi	r3, [r6, #0]
 8006726:	3302      	addmi	r3, #2
 8006728:	6033      	strmi	r3, [r6, #0]
 800672a:	6825      	ldr	r5, [r4, #0]
 800672c:	f015 0506 	ands.w	r5, r5, #6
 8006730:	d106      	bne.n	8006740 <_printf_common+0x48>
 8006732:	f104 0a19 	add.w	sl, r4, #25
 8006736:	68e3      	ldr	r3, [r4, #12]
 8006738:	6832      	ldr	r2, [r6, #0]
 800673a:	1a9b      	subs	r3, r3, r2
 800673c:	42ab      	cmp	r3, r5
 800673e:	dc26      	bgt.n	800678e <_printf_common+0x96>
 8006740:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006744:	6822      	ldr	r2, [r4, #0]
 8006746:	3b00      	subs	r3, #0
 8006748:	bf18      	it	ne
 800674a:	2301      	movne	r3, #1
 800674c:	0692      	lsls	r2, r2, #26
 800674e:	d42b      	bmi.n	80067a8 <_printf_common+0xb0>
 8006750:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006754:	4641      	mov	r1, r8
 8006756:	4638      	mov	r0, r7
 8006758:	47c8      	blx	r9
 800675a:	3001      	adds	r0, #1
 800675c:	d01e      	beq.n	800679c <_printf_common+0xa4>
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	6922      	ldr	r2, [r4, #16]
 8006762:	f003 0306 	and.w	r3, r3, #6
 8006766:	2b04      	cmp	r3, #4
 8006768:	bf02      	ittt	eq
 800676a:	68e5      	ldreq	r5, [r4, #12]
 800676c:	6833      	ldreq	r3, [r6, #0]
 800676e:	1aed      	subeq	r5, r5, r3
 8006770:	68a3      	ldr	r3, [r4, #8]
 8006772:	bf0c      	ite	eq
 8006774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006778:	2500      	movne	r5, #0
 800677a:	4293      	cmp	r3, r2
 800677c:	bfc4      	itt	gt
 800677e:	1a9b      	subgt	r3, r3, r2
 8006780:	18ed      	addgt	r5, r5, r3
 8006782:	2600      	movs	r6, #0
 8006784:	341a      	adds	r4, #26
 8006786:	42b5      	cmp	r5, r6
 8006788:	d11a      	bne.n	80067c0 <_printf_common+0xc8>
 800678a:	2000      	movs	r0, #0
 800678c:	e008      	b.n	80067a0 <_printf_common+0xa8>
 800678e:	2301      	movs	r3, #1
 8006790:	4652      	mov	r2, sl
 8006792:	4641      	mov	r1, r8
 8006794:	4638      	mov	r0, r7
 8006796:	47c8      	blx	r9
 8006798:	3001      	adds	r0, #1
 800679a:	d103      	bne.n	80067a4 <_printf_common+0xac>
 800679c:	f04f 30ff 	mov.w	r0, #4294967295
 80067a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a4:	3501      	adds	r5, #1
 80067a6:	e7c6      	b.n	8006736 <_printf_common+0x3e>
 80067a8:	18e1      	adds	r1, r4, r3
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	2030      	movs	r0, #48	@ 0x30
 80067ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067b2:	4422      	add	r2, r4
 80067b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067bc:	3302      	adds	r3, #2
 80067be:	e7c7      	b.n	8006750 <_printf_common+0x58>
 80067c0:	2301      	movs	r3, #1
 80067c2:	4622      	mov	r2, r4
 80067c4:	4641      	mov	r1, r8
 80067c6:	4638      	mov	r0, r7
 80067c8:	47c8      	blx	r9
 80067ca:	3001      	adds	r0, #1
 80067cc:	d0e6      	beq.n	800679c <_printf_common+0xa4>
 80067ce:	3601      	adds	r6, #1
 80067d0:	e7d9      	b.n	8006786 <_printf_common+0x8e>
	...

080067d4 <_printf_i>:
 80067d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	7e0f      	ldrb	r7, [r1, #24]
 80067da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067dc:	2f78      	cmp	r7, #120	@ 0x78
 80067de:	4691      	mov	r9, r2
 80067e0:	4680      	mov	r8, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	469a      	mov	sl, r3
 80067e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067ea:	d807      	bhi.n	80067fc <_printf_i+0x28>
 80067ec:	2f62      	cmp	r7, #98	@ 0x62
 80067ee:	d80a      	bhi.n	8006806 <_printf_i+0x32>
 80067f0:	2f00      	cmp	r7, #0
 80067f2:	f000 80d2 	beq.w	800699a <_printf_i+0x1c6>
 80067f6:	2f58      	cmp	r7, #88	@ 0x58
 80067f8:	f000 80b9 	beq.w	800696e <_printf_i+0x19a>
 80067fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006800:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006804:	e03a      	b.n	800687c <_printf_i+0xa8>
 8006806:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800680a:	2b15      	cmp	r3, #21
 800680c:	d8f6      	bhi.n	80067fc <_printf_i+0x28>
 800680e:	a101      	add	r1, pc, #4	@ (adr r1, 8006814 <_printf_i+0x40>)
 8006810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006814:	0800686d 	.word	0x0800686d
 8006818:	08006881 	.word	0x08006881
 800681c:	080067fd 	.word	0x080067fd
 8006820:	080067fd 	.word	0x080067fd
 8006824:	080067fd 	.word	0x080067fd
 8006828:	080067fd 	.word	0x080067fd
 800682c:	08006881 	.word	0x08006881
 8006830:	080067fd 	.word	0x080067fd
 8006834:	080067fd 	.word	0x080067fd
 8006838:	080067fd 	.word	0x080067fd
 800683c:	080067fd 	.word	0x080067fd
 8006840:	08006981 	.word	0x08006981
 8006844:	080068ab 	.word	0x080068ab
 8006848:	0800693b 	.word	0x0800693b
 800684c:	080067fd 	.word	0x080067fd
 8006850:	080067fd 	.word	0x080067fd
 8006854:	080069a3 	.word	0x080069a3
 8006858:	080067fd 	.word	0x080067fd
 800685c:	080068ab 	.word	0x080068ab
 8006860:	080067fd 	.word	0x080067fd
 8006864:	080067fd 	.word	0x080067fd
 8006868:	08006943 	.word	0x08006943
 800686c:	6833      	ldr	r3, [r6, #0]
 800686e:	1d1a      	adds	r2, r3, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6032      	str	r2, [r6, #0]
 8006874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006878:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800687c:	2301      	movs	r3, #1
 800687e:	e09d      	b.n	80069bc <_printf_i+0x1e8>
 8006880:	6833      	ldr	r3, [r6, #0]
 8006882:	6820      	ldr	r0, [r4, #0]
 8006884:	1d19      	adds	r1, r3, #4
 8006886:	6031      	str	r1, [r6, #0]
 8006888:	0606      	lsls	r6, r0, #24
 800688a:	d501      	bpl.n	8006890 <_printf_i+0xbc>
 800688c:	681d      	ldr	r5, [r3, #0]
 800688e:	e003      	b.n	8006898 <_printf_i+0xc4>
 8006890:	0645      	lsls	r5, r0, #25
 8006892:	d5fb      	bpl.n	800688c <_printf_i+0xb8>
 8006894:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006898:	2d00      	cmp	r5, #0
 800689a:	da03      	bge.n	80068a4 <_printf_i+0xd0>
 800689c:	232d      	movs	r3, #45	@ 0x2d
 800689e:	426d      	negs	r5, r5
 80068a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068a4:	4859      	ldr	r0, [pc, #356]	@ (8006a0c <_printf_i+0x238>)
 80068a6:	230a      	movs	r3, #10
 80068a8:	e011      	b.n	80068ce <_printf_i+0xfa>
 80068aa:	6821      	ldr	r1, [r4, #0]
 80068ac:	6833      	ldr	r3, [r6, #0]
 80068ae:	0608      	lsls	r0, r1, #24
 80068b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80068b4:	d402      	bmi.n	80068bc <_printf_i+0xe8>
 80068b6:	0649      	lsls	r1, r1, #25
 80068b8:	bf48      	it	mi
 80068ba:	b2ad      	uxthmi	r5, r5
 80068bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80068be:	4853      	ldr	r0, [pc, #332]	@ (8006a0c <_printf_i+0x238>)
 80068c0:	6033      	str	r3, [r6, #0]
 80068c2:	bf14      	ite	ne
 80068c4:	230a      	movne	r3, #10
 80068c6:	2308      	moveq	r3, #8
 80068c8:	2100      	movs	r1, #0
 80068ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068ce:	6866      	ldr	r6, [r4, #4]
 80068d0:	60a6      	str	r6, [r4, #8]
 80068d2:	2e00      	cmp	r6, #0
 80068d4:	bfa2      	ittt	ge
 80068d6:	6821      	ldrge	r1, [r4, #0]
 80068d8:	f021 0104 	bicge.w	r1, r1, #4
 80068dc:	6021      	strge	r1, [r4, #0]
 80068de:	b90d      	cbnz	r5, 80068e4 <_printf_i+0x110>
 80068e0:	2e00      	cmp	r6, #0
 80068e2:	d04b      	beq.n	800697c <_printf_i+0x1a8>
 80068e4:	4616      	mov	r6, r2
 80068e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80068ea:	fb03 5711 	mls	r7, r3, r1, r5
 80068ee:	5dc7      	ldrb	r7, [r0, r7]
 80068f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068f4:	462f      	mov	r7, r5
 80068f6:	42bb      	cmp	r3, r7
 80068f8:	460d      	mov	r5, r1
 80068fa:	d9f4      	bls.n	80068e6 <_printf_i+0x112>
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d10b      	bne.n	8006918 <_printf_i+0x144>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	07df      	lsls	r7, r3, #31
 8006904:	d508      	bpl.n	8006918 <_printf_i+0x144>
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	6861      	ldr	r1, [r4, #4]
 800690a:	4299      	cmp	r1, r3
 800690c:	bfde      	ittt	le
 800690e:	2330      	movle	r3, #48	@ 0x30
 8006910:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006914:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006918:	1b92      	subs	r2, r2, r6
 800691a:	6122      	str	r2, [r4, #16]
 800691c:	f8cd a000 	str.w	sl, [sp]
 8006920:	464b      	mov	r3, r9
 8006922:	aa03      	add	r2, sp, #12
 8006924:	4621      	mov	r1, r4
 8006926:	4640      	mov	r0, r8
 8006928:	f7ff fee6 	bl	80066f8 <_printf_common>
 800692c:	3001      	adds	r0, #1
 800692e:	d14a      	bne.n	80069c6 <_printf_i+0x1f2>
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	b004      	add	sp, #16
 8006936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	f043 0320 	orr.w	r3, r3, #32
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	4833      	ldr	r0, [pc, #204]	@ (8006a10 <_printf_i+0x23c>)
 8006944:	2778      	movs	r7, #120	@ 0x78
 8006946:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	6831      	ldr	r1, [r6, #0]
 800694e:	061f      	lsls	r7, r3, #24
 8006950:	f851 5b04 	ldr.w	r5, [r1], #4
 8006954:	d402      	bmi.n	800695c <_printf_i+0x188>
 8006956:	065f      	lsls	r7, r3, #25
 8006958:	bf48      	it	mi
 800695a:	b2ad      	uxthmi	r5, r5
 800695c:	6031      	str	r1, [r6, #0]
 800695e:	07d9      	lsls	r1, r3, #31
 8006960:	bf44      	itt	mi
 8006962:	f043 0320 	orrmi.w	r3, r3, #32
 8006966:	6023      	strmi	r3, [r4, #0]
 8006968:	b11d      	cbz	r5, 8006972 <_printf_i+0x19e>
 800696a:	2310      	movs	r3, #16
 800696c:	e7ac      	b.n	80068c8 <_printf_i+0xf4>
 800696e:	4827      	ldr	r0, [pc, #156]	@ (8006a0c <_printf_i+0x238>)
 8006970:	e7e9      	b.n	8006946 <_printf_i+0x172>
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	f023 0320 	bic.w	r3, r3, #32
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	e7f6      	b.n	800696a <_printf_i+0x196>
 800697c:	4616      	mov	r6, r2
 800697e:	e7bd      	b.n	80068fc <_printf_i+0x128>
 8006980:	6833      	ldr	r3, [r6, #0]
 8006982:	6825      	ldr	r5, [r4, #0]
 8006984:	6961      	ldr	r1, [r4, #20]
 8006986:	1d18      	adds	r0, r3, #4
 8006988:	6030      	str	r0, [r6, #0]
 800698a:	062e      	lsls	r6, r5, #24
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	d501      	bpl.n	8006994 <_printf_i+0x1c0>
 8006990:	6019      	str	r1, [r3, #0]
 8006992:	e002      	b.n	800699a <_printf_i+0x1c6>
 8006994:	0668      	lsls	r0, r5, #25
 8006996:	d5fb      	bpl.n	8006990 <_printf_i+0x1bc>
 8006998:	8019      	strh	r1, [r3, #0]
 800699a:	2300      	movs	r3, #0
 800699c:	6123      	str	r3, [r4, #16]
 800699e:	4616      	mov	r6, r2
 80069a0:	e7bc      	b.n	800691c <_printf_i+0x148>
 80069a2:	6833      	ldr	r3, [r6, #0]
 80069a4:	1d1a      	adds	r2, r3, #4
 80069a6:	6032      	str	r2, [r6, #0]
 80069a8:	681e      	ldr	r6, [r3, #0]
 80069aa:	6862      	ldr	r2, [r4, #4]
 80069ac:	2100      	movs	r1, #0
 80069ae:	4630      	mov	r0, r6
 80069b0:	f7f9 fc2e 	bl	8000210 <memchr>
 80069b4:	b108      	cbz	r0, 80069ba <_printf_i+0x1e6>
 80069b6:	1b80      	subs	r0, r0, r6
 80069b8:	6060      	str	r0, [r4, #4]
 80069ba:	6863      	ldr	r3, [r4, #4]
 80069bc:	6123      	str	r3, [r4, #16]
 80069be:	2300      	movs	r3, #0
 80069c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069c4:	e7aa      	b.n	800691c <_printf_i+0x148>
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	4632      	mov	r2, r6
 80069ca:	4649      	mov	r1, r9
 80069cc:	4640      	mov	r0, r8
 80069ce:	47d0      	blx	sl
 80069d0:	3001      	adds	r0, #1
 80069d2:	d0ad      	beq.n	8006930 <_printf_i+0x15c>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	079b      	lsls	r3, r3, #30
 80069d8:	d413      	bmi.n	8006a02 <_printf_i+0x22e>
 80069da:	68e0      	ldr	r0, [r4, #12]
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	4298      	cmp	r0, r3
 80069e0:	bfb8      	it	lt
 80069e2:	4618      	movlt	r0, r3
 80069e4:	e7a6      	b.n	8006934 <_printf_i+0x160>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4632      	mov	r2, r6
 80069ea:	4649      	mov	r1, r9
 80069ec:	4640      	mov	r0, r8
 80069ee:	47d0      	blx	sl
 80069f0:	3001      	adds	r0, #1
 80069f2:	d09d      	beq.n	8006930 <_printf_i+0x15c>
 80069f4:	3501      	adds	r5, #1
 80069f6:	68e3      	ldr	r3, [r4, #12]
 80069f8:	9903      	ldr	r1, [sp, #12]
 80069fa:	1a5b      	subs	r3, r3, r1
 80069fc:	42ab      	cmp	r3, r5
 80069fe:	dcf2      	bgt.n	80069e6 <_printf_i+0x212>
 8006a00:	e7eb      	b.n	80069da <_printf_i+0x206>
 8006a02:	2500      	movs	r5, #0
 8006a04:	f104 0619 	add.w	r6, r4, #25
 8006a08:	e7f5      	b.n	80069f6 <_printf_i+0x222>
 8006a0a:	bf00      	nop
 8006a0c:	08006fb1 	.word	0x08006fb1
 8006a10:	08006fc2 	.word	0x08006fc2

08006a14 <__sflush_r>:
 8006a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1c:	0716      	lsls	r6, r2, #28
 8006a1e:	4605      	mov	r5, r0
 8006a20:	460c      	mov	r4, r1
 8006a22:	d454      	bmi.n	8006ace <__sflush_r+0xba>
 8006a24:	684b      	ldr	r3, [r1, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	dc02      	bgt.n	8006a30 <__sflush_r+0x1c>
 8006a2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dd48      	ble.n	8006ac2 <__sflush_r+0xae>
 8006a30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a32:	2e00      	cmp	r6, #0
 8006a34:	d045      	beq.n	8006ac2 <__sflush_r+0xae>
 8006a36:	2300      	movs	r3, #0
 8006a38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a3c:	682f      	ldr	r7, [r5, #0]
 8006a3e:	6a21      	ldr	r1, [r4, #32]
 8006a40:	602b      	str	r3, [r5, #0]
 8006a42:	d030      	beq.n	8006aa6 <__sflush_r+0x92>
 8006a44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	0759      	lsls	r1, r3, #29
 8006a4a:	d505      	bpl.n	8006a58 <__sflush_r+0x44>
 8006a4c:	6863      	ldr	r3, [r4, #4]
 8006a4e:	1ad2      	subs	r2, r2, r3
 8006a50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a52:	b10b      	cbz	r3, 8006a58 <__sflush_r+0x44>
 8006a54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a56:	1ad2      	subs	r2, r2, r3
 8006a58:	2300      	movs	r3, #0
 8006a5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a5c:	6a21      	ldr	r1, [r4, #32]
 8006a5e:	4628      	mov	r0, r5
 8006a60:	47b0      	blx	r6
 8006a62:	1c43      	adds	r3, r0, #1
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	d106      	bne.n	8006a76 <__sflush_r+0x62>
 8006a68:	6829      	ldr	r1, [r5, #0]
 8006a6a:	291d      	cmp	r1, #29
 8006a6c:	d82b      	bhi.n	8006ac6 <__sflush_r+0xb2>
 8006a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8006b18 <__sflush_r+0x104>)
 8006a70:	410a      	asrs	r2, r1
 8006a72:	07d6      	lsls	r6, r2, #31
 8006a74:	d427      	bmi.n	8006ac6 <__sflush_r+0xb2>
 8006a76:	2200      	movs	r2, #0
 8006a78:	6062      	str	r2, [r4, #4]
 8006a7a:	04d9      	lsls	r1, r3, #19
 8006a7c:	6922      	ldr	r2, [r4, #16]
 8006a7e:	6022      	str	r2, [r4, #0]
 8006a80:	d504      	bpl.n	8006a8c <__sflush_r+0x78>
 8006a82:	1c42      	adds	r2, r0, #1
 8006a84:	d101      	bne.n	8006a8a <__sflush_r+0x76>
 8006a86:	682b      	ldr	r3, [r5, #0]
 8006a88:	b903      	cbnz	r3, 8006a8c <__sflush_r+0x78>
 8006a8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a8e:	602f      	str	r7, [r5, #0]
 8006a90:	b1b9      	cbz	r1, 8006ac2 <__sflush_r+0xae>
 8006a92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a96:	4299      	cmp	r1, r3
 8006a98:	d002      	beq.n	8006aa0 <__sflush_r+0x8c>
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f7ff fa9a 	bl	8005fd4 <_free_r>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006aa4:	e00d      	b.n	8006ac2 <__sflush_r+0xae>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b0      	blx	r6
 8006aac:	4602      	mov	r2, r0
 8006aae:	1c50      	adds	r0, r2, #1
 8006ab0:	d1c9      	bne.n	8006a46 <__sflush_r+0x32>
 8006ab2:	682b      	ldr	r3, [r5, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0c6      	beq.n	8006a46 <__sflush_r+0x32>
 8006ab8:	2b1d      	cmp	r3, #29
 8006aba:	d001      	beq.n	8006ac0 <__sflush_r+0xac>
 8006abc:	2b16      	cmp	r3, #22
 8006abe:	d11e      	bne.n	8006afe <__sflush_r+0xea>
 8006ac0:	602f      	str	r7, [r5, #0]
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	e022      	b.n	8006b0c <__sflush_r+0xf8>
 8006ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aca:	b21b      	sxth	r3, r3
 8006acc:	e01b      	b.n	8006b06 <__sflush_r+0xf2>
 8006ace:	690f      	ldr	r7, [r1, #16]
 8006ad0:	2f00      	cmp	r7, #0
 8006ad2:	d0f6      	beq.n	8006ac2 <__sflush_r+0xae>
 8006ad4:	0793      	lsls	r3, r2, #30
 8006ad6:	680e      	ldr	r6, [r1, #0]
 8006ad8:	bf08      	it	eq
 8006ada:	694b      	ldreq	r3, [r1, #20]
 8006adc:	600f      	str	r7, [r1, #0]
 8006ade:	bf18      	it	ne
 8006ae0:	2300      	movne	r3, #0
 8006ae2:	eba6 0807 	sub.w	r8, r6, r7
 8006ae6:	608b      	str	r3, [r1, #8]
 8006ae8:	f1b8 0f00 	cmp.w	r8, #0
 8006aec:	dde9      	ble.n	8006ac2 <__sflush_r+0xae>
 8006aee:	6a21      	ldr	r1, [r4, #32]
 8006af0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006af2:	4643      	mov	r3, r8
 8006af4:	463a      	mov	r2, r7
 8006af6:	4628      	mov	r0, r5
 8006af8:	47b0      	blx	r6
 8006afa:	2800      	cmp	r0, #0
 8006afc:	dc08      	bgt.n	8006b10 <__sflush_r+0xfc>
 8006afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b06:	81a3      	strh	r3, [r4, #12]
 8006b08:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b10:	4407      	add	r7, r0
 8006b12:	eba8 0800 	sub.w	r8, r8, r0
 8006b16:	e7e7      	b.n	8006ae8 <__sflush_r+0xd4>
 8006b18:	dfbffffe 	.word	0xdfbffffe

08006b1c <_fflush_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	690b      	ldr	r3, [r1, #16]
 8006b20:	4605      	mov	r5, r0
 8006b22:	460c      	mov	r4, r1
 8006b24:	b913      	cbnz	r3, 8006b2c <_fflush_r+0x10>
 8006b26:	2500      	movs	r5, #0
 8006b28:	4628      	mov	r0, r5
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
 8006b2c:	b118      	cbz	r0, 8006b36 <_fflush_r+0x1a>
 8006b2e:	6a03      	ldr	r3, [r0, #32]
 8006b30:	b90b      	cbnz	r3, 8006b36 <_fflush_r+0x1a>
 8006b32:	f7ff f8c3 	bl	8005cbc <__sinit>
 8006b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0f3      	beq.n	8006b26 <_fflush_r+0xa>
 8006b3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b40:	07d0      	lsls	r0, r2, #31
 8006b42:	d404      	bmi.n	8006b4e <_fflush_r+0x32>
 8006b44:	0599      	lsls	r1, r3, #22
 8006b46:	d402      	bmi.n	8006b4e <_fflush_r+0x32>
 8006b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b4a:	f7ff fa32 	bl	8005fb2 <__retarget_lock_acquire_recursive>
 8006b4e:	4628      	mov	r0, r5
 8006b50:	4621      	mov	r1, r4
 8006b52:	f7ff ff5f 	bl	8006a14 <__sflush_r>
 8006b56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b58:	07da      	lsls	r2, r3, #31
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	d4e4      	bmi.n	8006b28 <_fflush_r+0xc>
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	059b      	lsls	r3, r3, #22
 8006b62:	d4e1      	bmi.n	8006b28 <_fflush_r+0xc>
 8006b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b66:	f7ff fa25 	bl	8005fb4 <__retarget_lock_release_recursive>
 8006b6a:	e7dd      	b.n	8006b28 <_fflush_r+0xc>

08006b6c <__swbuf_r>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	460e      	mov	r6, r1
 8006b70:	4614      	mov	r4, r2
 8006b72:	4605      	mov	r5, r0
 8006b74:	b118      	cbz	r0, 8006b7e <__swbuf_r+0x12>
 8006b76:	6a03      	ldr	r3, [r0, #32]
 8006b78:	b90b      	cbnz	r3, 8006b7e <__swbuf_r+0x12>
 8006b7a:	f7ff f89f 	bl	8005cbc <__sinit>
 8006b7e:	69a3      	ldr	r3, [r4, #24]
 8006b80:	60a3      	str	r3, [r4, #8]
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	071a      	lsls	r2, r3, #28
 8006b86:	d501      	bpl.n	8006b8c <__swbuf_r+0x20>
 8006b88:	6923      	ldr	r3, [r4, #16]
 8006b8a:	b943      	cbnz	r3, 8006b9e <__swbuf_r+0x32>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f000 f82a 	bl	8006be8 <__swsetup_r>
 8006b94:	b118      	cbz	r0, 8006b9e <__swbuf_r+0x32>
 8006b96:	f04f 37ff 	mov.w	r7, #4294967295
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	6922      	ldr	r2, [r4, #16]
 8006ba2:	1a98      	subs	r0, r3, r2
 8006ba4:	6963      	ldr	r3, [r4, #20]
 8006ba6:	b2f6      	uxtb	r6, r6
 8006ba8:	4283      	cmp	r3, r0
 8006baa:	4637      	mov	r7, r6
 8006bac:	dc05      	bgt.n	8006bba <__swbuf_r+0x4e>
 8006bae:	4621      	mov	r1, r4
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	f7ff ffb3 	bl	8006b1c <_fflush_r>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d1ed      	bne.n	8006b96 <__swbuf_r+0x2a>
 8006bba:	68a3      	ldr	r3, [r4, #8]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	60a3      	str	r3, [r4, #8]
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	701e      	strb	r6, [r3, #0]
 8006bc8:	6962      	ldr	r2, [r4, #20]
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d004      	beq.n	8006bda <__swbuf_r+0x6e>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	07db      	lsls	r3, r3, #31
 8006bd4:	d5e1      	bpl.n	8006b9a <__swbuf_r+0x2e>
 8006bd6:	2e0a      	cmp	r6, #10
 8006bd8:	d1df      	bne.n	8006b9a <__swbuf_r+0x2e>
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f7ff ff9d 	bl	8006b1c <_fflush_r>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d0d9      	beq.n	8006b9a <__swbuf_r+0x2e>
 8006be6:	e7d6      	b.n	8006b96 <__swbuf_r+0x2a>

08006be8 <__swsetup_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4b29      	ldr	r3, [pc, #164]	@ (8006c90 <__swsetup_r+0xa8>)
 8006bec:	4605      	mov	r5, r0
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	b118      	cbz	r0, 8006bfc <__swsetup_r+0x14>
 8006bf4:	6a03      	ldr	r3, [r0, #32]
 8006bf6:	b90b      	cbnz	r3, 8006bfc <__swsetup_r+0x14>
 8006bf8:	f7ff f860 	bl	8005cbc <__sinit>
 8006bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c00:	0719      	lsls	r1, r3, #28
 8006c02:	d422      	bmi.n	8006c4a <__swsetup_r+0x62>
 8006c04:	06da      	lsls	r2, r3, #27
 8006c06:	d407      	bmi.n	8006c18 <__swsetup_r+0x30>
 8006c08:	2209      	movs	r2, #9
 8006c0a:	602a      	str	r2, [r5, #0]
 8006c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c10:	81a3      	strh	r3, [r4, #12]
 8006c12:	f04f 30ff 	mov.w	r0, #4294967295
 8006c16:	e033      	b.n	8006c80 <__swsetup_r+0x98>
 8006c18:	0758      	lsls	r0, r3, #29
 8006c1a:	d512      	bpl.n	8006c42 <__swsetup_r+0x5a>
 8006c1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c1e:	b141      	cbz	r1, 8006c32 <__swsetup_r+0x4a>
 8006c20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c24:	4299      	cmp	r1, r3
 8006c26:	d002      	beq.n	8006c2e <__swsetup_r+0x46>
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f7ff f9d3 	bl	8005fd4 <_free_r>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c38:	81a3      	strh	r3, [r4, #12]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6063      	str	r3, [r4, #4]
 8006c3e:	6923      	ldr	r3, [r4, #16]
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f043 0308 	orr.w	r3, r3, #8
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	b94b      	cbnz	r3, 8006c62 <__swsetup_r+0x7a>
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c58:	d003      	beq.n	8006c62 <__swsetup_r+0x7a>
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	f000 f897 	bl	8006d90 <__smakebuf_r>
 8006c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c66:	f013 0201 	ands.w	r2, r3, #1
 8006c6a:	d00a      	beq.n	8006c82 <__swsetup_r+0x9a>
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	60a2      	str	r2, [r4, #8]
 8006c70:	6962      	ldr	r2, [r4, #20]
 8006c72:	4252      	negs	r2, r2
 8006c74:	61a2      	str	r2, [r4, #24]
 8006c76:	6922      	ldr	r2, [r4, #16]
 8006c78:	b942      	cbnz	r2, 8006c8c <__swsetup_r+0xa4>
 8006c7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c7e:	d1c5      	bne.n	8006c0c <__swsetup_r+0x24>
 8006c80:	bd38      	pop	{r3, r4, r5, pc}
 8006c82:	0799      	lsls	r1, r3, #30
 8006c84:	bf58      	it	pl
 8006c86:	6962      	ldrpl	r2, [r4, #20]
 8006c88:	60a2      	str	r2, [r4, #8]
 8006c8a:	e7f4      	b.n	8006c76 <__swsetup_r+0x8e>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	e7f7      	b.n	8006c80 <__swsetup_r+0x98>
 8006c90:	2000001c 	.word	0x2000001c

08006c94 <memmove>:
 8006c94:	4288      	cmp	r0, r1
 8006c96:	b510      	push	{r4, lr}
 8006c98:	eb01 0402 	add.w	r4, r1, r2
 8006c9c:	d902      	bls.n	8006ca4 <memmove+0x10>
 8006c9e:	4284      	cmp	r4, r0
 8006ca0:	4623      	mov	r3, r4
 8006ca2:	d807      	bhi.n	8006cb4 <memmove+0x20>
 8006ca4:	1e43      	subs	r3, r0, #1
 8006ca6:	42a1      	cmp	r1, r4
 8006ca8:	d008      	beq.n	8006cbc <memmove+0x28>
 8006caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cb2:	e7f8      	b.n	8006ca6 <memmove+0x12>
 8006cb4:	4402      	add	r2, r0
 8006cb6:	4601      	mov	r1, r0
 8006cb8:	428a      	cmp	r2, r1
 8006cba:	d100      	bne.n	8006cbe <memmove+0x2a>
 8006cbc:	bd10      	pop	{r4, pc}
 8006cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cc6:	e7f7      	b.n	8006cb8 <memmove+0x24>

08006cc8 <_sbrk_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	4d06      	ldr	r5, [pc, #24]	@ (8006ce4 <_sbrk_r+0x1c>)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4604      	mov	r4, r0
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	f7fa fbcc 	bl	8001470 <_sbrk>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_sbrk_r+0x1a>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_sbrk_r+0x1a>
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	20004368 	.word	0x20004368

08006ce8 <_realloc_r>:
 8006ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cec:	4680      	mov	r8, r0
 8006cee:	4615      	mov	r5, r2
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	b921      	cbnz	r1, 8006cfe <_realloc_r+0x16>
 8006cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	f7ff b9d7 	b.w	80060ac <_malloc_r>
 8006cfe:	b92a      	cbnz	r2, 8006d0c <_realloc_r+0x24>
 8006d00:	f7ff f968 	bl	8005fd4 <_free_r>
 8006d04:	2400      	movs	r4, #0
 8006d06:	4620      	mov	r0, r4
 8006d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d0c:	f000 f89e 	bl	8006e4c <_malloc_usable_size_r>
 8006d10:	4285      	cmp	r5, r0
 8006d12:	4606      	mov	r6, r0
 8006d14:	d802      	bhi.n	8006d1c <_realloc_r+0x34>
 8006d16:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006d1a:	d8f4      	bhi.n	8006d06 <_realloc_r+0x1e>
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	4640      	mov	r0, r8
 8006d20:	f7ff f9c4 	bl	80060ac <_malloc_r>
 8006d24:	4607      	mov	r7, r0
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d0ec      	beq.n	8006d04 <_realloc_r+0x1c>
 8006d2a:	42b5      	cmp	r5, r6
 8006d2c:	462a      	mov	r2, r5
 8006d2e:	4621      	mov	r1, r4
 8006d30:	bf28      	it	cs
 8006d32:	4632      	movcs	r2, r6
 8006d34:	f7ff f93f 	bl	8005fb6 <memcpy>
 8006d38:	4621      	mov	r1, r4
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	f7ff f94a 	bl	8005fd4 <_free_r>
 8006d40:	463c      	mov	r4, r7
 8006d42:	e7e0      	b.n	8006d06 <_realloc_r+0x1e>

08006d44 <__swhatbuf_r>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	460c      	mov	r4, r1
 8006d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d4c:	2900      	cmp	r1, #0
 8006d4e:	b096      	sub	sp, #88	@ 0x58
 8006d50:	4615      	mov	r5, r2
 8006d52:	461e      	mov	r6, r3
 8006d54:	da0d      	bge.n	8006d72 <__swhatbuf_r+0x2e>
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d5c:	f04f 0100 	mov.w	r1, #0
 8006d60:	bf14      	ite	ne
 8006d62:	2340      	movne	r3, #64	@ 0x40
 8006d64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d68:	2000      	movs	r0, #0
 8006d6a:	6031      	str	r1, [r6, #0]
 8006d6c:	602b      	str	r3, [r5, #0]
 8006d6e:	b016      	add	sp, #88	@ 0x58
 8006d70:	bd70      	pop	{r4, r5, r6, pc}
 8006d72:	466a      	mov	r2, sp
 8006d74:	f000 f848 	bl	8006e08 <_fstat_r>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	dbec      	blt.n	8006d56 <__swhatbuf_r+0x12>
 8006d7c:	9901      	ldr	r1, [sp, #4]
 8006d7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d86:	4259      	negs	r1, r3
 8006d88:	4159      	adcs	r1, r3
 8006d8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d8e:	e7eb      	b.n	8006d68 <__swhatbuf_r+0x24>

08006d90 <__smakebuf_r>:
 8006d90:	898b      	ldrh	r3, [r1, #12]
 8006d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d94:	079d      	lsls	r5, r3, #30
 8006d96:	4606      	mov	r6, r0
 8006d98:	460c      	mov	r4, r1
 8006d9a:	d507      	bpl.n	8006dac <__smakebuf_r+0x1c>
 8006d9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	6123      	str	r3, [r4, #16]
 8006da4:	2301      	movs	r3, #1
 8006da6:	6163      	str	r3, [r4, #20]
 8006da8:	b003      	add	sp, #12
 8006daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dac:	ab01      	add	r3, sp, #4
 8006dae:	466a      	mov	r2, sp
 8006db0:	f7ff ffc8 	bl	8006d44 <__swhatbuf_r>
 8006db4:	9f00      	ldr	r7, [sp, #0]
 8006db6:	4605      	mov	r5, r0
 8006db8:	4639      	mov	r1, r7
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f7ff f976 	bl	80060ac <_malloc_r>
 8006dc0:	b948      	cbnz	r0, 8006dd6 <__smakebuf_r+0x46>
 8006dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dc6:	059a      	lsls	r2, r3, #22
 8006dc8:	d4ee      	bmi.n	8006da8 <__smakebuf_r+0x18>
 8006dca:	f023 0303 	bic.w	r3, r3, #3
 8006dce:	f043 0302 	orr.w	r3, r3, #2
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	e7e2      	b.n	8006d9c <__smakebuf_r+0xc>
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	6020      	str	r0, [r4, #0]
 8006dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dde:	81a3      	strh	r3, [r4, #12]
 8006de0:	9b01      	ldr	r3, [sp, #4]
 8006de2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006de6:	b15b      	cbz	r3, 8006e00 <__smakebuf_r+0x70>
 8006de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dec:	4630      	mov	r0, r6
 8006dee:	f000 f81d 	bl	8006e2c <_isatty_r>
 8006df2:	b128      	cbz	r0, 8006e00 <__smakebuf_r+0x70>
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	f023 0303 	bic.w	r3, r3, #3
 8006dfa:	f043 0301 	orr.w	r3, r3, #1
 8006dfe:	81a3      	strh	r3, [r4, #12]
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	431d      	orrs	r5, r3
 8006e04:	81a5      	strh	r5, [r4, #12]
 8006e06:	e7cf      	b.n	8006da8 <__smakebuf_r+0x18>

08006e08 <_fstat_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	4d07      	ldr	r5, [pc, #28]	@ (8006e28 <_fstat_r+0x20>)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	4604      	mov	r4, r0
 8006e10:	4608      	mov	r0, r1
 8006e12:	4611      	mov	r1, r2
 8006e14:	602b      	str	r3, [r5, #0]
 8006e16:	f7fa fb02 	bl	800141e <_fstat>
 8006e1a:	1c43      	adds	r3, r0, #1
 8006e1c:	d102      	bne.n	8006e24 <_fstat_r+0x1c>
 8006e1e:	682b      	ldr	r3, [r5, #0]
 8006e20:	b103      	cbz	r3, 8006e24 <_fstat_r+0x1c>
 8006e22:	6023      	str	r3, [r4, #0]
 8006e24:	bd38      	pop	{r3, r4, r5, pc}
 8006e26:	bf00      	nop
 8006e28:	20004368 	.word	0x20004368

08006e2c <_isatty_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4d06      	ldr	r5, [pc, #24]	@ (8006e48 <_isatty_r+0x1c>)
 8006e30:	2300      	movs	r3, #0
 8006e32:	4604      	mov	r4, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	602b      	str	r3, [r5, #0]
 8006e38:	f7fa fb01 	bl	800143e <_isatty>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_isatty_r+0x1a>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_isatty_r+0x1a>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	20004368 	.word	0x20004368

08006e4c <_malloc_usable_size_r>:
 8006e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e50:	1f18      	subs	r0, r3, #4
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	bfbc      	itt	lt
 8006e56:	580b      	ldrlt	r3, [r1, r0]
 8006e58:	18c0      	addlt	r0, r0, r3
 8006e5a:	4770      	bx	lr

08006e5c <_init>:
 8006e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5e:	bf00      	nop
 8006e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e62:	bc08      	pop	{r3}
 8006e64:	469e      	mov	lr, r3
 8006e66:	4770      	bx	lr

08006e68 <_fini>:
 8006e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6a:	bf00      	nop
 8006e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6e:	bc08      	pop	{r3}
 8006e70:	469e      	mov	lr, r3
 8006e72:	4770      	bx	lr
